<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zonzie&#39;s notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zonzie.gitee.io/"/>
  <updated>2018-12-24T10:01:23.362Z</updated>
  <id>https://zonzie.gitee.io/</id>
  
  <author>
    <name>zonzie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring cloud笔记(二)-服务调用(Ribbon和Feign)</title>
    <link href="https://zonzie.gitee.io/2018/12/24/spring-cloud-tutorial-2/"/>
    <id>https://zonzie.gitee.io/2018/12/24/spring-cloud-tutorial-2/</id>
    <published>2018-12-24T02:25:40.000Z</published>
    <updated>2018-12-24T10:01:23.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加actuator"><a href="#添加actuator" class="headerlink" title="添加actuator"></a>添加actuator</h2><p>actuator提供了很多的监控端点, 可以使用http:{ip}:{port}/{endpoint}的形式访问这些端点, 来了解应用程序的运行状况, <a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#production-ready" target="_blank" rel="noopener">官方文档</a><br><br>需要的jar:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>actuator的常用的端点如下:</p><table><thead><tr><th>端点</th><th>描述</th></tr></thead><tbody><tr><td>health</td><td>显示应用程序的健康程度, 内容由HealthIndicator的实现类提供</td></tr><tr><td>autoconfig</td><td>显示自动配置的信息</td></tr><tr><td>beans</td><td>显示上下文中所有的spring bean</td></tr><tr><td>configprops</td><td>显示所有的@ConfigurationProperties的配置属性的列表, <code>endpoints.configprops.enabled=false</code>可以关闭这个端点</td></tr><tr><td>dump</td><td>显示线程活动的快照</td></tr><tr><td>env</td><td>显示应用程序的环境变量</td></tr><tr><td>info</td><td>显示应用程序的基本信息</td></tr><tr><td>metrics</td><td>显示应用的度量标准信息</td></tr><tr><td>shutdown</td><td>关闭应用程序(默认不启用, 需要设置<code>endpoints.shutdown.enabled=true</code>), POST请求</td></tr><tr><td>trace</td><td>显示跟踪信息(默认是最近100个HTTP请求)</td></tr></tbody></table><ul><li><code>/metrics</code>: 返回当前应用的各类度量指标<ul><li><code>processors</code>: 处理器数量</li><li><code>uptime</code>: 运行时间</li><li><code>systemload.average</code>: 系统平均负载</li><li><code>mem.*</code>: 内存概要信息</li><li><code>heap.*</code>: 堆内存的使用情况</li><li><code>nonheap.*</code>: 非堆内存的使用情况</li><li><code>threads.*</code>: 线程使用情况</li><li><code>classes.*</code>: 应用加载和卸载的类统计</li><li><code>gc.*</code>: 垃圾收集器的详细信息<ul><li><code>gc.ps_scavenge.count</code>: 垃圾回收次数</li><li><code>gc.ps_scavenge.time</code>: 垃圾回收消耗的时间</li><li><code>gc.ps_marksweep.count</code>: 标记-清除算法的次数</li><li><code>gc.ps_marksweep.time</code>:  标记-清除算法的消耗时间</li></ul></li><li><code>httpsessions.*</code>: tomcat会话使用情况, 只有嵌入式的tomcat才会有</li><li><code>gauge.*</code>: HTTP请求的性能指标</li><li><code>counter.*</code>: HTTP请求的性能指标</li></ul></li><li>自定义统计值<ol><li>注入<code>o.s.b.actuate.metrics.CounterService</code>或者<code>o.s.b.actuate.GaugeService</code></li><li>调用CounterService的increment或者decrement方法</li></ol></li></ul><h2 id="Ribbon-客户端侧负载均衡-文档"><a href="#Ribbon-客户端侧负载均衡-文档" class="headerlink" title="Ribbon 客户端侧负载均衡(文档)"></a><a href="https://github.com/Netflix/ribbon" target="_blank" rel="noopener">Ribbon 客户端侧负载均衡</a>(<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.1.0.RC3/single/spring-cloud-netflix.html#spring-cloud-ribbon" target="_blank" rel="noopener">文档</a>)</h2><ul><li>服务端的负载均衡: F5, nginx</li><li>主要区别: 服务清单的维护位置</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用:"></a><strong>使用</strong>:</h3><ul><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>为RestTemplate添加<code>@LoadBalanced</code>的注解, 就可使其具备负载均衡的能力</p></li><li>使用时, 将域名换成服务名就行了</li></ul><h3 id="ribbon的默认配置"><a href="#ribbon的默认配置" class="headerlink" title="ribbon的默认配置:"></a><strong>ribbon的默认配置</strong>:</h3><style>table th:first-of-type {    width: 110px;}</style><table><thead><tr><th>Bean Type</th><th>Bean Name</th><th>Class Name</th><th>description</th></tr></thead><tbody><tr><td>IClientConfig</td><td>ribbonClientConfig</td><td>DefaultClientConfigImpl</td><td>ribbon的客户端配置</td></tr><tr><td>IRule</td><td>ribbonRule</td><td>ZoneAvoidanceRule</td><td>ribbon的负载均衡策略</td></tr><tr><td>IPing</td><td>ribbonPing</td><td>DummyPing</td><td>ribbon的实例检查策略</td></tr><tr><td>ServerList<server></server></td><td>ribbonServerList</td><td>ConfigurationBasedServerList</td><td>服务实例清单的维护机制</td></tr><tr><td>ServerListFilter<server></server></td><td>ribbonServerListFilter</td><td>ZonePreferenceServerListFilter</td><td>服务实例清单的过滤机制</td></tr><tr><td>ILoadBalancer</td><td>ribbonLoadBalancer</td><td>ZoneAwareLoadBalancer</td><td>负载均衡器</td></tr><tr><td>ServerListUpdater</td><td>ribbonServerListUpdater</td><td>PollingServerListUpdater</td><td>服务实例的更新策略</td></tr></tbody></table><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置:"></a><strong>自定义配置</strong>:</h3><ol><li><p>使用配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConfiguration</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 随机的负载均衡策略</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"USER-GAOTU100-COM"</span>, configuration=RibbonConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRibbonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在配置文件中修改默认配置(Camden SR4之后的版本支持)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;clientName&gt;.ribbon.NFLoadBalancerClassName:</span> <span class="string">Should</span> <span class="string">implement</span> <span class="string">ILoadBalancer</span></span><br><span class="line"><span class="string">&lt;clientName&gt;.ribbon.NFLoadBalancerRuleClassName:</span> <span class="string">Should</span> <span class="string">implement</span> <span class="string">IRule</span></span><br><span class="line"><span class="string">&lt;clientName&gt;.ribbon.NFLoadBalancerPingClassName:</span> <span class="string">Should</span> <span class="string">implement</span> <span class="string">IPing</span></span><br><span class="line"><span class="string">&lt;clientName&gt;.ribbon.NIWSServerListClassName:</span> <span class="string">Should</span> <span class="string">implement</span> <span class="string">ServerList</span></span><br><span class="line"><span class="string">&lt;clientName&gt;.ribbon.NIWSServerListFilterClassName:</span> <span class="string">Should</span> <span class="string">implement</span> <span class="string">ServerListFilter</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">USER-GAOTU100-COM:</span></span><br><span class="line"><span class="attr">   ribbon:</span> </span><br><span class="line"><span class="attr">       NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadBanlancer.RandomRule</span></span><br></pre></td></tr></table></figure><p>可重写的配置请查看: <code>org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration</code></p><h3 id="ribbon的全局配置"><a href="#ribbon的全局配置" class="headerlink" title="ribbon的全局配置"></a><strong>ribbon的全局配置</strong></h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用配置</span></span><br><span class="line"><span class="comment"># 开启重试机制</span></span><br><span class="line"><span class="string">spring.cloud.loadbalancer.retry.enabled</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 断路器的超时时间</span></span><br><span class="line"><span class="string">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</span> <span class="string">=</span> <span class="number">10000</span></span><br><span class="line"><span class="comment"># 请求处理的超时时间</span></span><br><span class="line"><span class="string">ribbon.ReadTimeout</span> <span class="string">=</span> <span class="number">3000</span></span><br><span class="line"><span class="comment"># 请求链接的超时时间</span></span><br><span class="line"><span class="string">ribbon.ribbon.ConnectTimeout</span> <span class="string">=</span> <span class="number">3000</span></span><br><span class="line"><span class="comment"># 当前实例的重试次数</span></span><br><span class="line"><span class="string">ribbon.MaxAutoRetries</span> <span class="string">=</span> <span class="number">3</span></span><br><span class="line"><span class="comment"># 切换实例的重试次数</span></span><br><span class="line"><span class="string">ribbon.MaxAutoRetriesNextServer</span> <span class="string">=</span> <span class="number">2</span></span><br><span class="line"><span class="comment"># USER-GAOTU100-COM.ribbon.ReadTimeout = 1000</span></span><br></pre></td></tr></table></figure><p>针对具体客户端的配置格式: <code>&lt;client-name&gt;.ribbon.&lt;key&gt;=&lt;value&gt;</code><br><br>所有的配置的位置: <code>com.netflix.client.config.CommonClientConfigKey</code></p></li></ol><h2 id="Feign-声明式REST客户端-文档"><a href="#Feign-声明式REST客户端-文档" class="headerlink" title="Feign-声明式REST客户端(文档)"></a><a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">Feign-声明式REST客户端</a>(<a href="https://cloud.spring.io/spring-cloud-netflix/1.4.x/single/spring-cloud-netflix.html#spring-cloud-feign" target="_blank" rel="noopener">文档</a>)</h2><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>应用主类添加注解<code>@EnableFeignClients</code></p></li><li><p>创建feign接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"USER-GAOTU100-COM"</span>, configuration = FeignConfig.class, fallback =</span><br><span class="line">      UserFeignFallBackImpl.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">UserFeignClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(</span><br><span class="line">          value = &#123;<span class="string">"user/v2/captcha_pair"</span>&#125;,</span><br><span class="line">          method = &#123;RequestMethod.GET&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function">ResponseVO&lt;SendPasscodeDTO&gt; <span class="title">getCaptchaPair</span><span class="params">(@RequestParam(<span class="string">"mobile"</span>)</span> String var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(</span><br><span class="line">            value = &#123;<span class="string">"user/v2/validate_captcha"</span>&#125;,</span><br><span class="line">            method = &#123;RequestMethod.GET&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function">ResponseVO <span class="title">validateCaptcha</span><span class="params">(ValidateCaptchaRequest var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(</span><br><span class="line">            value = &#123;<span class="string">"user/v2/send_passcode"</span>&#125;,</span><br><span class="line">            method = &#123;RequestMethod.POST&#125;,</span><br><span class="line">            headers = &#123;<span class="string">"Content-Type=application/x-www-form-urlencoded"</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function">ResponseVO <span class="title">sendPassCode</span><span class="params">(SendPassCodeRequest var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(</span><br><span class="line">            value = &#123;<span class="string">"user/v2/validate_passcode"</span>&#125;,</span><br><span class="line">            method = &#123;RequestMethod.POST&#125;,</span><br><span class="line">            headers = &#123;<span class="string">"Content-Type=application/x-www-form-urlencoded"</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function">ResponseVO <span class="title">validatePassCode</span><span class="params">(ValidatePassCodeRequest var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(</span><br><span class="line">            value = &#123;<span class="string">"user/v2/register"</span>&#125;,</span><br><span class="line">            method = &#123;RequestMethod.POST&#125;,</span><br><span class="line">            headers = &#123;<span class="string">"Content-Type=application/x-www-form-urlencoded"</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function">ResponseVO&lt;UserInfoVO&gt; <span class="title">registerUser</span><span class="params">(RegisterUserRequest var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(</span><br><span class="line">            value = &#123;<span class="string">"user/v2/login"</span>&#125;,</span><br><span class="line">            method = &#123;RequestMethod.POST&#125;,</span><br><span class="line">            headers = &#123;<span class="string">"Content-Type=application/x-www-form-urlencoded"</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function">ResponseVO&lt;UserInfoVO&gt; <span class="title">loginByPassword</span><span class="params">(LoginByPasswordRequest var1)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserFeignClient userFeignClient;</span><br></pre></td></tr></table></figure></li><li><p>默认配置下, 当前版本的feign注意事项:</p><ul><li>所有的参数必须添加注解,以及绑定参数的名称</li><li>传递对象参数, 不加@RequestBody注解, 也会默认是一个RequestBody, 即使是GET请求</li><li>feign接口上不能加@RequestMapping注解, 要添加统一的前缀, 可以使用@FeignClient注解的path属性</li><li>GET请求传递参数不能传递对象参数, 只能分开添加@RequestParam, 或者传递一个Map<string, ?=""> param</string,></li><li>不支持类似@GetMapping这种包含请求方法语义的注解</li></ul></li></ul><h3 id="feign的自定义配置"><a href="#feign的自定义配置" class="headerlink" title="feign的自定义配置"></a>feign的自定义配置</h3><h4 id="feign的默认配置类-org-springframework-cloud-netflix-feign-FeignClientsConfiguration"><a href="#feign的默认配置类-org-springframework-cloud-netflix-feign-FeignClientsConfiguration" class="headerlink" title="feign的默认配置类: org.springframework.cloud.netflix.feign.FeignClientsConfiguration"></a>feign的默认配置类: <code>org.springframework.cloud.netflix.feign.FeignClientsConfiguration</code></h4><h4 id="自定义配置-1"><a href="#自定义配置-1" class="headerlink" title="自定义配置"></a>自定义配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * feign自定义配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FeignConfig</span><span class="params">(ObjectFactory&lt;HttpMessageConverters&gt; messageConverters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageConverters = messageConverters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Decoder <span class="title">feignDecoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomDecoder(<span class="keyword">new</span> SpringDecoder(messageConverters));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Encoder <span class="title">feignEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomEncoder(messageConverters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加到<code>@FeignClient(value = &quot;USER-GAOTU100-COM&quot;, configuration = FeignConfig.class)</code></p><h5 id="使用feign原生的注解"><a href="#使用feign原生的注解" class="headerlink" title="使用feign原生的注解"></a>使用feign原生的注解</h5><p>详细的用法: <a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">https://github.com/OpenFeign/feign</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 更换契约</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Contract <span class="title">feignContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> feign.Contract.Default();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestLine</span>(<span class="string">"GET /&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@Headers</span>(<span class="string">"Content-type: application/json"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span></span><br></pre></td></tr></table></figure><h5 id="使用JAX-RS的注解"><a href="#使用JAX-RS的注解" class="headerlink" title="使用JAX-RS的注解"></a>使用JAX-RS的注解</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-jaxrs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.ws.rs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsr311-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 更换JAX-RS契约</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Contract <span class="title">feignContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JAXRSContract()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@Produces</span>(&#123; <span class="string">"application/json"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br></pre></td></tr></table></figure><h5 id="feign对压缩的支持"><a href="#feign对压缩的支持" class="headerlink" title="feign对压缩的支持"></a>feign对压缩的支持</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">feign.compression.request.enabled=true</span></span><br><span class="line"><span class="string">feign.compression.response.enabled=true</span></span><br></pre></td></tr></table></figure><p>更精确的配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">feign.compression.request.enabled=true</span></span><br><span class="line"><span class="string">feign.compression.request.mime-types=text/xml,application/xml,application/json</span></span><br><span class="line"><span class="string">feign.compression.request.min-request-size=2048</span></span><br></pre></td></tr></table></figure></p><h4 id="Feign的日志"><a href="#Feign的日志" class="headerlink" title="Feign的日志"></a>Feign的日志</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="Logger-Level的选择"><a href="#Logger-Level的选择" class="headerlink" title="Logger.Level的选择:"></a>Logger.Level的选择:</h5><ol><li>NONE: 不记录任何日志</li><li>BASIC: 仅记录请求方法, URL, 响应状态码以及执行时间</li><li>HEADERS: 在BASIC级别的基础上, 记录请求和响应的header</li><li>FULL: 记录请求和响应的header, body和元数据</li></ol>]]></content>
    
    <summary type="html">
    
      an introduction to ribbon and feign
    
    </summary>
    
      <category term="spring cloud" scheme="https://zonzie.gitee.io/categories/spring-cloud/"/>
    
    
      <category term="spring cloud" scheme="https://zonzie.gitee.io/tags/spring-cloud/"/>
    
      <category term="ribbon" scheme="https://zonzie.gitee.io/tags/ribbon/"/>
    
      <category term="feign" scheme="https://zonzie.gitee.io/tags/feign/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud笔记(一)-springCloud和eureka简介</title>
    <link href="https://zonzie.gitee.io/2018/12/17/spring-cloud-tutorial-1/"/>
    <id>https://zonzie.gitee.io/2018/12/17/spring-cloud-tutorial-1/</id>
    <published>2018-12-17T03:06:27.000Z</published>
    <updated>2018-12-24T09:52:57.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微服务架构基础"><a href="#微服务架构基础" class="headerlink" title="微服务架构基础"></a>微服务架构基础</h3><ul><li>理论基础: <a href="http://www.melconway.com/Home/Committees_Paper.html" target="_blank" rel="noopener"><strong>康威定律</strong></a></li><li>起源: 来自于martin Fowler的一篇<a href="https://www.martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">博文</a>: <a href="https://www.cnblogs.com/liuning8023/p/4493156.html" target="_blank" rel="noopener">这是翻译</a></li><li>基本概念: 一种系统架构上的设计风格, 主旨是将原本独立的系统拆分成多个小的服务,这些服务各自在独立的进程中运行, 服务之间基于统一的协议进行通信协作, 被拆分的每一个小型服务都围绕着系统中的某一项或者一些耦合程度很高的业务功能进行构建, 每项服务都维护着自身的业务开发, 数据存储等, 不同的服务可以使用不同的语言来编写</li><li><strong>单体系统的问题</strong>:<ul><li><strong>复杂性</strong>: 随着项目需求的不断增加, 单体应用会越来越臃肿, 可维护性, 灵活性越来越低, 维护成本越来越高, 模块越来越多, 模块的边界模糊, 依赖关系混乱不清, 修复一个bug可能会引入新的bug</li><li><strong>技术债务</strong>: 开发时间紧张, 需求的变更, 人员变更等, 会导致逐渐形成技术债务,并且越积越多. “not broken, don’t fix”, 但是有技术债务是正常的, 就像金融债务, 只要偿还债务的速度大于债务的增长速度, 就是良性债务</li><li><strong>部署风险</strong>: 随着项目越来越大, 每一次部署风险也会越来越大, 因为大的项目涉及到的功能也多, 每次上线都会有大量的功能变更和缺陷修复, 同样会加大出错的概率, 参见<a href="https://baike.baidu.com/item/%E5%A2%A8%E8%8F%B2%E5%AE%9A%E5%BE%8B/746284?fr=aladdin" target="_blank" rel="noopener">墨菲定律</a></li><li><strong>可靠性差</strong></li><li><strong>扩展能力有限</strong></li></ul></li><li><strong>微服务的优点</strong><ul><li>基本解决了上述单体应用的缺点</li><li>开发简单</li><li>技术栈灵活</li><li>服务独立无依赖</li><li>独立按需扩展</li><li>可用性高</li></ul></li><li><strong>微服务架构面临的问题</strong><ul><li>多服务运维难度</li><li>分布式系统的复杂性: 难免会遇到的问题, 网络延迟, 分布式事物, 数据一致性等</li><li>接口的一致性, 系统部署依赖: 修改一个接口, 调用了这个接口的服务都需要做调整</li><li>服务间通信成本</li><li>系统集成测试</li><li>重复工作</li><li>性能监控</li></ul></li><li><strong>微服务的设计原则</strong>:<ul><li>单一职责原则: 一个单元只应该关注整个系统功能中单独的, 有界限的一部分</li><li>服务自治原则: 每个微服务应该具备独立的业务能力, 依赖和运行环境. 服务是一个独立的业务单元, 应该和其他的服务高度解耦, 每个服务从开发, 测试, 构建, 部署都应该可以独立运行,而不依赖其他的服务</li><li><strong>通信机制</strong>: spring cloud默认使用REST模式的http协议, dubbo, motan, dubbox基于netty实现自定义的通信协议</li><li><strong>微服务的粒度</strong></li></ul></li></ul><h3 id="微服务开发框架–Spring-Cloud"><a href="#微服务开发框架–Spring-Cloud" class="headerlink" title="微服务开发框架–Spring Cloud"></a>微服务开发框架–Spring Cloud</h3><h4 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a><a href="http://spring.io/projects/spring-cloud" target="_blank" rel="noopener">常用组件</a></h4><ul><li>eureka</li><li>ribbon</li><li>hystrix</li><li>feign</li><li>zuul</li><li>config</li><li>slenth</li><li><a href="https://springcloud.cc/" target="_blank" rel="noopener">…</a></li></ul><h4 id="服务发现组件–Eureka"><a href="#服务发现组件–Eureka" class="headerlink" title="服务发现组件–Eureka"></a>服务发现组件–<a href="https://github.com/Netflix/eureka" target="_blank" rel="noopener">Eureka</a></h4><ul><li>eureka和zookeeper的对比<ul><li>CAP原则(<a href="http://www.ruanyifeng.com/blog/2018/07/cap.html" target="_blank" rel="noopener">解释</a>), 分布式服务, 优先保证AP, 需要强一致性, 优先保证CP, <a href="http://dockone.io/article/78" target="_blank" rel="noopener">两者的对比</a></li></ul></li><li>服务提供方, 消费方, 服务发现组件的关系<ol><li>各个服务启动, 将自己的网络地址等信息注册到服务发现组件</li><li>消费者从服务发现组件查询服务提供者的网络地址, 选择该地址调用服务提供方的接口</li><li>微服务和服务发现组件使用一定的机制通信, 发现组件长时间无法与服务实例通信, 就注销该实例</li><li>服务提供方的网络地址变更, 会重新注册到服务发现组件, 无需人工修改</li></ol></li><li>常见的架构:<ul><li><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/microservice_construct.jpg" alt="微服务架构"></li><li><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/spring_cloud_arch.png" alt="eureka"></li></ul></li><li>组件:<ul><li>eurka server</li><li>eureka client</li></ul></li></ul><h5 id="eureka服务搭建"><a href="#eureka服务搭建" class="headerlink" title="eureka服务搭建"></a>eureka服务搭建</h5><h6 id="eureka-server端"><a href="#eureka-server端" class="headerlink" title="eureka server端"></a>eureka server端</h6><ul><li><p>需要的jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>需要的注解:</p><ul><li>在应用主类上添加注解: <code>@EnableEurekaServer</code></li></ul></li><li><p>需要的最少配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>访问地址:</p><ul><li><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></li></ul></li><li>常用的配置属性<ul><li><code>eureka.client.register-with-eureka</code>: 表示是否把自己注册到eureka</li><li><code>eureka.client.fetch-registry</code>: 表示是否从注册表上拉取注册信息</li><li><code>eureka.client.serviceUrl.defaultZone</code>: 表示与eureka server的交互地址,拉取服务列表,注册服务, 都需要这个地址, 多个地址使用<code>,</code>分隔</li><li><code>spring.application.name</code>: 用户指定注册到Eureka Server上的应用名称</li><li><code>eureka.instance.prefer-ip-address</code>: 表示注册自己的ip到Eureka Server</li></ul></li></ul><h5 id="eureka-client端"><a href="#eureka-client端" class="headerlink" title="eureka client端"></a>eureka client端</h5><ul><li><p>需要的jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>需要在主类添加的注解: <code>@EnableEurekaClient</code> 或者 <code>@EnableDiscoveryClient</code></p></li><li>配置:<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">client</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:1111/eureka/</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="更多的说明"><a href="#更多的说明" class="headerlink" title="更多的说明"></a>更多的说明</h5><ul><li>服务续约:<ul><li><code>eureka.instance.lease-renewal-interval-in-seconds</code>: 用于定义服务续约任务的调用间隔时间, 默认是30s</li><li><code>lease-expiration-duration-in-seconds</code>: 用于定义服务失效的时间, 默认是90s</li></ul></li><li>获取服务:<ul><li><code>eureka.client.registry-fetch-interval-seconds</code>: 缓存清单的更新时间</li></ul></li><li>服务下线:<ul><li>正常的服务下线或者重启, 会发送REST请求到Eureka Server, 服务端接到请求, 会将服务状态置为下线, 并且把下线事件传播出去</li></ul></li><li>注册中心<ul><li>失效剔除:<ul><li>如果服务没有正常下线, eureka server 不会收到下线的请求, Eureka Server会在启动时创建一个定时任务, 每隔一段时间把没有按时续约的服务剔除出去</li></ul></li><li>自我保护:<ul><li>服务在注册到Eureka Server后, 会维护一个心跳连接, 告诉eureka自己还活着, 如果心跳失败的比例在15分钟内低于85%, eureka server会将实例列表保护起来,不让实例过期, 这时如果实例出现问题, 调用方容易拿到实际不存在的实例,因此, 客户端需要有请求重试机制, 或者断路器</li><li><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/eureka_self_preservation.png" alt="self_preservation"></li><li>测试环境关闭自我保护机制:<ul><li><code>eureka.server.enable-self-preservation</code>: 默认为true, 改成false</li></ul></li><li>修改阈值: <code>eureka.server.renewal-percent-threshold</code>: 默认值为0.85</li></ul></li><li>eureka Server 和 client之间通信也是通过REST模式的http协议, <a href="https://github.com/Netflix/eureka/wiki/Eureka-REST-operations" target="_blank" rel="noopener">这是文档</a></li></ul></li><li><code>eureka.client</code>相关配置详细信息: <ul><li><code>org.springframework.cloud.netflix.eureka.EurekaClientConfigBean</code></li></ul></li><li><code>eureka.instance</code>相关配置详细信息: <ul><li><code>org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean</code></li></ul></li><li><code>eureka.server</code>相关配置详细信息: <ul><li><code>org.springframework.cloud.netflix.eureka.server.EurekaServerConfigBean</code></li></ul></li></ul><h3 id="全部的配置"><a href="#全部的配置" class="headerlink" title="全部的配置"></a>全部的配置</h3><ul><li><p>eureka.instance</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务注册中心实例的主机名</span></span><br><span class="line"><span class="string">eureka.instance.hostname=localhost</span></span><br><span class="line"><span class="comment">#注册在Eureka服务中的应用组名</span></span><br><span class="line"><span class="string">eureka.instance.app-group-name=</span></span><br><span class="line"><span class="comment">#注册在的Eureka服务中的应用名称</span></span><br><span class="line"><span class="string">eureka.instance.appname=</span></span><br><span class="line"><span class="comment">#该实例注册到服务中心的唯一ID</span></span><br><span class="line"><span class="string">eureka.instance.instance-id=</span></span><br><span class="line"><span class="comment">#该实例的IP地址</span></span><br><span class="line"><span class="string">eureka.instance.ip-address=</span></span><br><span class="line"><span class="comment">#该实例，相较于hostname是否优先使用IP</span></span><br><span class="line"><span class="string">eureka.instance.prefer-ip-address=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用于AWS平台自动扩展的与此实例关联的组名，</span></span><br><span class="line"><span class="string">eureka.instance.a-s-g-name=</span></span><br><span class="line"><span class="comment">#部署此实例的数据中心</span></span><br><span class="line"><span class="string">eureka.instance.data-center-info=</span></span><br><span class="line"><span class="comment">#默认的地址解析顺序</span></span><br><span class="line"><span class="string">eureka.instance.default-address-resolution-order=</span></span><br><span class="line"><span class="comment">#该实例的环境配置</span></span><br><span class="line"><span class="string">eureka.instance.environment=</span></span><br><span class="line"><span class="comment">#初始化该实例，注册到服务中心的初始状态</span></span><br><span class="line"><span class="string">eureka.instance.initial-status=up</span></span><br><span class="line"><span class="comment">#表明是否只要此实例注册到服务中心，立马就进行通信</span></span><br><span class="line"><span class="string">eureka.instance.instance-enabled-onit=false</span></span><br><span class="line"><span class="comment">#该服务实例的命名空间,用于查找属性</span></span><br><span class="line"><span class="string">eureka.instance.namespace=eureka</span></span><br><span class="line"><span class="comment">#该服务实例的子定义元数据，可以被服务中心接受到</span></span><br><span class="line"><span class="string">eureka.instance.metadata-map.test</span> <span class="string">=</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务中心删除此服务实例的等待时间(秒为单位),时间间隔为最后一次服务中心接受到的心跳时间</span></span><br><span class="line"><span class="string">eureka.instance.lease-expiration-duration-in-seconds=90</span></span><br><span class="line"><span class="comment">#该实例给服务中心发送心跳的间隔时间，用于表明该服务实例可用</span></span><br><span class="line"><span class="string">eureka.instance.lease-renewal-interval-in-seconds=30</span></span><br><span class="line"><span class="comment">#该实例，注册服务中心，默认打开的通信数量</span></span><br><span class="line"><span class="string">eureka.instance.registry.default-open-for-traffic-count=1</span></span><br><span class="line"><span class="comment">#每分钟续约次数</span></span><br><span class="line"><span class="string">eureka.instance.registry.expected-number-of-renews-per-min=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#该实例健康检查url,绝对路径</span></span><br><span class="line"><span class="string">eureka.instance.health-check-url=</span></span><br><span class="line"><span class="comment">#该实例健康检查url,相对路径</span></span><br><span class="line"><span class="string">eureka.instance.health-check-url-path=/health</span></span><br><span class="line"><span class="comment">#该实例的主页url,绝对路径</span></span><br><span class="line"><span class="string">eureka.instance.home-page-url=</span></span><br><span class="line"><span class="comment">#该实例的主页url,相对路径</span></span><br><span class="line"><span class="string">eureka.instance.home-page-url-path=/</span></span><br><span class="line"><span class="comment">#该实例的安全健康检查url,绝对路径</span></span><br><span class="line"><span class="string">eureka.instance.secure-health-check-url=</span></span><br><span class="line"><span class="comment">#https通信端口</span></span><br><span class="line"><span class="string">eureka.instance.secure-port=443</span></span><br><span class="line"><span class="comment">#https通信端口是否启用</span></span><br><span class="line"><span class="string">eureka.instance.secure-port-enabled=false</span></span><br><span class="line"><span class="comment">#http通信端口</span></span><br><span class="line"><span class="string">eureka.instance.non-secure-port=80</span></span><br><span class="line"><span class="comment">#http通信端口是否启用</span></span><br><span class="line"><span class="string">eureka.instance.non-secure-port-enabled=true</span></span><br><span class="line"><span class="comment">#该实例的安全虚拟主机名称(https)</span></span><br><span class="line"><span class="string">eureka.instance.secure-virtual-host-name=unknown</span></span><br><span class="line"><span class="comment">#该实例的虚拟主机名称(http)</span></span><br><span class="line"><span class="string">eureka.instance.virtual-host-name=unknown</span></span><br><span class="line"><span class="comment">#该实例的状态呈现url,绝对路径</span></span><br><span class="line"><span class="string">eureka.instance.status-page-url=</span></span><br><span class="line"><span class="comment">#该实例的状态呈现url,相对路径</span></span><br><span class="line"><span class="string">eureka.instance.status-page-url-path=/status</span></span><br></pre></td></tr></table></figure></li><li><p>eureka.server</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################server 与 client 关联的配置#####################33</span></span><br><span class="line"><span class="comment">#服务端开启自我保护模式。无论什么情况，服务端都会保持一定数量的服务。避免client与server的网络问题，而出现大量的服务被清除。</span></span><br><span class="line"><span class="string">eureka.server.enable-self-preservation=true</span></span><br><span class="line"><span class="comment">#开启清除无效服务的定时任务，时间间隔。默认1分钟</span></span><br><span class="line"><span class="string">eureka.server.eviction-interval-timer-in-ms=</span> <span class="number">60000</span></span><br><span class="line"><span class="comment">#间隔多长时间，清除过期的delta数据</span></span><br><span class="line"><span class="string">eureka.server.delta-retention-timer-interval-in-ms=0</span></span><br><span class="line"><span class="comment">#过期数据，是否也提供给client</span></span><br><span class="line"><span class="string">eureka.server.disable-delta=false</span></span><br><span class="line"><span class="comment">#eureka服务端是否记录client的身份header</span></span><br><span class="line"><span class="string">eureka.server.log-identity-headers=true</span></span><br><span class="line"><span class="comment">#请求频率限制器</span></span><br><span class="line"><span class="string">eureka.server.rate-limiter-burst-size=10</span></span><br><span class="line"><span class="comment">#是否开启请求频率限制器</span></span><br><span class="line"><span class="string">eureka.server.rate-limiter-enabled=false</span></span><br><span class="line"><span class="comment">#请求频率的平均值</span></span><br><span class="line"><span class="string">eureka.server.rate-limiter-full-fetch-average-rate=100</span></span><br><span class="line"><span class="comment">#是否对标准的client进行频率请求限制。如果是false，则只对非标准client进行限制</span></span><br><span class="line"><span class="string">eureka.server.rate-limiter-throttle-standard-clients=false</span></span><br><span class="line"><span class="comment">#注册服务、拉去服务列表数据的请求频率的平均值</span></span><br><span class="line"><span class="string">eureka.server.rate-limiter-registry-fetch-average-rate=500</span></span><br><span class="line"><span class="comment">#设置信任的client list</span></span><br><span class="line"><span class="string">eureka.server.rate-limiter-privileged-clients=</span></span><br><span class="line"><span class="comment">#在设置的时间范围类，期望与client续约的百分比。</span></span><br><span class="line"><span class="string">eureka.server.renewal-percent-threshold=0.85</span></span><br><span class="line"><span class="comment">#多长时间更新续约的阈值</span></span><br><span class="line"><span class="string">eureka.server.renewal-threshold-update-interval-ms=0</span></span><br><span class="line"><span class="comment">#对于缓存的注册数据，多长时间过期</span></span><br><span class="line"><span class="string">eureka.server.response-cache-auto-expiration-in-seconds=180</span></span><br><span class="line"><span class="comment">#多长时间更新一次缓存中的服务注册数据</span></span><br><span class="line"><span class="string">eureka.server.response-cache-update-interval-ms=0</span></span><br><span class="line"><span class="comment">#缓存增量数据的时间，以便在检索的时候不丢失信息</span></span><br><span class="line"><span class="string">eureka.server.retention-time-in-m-s-in-delta-queue=0</span></span><br><span class="line"><span class="comment">#当时间戳不一致的时候，是否进行同步</span></span><br><span class="line"><span class="string">eureka.server.sync-when-timestamp-differs=true</span></span><br><span class="line"><span class="comment">#是否采用只读缓存策略，只读策略对于缓存的数据不会过期。</span></span><br><span class="line"><span class="string">eureka.server.use-read-only-response-cache=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################server 自定义实现的配置#####################33</span></span><br><span class="line"><span class="comment">#json的转换的实现类名</span></span><br><span class="line"><span class="string">eureka.server.json-codec-name=</span></span><br><span class="line"><span class="comment">#PropertyResolver</span></span><br><span class="line"><span class="string">eureka.server.property-resolver=</span></span><br><span class="line"><span class="comment">#eureka server xml的编解码实现名称</span></span><br><span class="line"><span class="string">eureka.server.xml-codec-name=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################server node 与 node 之间关联的配置#####################33</span></span><br><span class="line"><span class="comment">#发送复制数据是否在request中，总是压缩</span></span><br><span class="line"><span class="string">eureka.server.enable-replicated-request-compression=false</span></span><br><span class="line"><span class="comment">#指示群集节点之间的复制是否应批处理以提高网络效率。</span></span><br><span class="line"><span class="string">eureka.server.batch-replication=false</span></span><br><span class="line"><span class="comment">#允许备份到备份池的最大复制事件数量。而这个备份池负责除状态更新的其他事件。可以根据内存大小，超时和复制流量，来设置此值得大小</span></span><br><span class="line"><span class="string">eureka.server.max-elements-in-peer-replication-pool=10000</span></span><br><span class="line"><span class="comment">#允许备份到状态备份池的最大复制事件数量</span></span><br><span class="line"><span class="string">eureka.server.max-elements-in-status-replication-pool=10000</span></span><br><span class="line"><span class="comment">#多个服务中心相互同步信息线程的最大空闲时间</span></span><br><span class="line"><span class="string">eureka.server.max-idle-thread-age-in-minutes-for-peer-replication=15</span></span><br><span class="line"><span class="comment">#状态同步线程的最大空闲时间</span></span><br><span class="line"><span class="string">eureka.server.max-idle-thread-in-minutes-age-for-status-replication=15</span></span><br><span class="line"><span class="comment">#服务注册中心各个instance相互复制数据的最大线程数量</span></span><br><span class="line"><span class="string">eureka.server.max-threads-for-peer-replication=20</span></span><br><span class="line"><span class="comment">#服务注册中心各个instance相互复制状态数据的最大线程数量</span></span><br><span class="line"><span class="string">eureka.server.max-threads-for-status-replication=1</span></span><br><span class="line"><span class="comment">#instance之间复制数据的通信时长</span></span><br><span class="line"><span class="string">eureka.server.max-time-for-replication=30000</span></span><br><span class="line"><span class="comment">#正常的对等服务instance最小数量。-1表示服务中心为单节点。</span></span><br><span class="line"><span class="string">eureka.server.min-available-instances-for-peer-replication=-1</span></span><br><span class="line"><span class="comment">#instance之间相互复制开启的最小线程数量</span></span><br><span class="line"><span class="string">eureka.server.min-threads-for-peer-replication=5</span></span><br><span class="line"><span class="comment">#instance之间用于状态复制，开启的最小线程数量</span></span><br><span class="line"><span class="string">eureka.server.min-threads-for-status-replication=1</span></span><br><span class="line"><span class="comment">#instance之间复制数据时可以重试的次数</span></span><br><span class="line"><span class="string">eureka.server.number-of-replication-retries=5</span></span><br><span class="line"><span class="comment">#eureka节点间间隔多长时间更新一次数据。默认10分钟。</span></span><br><span class="line"><span class="string">eureka.server.peer-eureka-nodes-update-interval-ms=600000</span></span><br><span class="line"><span class="comment">#eureka服务状态的相互更新的时间间隔。</span></span><br><span class="line"><span class="string">eureka.server.peer-eureka-status-refresh-time-interval-ms=0</span></span><br><span class="line"><span class="comment">#eureka对等节点间连接超时时间</span></span><br><span class="line"><span class="string">eureka.server.peer-node-connect-timeout-ms=200</span></span><br><span class="line"><span class="comment">#eureka对等节点连接后的空闲时间</span></span><br><span class="line"><span class="string">eureka.server.peer-node-connection-idle-timeout-seconds=30</span></span><br><span class="line"><span class="comment">#节点间的读数据连接超时时间</span></span><br><span class="line"><span class="string">eureka.server.peer-node-read-timeout-ms=200</span></span><br><span class="line"><span class="comment">#eureka server 节点间连接的总共最大数量</span></span><br><span class="line"><span class="string">eureka.server.peer-node-total-connections=1000</span></span><br><span class="line"><span class="comment">#eureka server 节点间连接的单机最大数量</span></span><br><span class="line"><span class="string">eureka.server.peer-node-total-connections-per-host=10</span></span><br><span class="line"><span class="comment">#在服务节点启动时，eureka尝试获取注册信息的次数</span></span><br><span class="line"><span class="string">eureka.server.registry-sync-retries=</span></span><br><span class="line"><span class="comment">#在服务节点启动时，eureka多次尝试获取注册信息的间隔时间</span></span><br><span class="line"><span class="string">eureka.server.registry-sync-retry-wait-ms=</span></span><br><span class="line"><span class="comment">#当eureka server启动的时候，不能从对等节点获取instance注册信息的情况，应等待多长时间。</span></span><br><span class="line"><span class="string">eureka.server.wait-time-in-ms-when-sync-empty=0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################server 与 remote 关联的配置#####################33</span></span><br><span class="line"><span class="comment">#过期数据，是否也提供给远程region</span></span><br><span class="line"><span class="string">eureka.server.disable-delta-for-remote-regions=false</span></span><br><span class="line"><span class="comment">#回退到远程区域中的应用程序的旧行为 (如果已配置) 如果本地区域中没有该应用程序的实例, 则将被禁用。</span></span><br><span class="line"><span class="string">eureka.server.disable-transparent-fallback-to-other-region=false</span></span><br><span class="line"><span class="comment">#指示在服务器支持的情况下, 是否必须为远程区域压缩从尤里卡服务器获取的内容。</span></span><br><span class="line"><span class="string">eureka.server.g-zip-content-from-remote-region=true</span></span><br><span class="line"><span class="comment">#连接eureka remote note的连接超时时间</span></span><br><span class="line"><span class="string">eureka.server.remote-region-connect-timeout-ms=1000</span></span><br><span class="line"><span class="comment">#remote region 应用白名单</span></span><br><span class="line"><span class="string">eureka.server.remote-region-app-whitelist.</span></span><br><span class="line"><span class="comment">#连接eureka remote note的连接空闲时间</span></span><br><span class="line"><span class="string">eureka.server.remote-region-connection-idle-timeout-seconds=30</span></span><br><span class="line"><span class="comment">#执行remote region 获取注册信息的请求线程池大小</span></span><br><span class="line"><span class="string">eureka.server.remote-region-fetch-thread-pool-size=20</span></span><br><span class="line"><span class="comment">#remote region 从对等eureka加点读取数据的超时时间</span></span><br><span class="line"><span class="string">eureka.server.remote-region-read-timeout-ms=1000</span></span><br><span class="line"><span class="comment">#从remote region 获取注册信息的时间间隔</span></span><br><span class="line"><span class="string">eureka.server.remote-region-registry-fetch-interval=30</span></span><br><span class="line"><span class="comment">#remote region 连接eureka节点的总连接数量</span></span><br><span class="line"><span class="string">eureka.server.remote-region-total-connections=1000</span></span><br><span class="line"><span class="comment">#remote region 连接eureka节点的单机连接数量</span></span><br><span class="line"><span class="string">eureka.server.remote-region-total-connections-per-host=50</span></span><br><span class="line"><span class="comment">#remote region抓取注册信息的存储文件，而这个可靠的存储文件需要全限定名来指定</span></span><br><span class="line"><span class="string">eureka.server.remote-region-trust-store=</span></span><br><span class="line"><span class="comment">#remote region 储存的文件的密码</span></span><br><span class="line"><span class="string">eureka.server.remote-region-trust-store-password=</span></span><br><span class="line"><span class="comment">#remote region url.多个逗号隔开</span></span><br><span class="line"><span class="string">eureka.server.remote-region-urls=</span></span><br><span class="line"><span class="comment">#remote region url.多个逗号隔开</span></span><br><span class="line"><span class="string">eureka.server.remote-region-urls-with-name.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################server 与 ASG/AWS/EIP/route52 之间关联的配置#####################33</span></span><br><span class="line"><span class="comment">#缓存ASG信息的过期时间。</span></span><br><span class="line"><span class="string">eureka.server.a-s-g-cache-expiry-timeout-ms=0</span></span><br><span class="line"><span class="comment">#查询ASG信息的超时时间</span></span><br><span class="line"><span class="string">eureka.server.a-s-g-query-timeout-ms=300</span></span><br><span class="line"><span class="comment">#服务更新ASG信息的频率</span></span><br><span class="line"><span class="string">eureka.server.a-s-g-update-interval-ms=0</span></span><br><span class="line"><span class="comment">#AWS访问ID</span></span><br><span class="line"><span class="string">eureka.server.a-w-s-access-id=</span></span><br><span class="line"><span class="comment">#AWS安全密钥</span></span><br><span class="line"><span class="string">eureka.server.a-w-s-secret-key=</span></span><br><span class="line"><span class="comment">#AWS绑定策略</span></span><br><span class="line"><span class="string">eureka.server.binding-strategy=eip</span></span><br><span class="line"><span class="comment">#用于从第三方AWS 帐户描述自动扩展分组的角色的名称。</span></span><br><span class="line"><span class="string">eureka.server.list-auto-scaling-groups-role-name=</span></span><br><span class="line"><span class="comment">#是否应该建立连接引导</span></span><br><span class="line"><span class="string">eureka.server.prime-aws-replica-connections=true</span></span><br><span class="line"><span class="comment">#服务端尝试绑定候选EIP的次数</span></span><br><span class="line"><span class="string">eureka.server.e-i-p-bind-rebind-retries=3</span></span><br><span class="line"><span class="comment">#服务端绑定EIP的时间间隔.如果绑定就检查;如果绑定失效就重新绑定。当且仅当已经绑定的情况</span></span><br><span class="line"><span class="string">eureka.server.e-i-p-binding-retry-interval-ms=10</span></span><br><span class="line"><span class="comment">#服务端绑定EIP的时间间隔.当且仅当服务为绑定的情况</span></span><br><span class="line"><span class="string">eureka.server.e-i-p-binding-retry-interval-ms-when-unbound=</span></span><br><span class="line"><span class="comment">#服务端尝试绑定route53的次数</span></span><br><span class="line"><span class="string">eureka.server.route53-bind-rebind-retries=3</span></span><br><span class="line"><span class="comment">#服务端间隔多长时间尝试绑定route53</span></span><br><span class="line"><span class="string">eureka.server.route53-binding-retry-interval-ms=30</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">eureka.server.route53-domain-t-t-l=10</span></span><br></pre></td></tr></table></figure></li><li><p>eureka.client</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#该客户端是否可用</span></span><br><span class="line"><span class="string">eureka.client.enabled=true</span></span><br><span class="line"><span class="comment">#实例是否在eureka服务器上注册自己的信息以供其他服务发现，默认为true</span></span><br><span class="line"><span class="string">eureka.client.register-with-eureka=false</span></span><br><span class="line"><span class="comment">#此客户端是否获取eureka服务器注册表上的注册信息，默认为true</span></span><br><span class="line"><span class="string">eureka.client.fetch-registry=false</span></span><br><span class="line"><span class="comment">#是否过滤掉，非UP的实例。默认为true</span></span><br><span class="line"><span class="string">eureka.client.filter-only-up-instances=true</span></span><br><span class="line"><span class="comment">#与Eureka注册服务中心的通信zone和url地址</span></span><br><span class="line"><span class="string">eureka.client.serviceUrl.defaultZone=http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#client连接Eureka服务端后的空闲等待时间，默认为30 秒</span></span><br><span class="line"><span class="string">eureka.client.eureka-connection-idle-timeout-seconds=30</span></span><br><span class="line"><span class="comment">#client连接eureka服务端的连接超时时间，默认为5秒</span></span><br><span class="line"><span class="string">eureka.client.eureka-server-connect-timeout-seconds=5</span></span><br><span class="line"><span class="comment">#client对服务端的读超时时长</span></span><br><span class="line"><span class="string">eureka.client.eureka-server-read-timeout-seconds=8</span></span><br><span class="line"><span class="comment">#client连接all eureka服务端的总连接数，默认200</span></span><br><span class="line"><span class="string">eureka.client.eureka-server-total-connections=200</span></span><br><span class="line"><span class="comment">#client连接eureka服务端的单机连接数量，默认50</span></span><br><span class="line"><span class="string">eureka.client.eureka-server-total-connections-per-host=50</span></span><br><span class="line"><span class="comment">#执行程序指数回退刷新的相关属性，是重试延迟的最大倍数值，默认为10</span></span><br><span class="line"><span class="string">eureka.client.cache-refresh-executor-exponential-back-off-bound=10</span></span><br><span class="line"><span class="comment">#执行程序缓存刷新线程池的大小，默认为5</span></span><br><span class="line"><span class="string">eureka.client.cache-refresh-executor-thread-pool-size=2</span></span><br><span class="line"><span class="comment">#心跳执行程序回退相关的属性，是重试延迟的最大倍数值，默认为10</span></span><br><span class="line"><span class="string">eureka.client.heartbeat-executor-exponential-back-off-bound=10</span></span><br><span class="line"><span class="comment">#心跳执行程序线程池的大小,默认为5</span></span><br><span class="line"><span class="string">eureka.client.heartbeat-executor-thread-pool-size=5</span></span><br><span class="line"><span class="comment"># 询问Eureka服务url信息变化的频率（s），默认为300秒</span></span><br><span class="line"><span class="string">eureka.client.eureka-service-url-poll-interval-seconds=300</span></span><br><span class="line"><span class="comment">#最初复制实例信息到eureka服务器所需的时间（s），默认为40秒</span></span><br><span class="line"><span class="string">eureka.client.initial-instance-info-replication-interval-seconds=40</span></span><br><span class="line"><span class="comment">#间隔多长时间再次复制实例信息到eureka服务器，默认为30秒</span></span><br><span class="line"><span class="string">eureka.client.instance-info-replication-interval-seconds=30</span></span><br><span class="line"><span class="comment">#从eureka服务器注册表中获取注册信息的时间间隔（s），默认为30秒</span></span><br><span class="line"><span class="string">eureka.client.registry-fetch-interval-seconds=30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取实例所在的地区。默认为us-east-1</span></span><br><span class="line"><span class="string">eureka.client.region=us-east-1</span></span><br><span class="line"><span class="comment">#实例是否使用同一zone里的eureka服务器，默认为true，理想状态下，eureka客户端与服务端是在同一zone下</span></span><br><span class="line"><span class="string">eureka.client.prefer-same-zone-eureka=true</span></span><br><span class="line"><span class="comment"># 获取实例所在的地区下可用性的区域列表，用逗号隔开。（AWS）</span></span><br><span class="line"><span class="string">eureka.client.availability-zones.china=defaultZone,defaultZone1,defaultZone2</span></span><br><span class="line"><span class="comment">#eureka服务注册表信息里的以逗号隔开的地区名单，如果不这样返回这些地区名单，则客户端启动将会出错。默认为null</span></span><br><span class="line"><span class="string">eureka.client.fetch-remote-regions-registry=</span></span><br><span class="line"><span class="comment">#服务器是否能够重定向客户端请求到备份服务器。 如果设置为false，服务器将直接处理请求，如果设置为true，它可能发送HTTP重定向到客户端。默认为false</span></span><br><span class="line"><span class="string">eureka.client.allow-redirects=false</span></span><br><span class="line"><span class="comment">#客户端数据接收</span></span><br><span class="line"><span class="string">eureka.client.client-data-accept=</span></span><br><span class="line"><span class="comment">#增量信息是否可以提供给客户端看，默认为false</span></span><br><span class="line"><span class="string">eureka.client.disable-delta=false</span></span><br><span class="line"><span class="comment">#eureka服务器序列化/反序列化的信息中获取“_”符号的的替换字符串。默认为“__“</span></span><br><span class="line"><span class="string">eureka.client.escape-char-replacement=__</span></span><br><span class="line"><span class="comment">#eureka服务器序列化/反序列化的信息中获取“$”符号的替换字符串。默认为“_-”</span></span><br><span class="line"><span class="string">eureka.client.dollar-replacement="_-"</span></span><br><span class="line"><span class="comment">#当服务端支持压缩的情况下，是否支持从服务端获取的信息进行压缩。默认为true</span></span><br><span class="line"><span class="string">eureka.client.g-zip-content=true</span></span><br><span class="line"><span class="comment">#是否记录eureka服务器和客户端之间在注册表的信息方面的差异，默认为false</span></span><br><span class="line"><span class="string">eureka.client.log-delta-diff=false</span></span><br><span class="line"><span class="comment"># 如果设置为true,客户端的状态更新将会点播更新到远程服务器上，默认为true</span></span><br><span class="line"><span class="string">eureka.client.on-demand-update-status-change=true</span></span><br><span class="line"><span class="comment">#此客户端只对一个单一的VIP注册表的信息感兴趣。默认为null</span></span><br><span class="line"><span class="string">eureka.client.registry-refresh-single-vip-address=</span></span><br><span class="line"><span class="comment">#client是否在初始化阶段强行注册到服务中心，默认为false</span></span><br><span class="line"><span class="string">eureka.client.should-enforce-registration-at-init=false</span></span><br><span class="line"><span class="comment">#client在shutdown的时候是否显示的注销服务从服务中心，默认为true</span></span><br><span class="line"><span class="string">eureka.client.should-unregister-on-shutdown=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取eureka服务的代理主机，默认为null</span></span><br><span class="line"><span class="string">eureka.client.proxy-host=</span></span><br><span class="line"><span class="comment">#获取eureka服务的代理密码，默认为null</span></span><br><span class="line"><span class="string">eureka.client.proxy-password=</span></span><br><span class="line"><span class="comment"># 获取eureka服务的代理端口, 默认为null</span></span><br><span class="line"><span class="string">eureka.client.proxy-port=</span></span><br><span class="line"><span class="comment"># 获取eureka服务的代理用户名，默认为null</span></span><br><span class="line"><span class="string">eureka.client.proxy-user-name=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#属性解释器</span></span><br><span class="line"><span class="string">eureka.client.property-resolver=</span></span><br><span class="line"><span class="comment">#获取实现了eureka客户端在第一次启动时读取注册表的信息作为回退选项的实现名称</span></span><br><span class="line"><span class="string">eureka.client.backup-registry-impl=</span></span><br><span class="line"><span class="comment">#这是一个短暂的×××的配置，如果最新的×××是稳定的，则可以去除，默认为null</span></span><br><span class="line"><span class="string">eureka.client.decoder-name=</span></span><br><span class="line"><span class="comment">#这是一个短暂的编码器的配置，如果最新的编码器是稳定的，则可以去除，默认为null</span></span><br><span class="line"><span class="string">eureka.client.encoder-name=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否使用DNS机制去获取服务列表，然后进行通信。默认为false</span></span><br><span class="line"><span class="string">eureka.client.use-dns-for-fetching-service-urls=false</span></span><br><span class="line"><span class="comment">#获取要查询的DNS名称来获得eureka服务器，此配置只有在eureka服务器ip地址列表是在DNS中才会用到。默认为null</span></span><br><span class="line"><span class="string">eureka.client.eureka-server-d-n-s-name=</span></span><br><span class="line"><span class="comment">#获取eureka服务器的端口，此配置只有在eureka服务器ip地址列表是在DNS中才会用到。默认为null</span></span><br><span class="line"><span class="string">eureka.client.eureka-server-port=</span></span><br><span class="line"><span class="comment">#表示eureka注册中心的路径，如果配置为eureka，则为http://x.x.x.x:x/eureka/，在eureka的配置文件中加入此配置表示eureka作为客户端向注册中心注册，从而构成eureka集群。此配置只有在eureka服务器ip地址列表是在DNS中才会用到，默认为null</span></span><br><span class="line"><span class="string">eureka.client.eureka-server-u-r-l-context=</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h3><ul><li>微服务: <a href="https://yq.aliyun.com/articles/2764" target="_blank" rel="noopener">https://yq.aliyun.com/articles/2764</a></li><li>康威定律: <a href="https://yq.aliyun.com/articles/8611" target="_blank" rel="noopener">https://yq.aliyun.com/articles/8611</a></li><li>eureka 文档: <a href="https://github.com/Netflix/eureka/wiki" target="_blank" rel="noopener">https://github.com/Netflix/eureka/wiki</a></li><li>eureka rest api: <a href="https://segmentfault.com/a/1190000014750346" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014750346</a></li><li>spring cloud 文档: <a href="http://cloud.spring.io/spring-cloud-static/Finchley.SR2/single/spring-cloud.html" target="_blank" rel="noopener">http://cloud.spring.io/spring-cloud-static/Finchley.SR2/single/spring-cloud.html</a></li><li>为什么不用zk做服务发现: <a href="http://dockone.io/article/78" target="_blank" rel="noopener">http://dockone.io/article/78</a></li><li>netflix 开源项目: <a href="https://github.com/Netflix" target="_blank" rel="noopener">https://github.com/Netflix</a></li></ul><h3 id="相关的demo"><a href="#相关的demo" class="headerlink" title="相关的demo:"></a>相关的demo:</h3><ul><li>demo: <a href="https://gitee.com/zonzie/spring-cloud-demo" target="_blank" rel="noopener">https://gitee.com/zonzie/spring-cloud-demo</a></li><li>spring cloud 相关的例子: <a href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples" target="_blank" rel="noopener">https://github.com/spring-cloud-samples/spring-cloud-contract-samples</a></li></ul>]]></content>
    
    <summary type="html">
    
      a basic tutorial about spring cloud, this one is about spring cloud eureka
    
    </summary>
    
      <category term="spring cloud" scheme="https://zonzie.gitee.io/categories/spring-cloud/"/>
    
    
      <category term="spring cloud" scheme="https://zonzie.gitee.io/tags/spring-cloud/"/>
    
      <category term="eureka" scheme="https://zonzie.gitee.io/tags/eureka/"/>
    
  </entry>
  
  <entry>
    <title>命令模式</title>
    <link href="https://zonzie.gitee.io/2018/11/19/command-pattern/"/>
    <id>https://zonzie.gitee.io/2018/11/19/command-pattern/</id>
    <published>2018-11-19T06:50:55.000Z</published>
    <updated>2018-11-19T08:03:04.425Z</updated>
    
    <content type="html"><![CDATA[<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><blockquote><p>Ebcapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.<br><strong>将一个请求封装成一个对象, 从而让你使用不同的请求把客户端参数化, 对请求排队或者记录请求日志, 可以提供命令的撤销和恢复功能</strong></p></blockquote><h4 id="通用的命令模式类图"><a href="#通用的命令模式类图" class="headerlink" title="通用的命令模式类图"></a>通用的命令模式类图</h4><p><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/raw_command_pattern.jpg" alt="command pattern"></p><center>通用类图</center><h4 id="命令模式中的角色"><a href="#命令模式中的角色" class="headerlink" title="命令模式中的角色"></a>命令模式中的角色</h4><h5 id="Receive接收者角色"><a href="#Receive接收者角色" class="headerlink" title="Receive接收者角色"></a>Receive接收者角色</h5><p>实际执行操作的角色</p><h5 id="Command命令角色"><a href="#Command命令角色" class="headerlink" title="Command命令角色"></a>Command命令角色</h5><p>需要执行的命令都在这里</p><h5 id="Invoker调用者角色"><a href="#Invoker调用者角色" class="headerlink" title="Invoker调用者角色"></a>Invoker调用者角色</h5><p>接受命令, 执行命令</p><h5 id="通用代码"><a href="#通用代码" class="headerlink" title="通用代码"></a>通用代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用Receiver</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 抽象接受者, 每个接收者都必须完成的任务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体的Receiver</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteReceiver1</span> <span class="keyword">extends</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 每个接收者必须处理一定的业务逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体的Receiver</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteReceiver2</span> <span class="keyword">extends</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 每个接收者必须处理一定的业务逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象的Command</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 每一个命令类都必须有一个执行命令的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体的Command类, 可以有多个</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretCommand1</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对哪个Receiver进行命令处理</span></span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数传递接收者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcretCommand1</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现命令</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 业务处理</span></span><br><span class="line">        <span class="keyword">this</span>.receiver.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者Invoker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入命令</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行命令</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 声明invoker</span></span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">        <span class="comment">// 定义接收者</span></span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> ConcreteReceiver();</span><br><span class="line">        <span class="comment">// 定义发送给接收者的命令</span></span><br><span class="line">        Command command = <span class="keyword">new</span> ConcreteCommand1(receiver);</span><br><span class="line">        <span class="comment">// 把命令交给调用者去执行</span></span><br><span class="line">        invoker.setCommand(command);</span><br><span class="line">        invoker.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="开发项目的例子"><a href="#开发项目的例子" class="headerlink" title="开发项目的例子"></a>开发项目的例子</h5><ul><li>类图<br><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/demo_command_pattern.jpg" alt="demo_command_pattern"><center>demo类图</center></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/19 12:43 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Group</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到group</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加功能</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除功能</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改功能</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给出所有的变更计划</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">plan</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/19 12:54 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGroup</span> <span class="keyword">extends</span> <span class="title">Group</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"找到代码组"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加功能"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除功能"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改功能"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">plan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代码变更计划"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/19 12:49 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequirementGroup</span> <span class="keyword">extends</span> <span class="title">Group</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找到需求组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"找到需求组"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"增加一项需求"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改需求"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改需求"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">plan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"需求变更计划"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 美工组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/19 12:52 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageGroup</span> <span class="keyword">extends</span> <span class="title">Group</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"找到美工组"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"增加一个页面"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除页面"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改页面"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">plan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"页面变更计划"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象命令类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/19 1:39 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义好, 子类可以直接使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> RequirementGroup rg = <span class="keyword">new</span> RequirementGroup();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 美工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> PageGroup pg = <span class="keyword">new</span> PageGroup();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> CodeGroup cg = <span class="keyword">new</span> CodeGroup();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行命令的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加需求的命令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/19 1:44 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddRequirementCommond</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.pg.find();</span><br><span class="line">        <span class="keyword">super</span>.pg.add();</span><br><span class="line">        <span class="keyword">super</span>.pg.plan();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除页面的命令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/19 1:47 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeletePageCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pg.find();</span><br><span class="line">        pg.delete();</span><br><span class="line">        pg.plan();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责人类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/19 1:48 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要执行的命令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行客户的命令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 场景类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/19 1:51 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义负责人</span></span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">        <span class="comment">// 增加一项需求</span></span><br><span class="line">        System.out.println(<span class="string">"增加一项需求...."</span>);</span><br><span class="line">        <span class="comment">// 命令</span></span><br><span class="line">        AddRequirementCommond addRequirementCommond = <span class="keyword">new</span> AddRequirementCommond();</span><br><span class="line">        <span class="comment">// 负责人收到命令</span></span><br><span class="line">        invoker.setCommand(addRequirementCommond);</span><br><span class="line">        <span class="comment">// 执行命令</span></span><br><span class="line">        invoker.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="命令模式的优点"><a href="#命令模式的优点" class="headerlink" title="命令模式的优点"></a>命令模式的优点</h5><ul><li>类间解耦<br>调用者和接收者之间没有任何依赖关系, 调用者实现功能只需要调用Command抽象类的execute方法, 不需要了解是哪个接收者</li><li>可扩展性<br>Command的子类可以非常容易的扩展, 调用者Invoker和高层次的模块Client不产生严重的代码耦合</li><li>结合其他模式<br>可以结合责任链模式, 实现命令族的解析任务, 结合模板方法模式, 可以减少Command子类的膨胀问题</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>命令越多, Command子类就会越来越多</p><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>是命令的地方就可以使用命令模式</p>]]></content>
    
    <summary type="html">
    
      设计模式--命令模式
    
    </summary>
    
      <category term="design pattern" scheme="https://zonzie.gitee.io/categories/design-pattern/"/>
    
    
      <category term="design pattern" scheme="https://zonzie.gitee.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>elasticSearch操作笔记</title>
    <link href="https://zonzie.gitee.io/2018/09/18/elasticSearch-operation-note/"/>
    <id>https://zonzie.gitee.io/2018/09/18/elasticSearch-operation-note/</id>
    <published>2018-09-18T13:43:10.000Z</published>
    <updated>2018-10-22T10:38:38.752Z</updated>
    
    <content type="html"><![CDATA[<h4 id="es中的一些基本概念"><a href="#es中的一些基本概念" class="headerlink" title="es中的一些基本概念"></a>es中的一些基本概念</h4><h5 id="Near-RealTime-NRT近实时"><a href="#Near-RealTime-NRT近实时" class="headerlink" title="Near RealTime(NRT近实时)"></a>Near RealTime(NRT近实时)</h5><p>elasticSearch是一个近实时的搜索平台, 从索引一个文档开始直到它可以被查询会有轻微的延迟</p><h5 id="cluster-集群"><a href="#cluster-集群" class="headerlink" title="cluster(集群)"></a>cluster(集群)</h5><p>cluster是一个或者多个节点的集合, 它们一起保存数据并且提供所有的节点联合索引以及搜索功能. 集群存在一个唯一的名字身份且默认为”elasticSearch”. 这个名字很重要, 如果节点安装时, 通过自己的名字加入到集群中的话, 那么一个节点只能是一个集群的一部分</p><h5 id="Node-节点"><a href="#Node-节点" class="headerlink" title="Node(节点)"></a>Node(节点)</h5><p>节点是一个单独的服务器, 是集群的一部分, 存储数据, 参与集群中的索引和搜索功能, 节点可以单独运行, 形成单节点集群</p><h5 id="index-索引"><a href="#index-索引" class="headerlink" title="index(索引)"></a>index(索引)</h5><p>index是具有稍微类似特征文档的集合. 比如一个消费者数据的索引, 产品目录的索引, 订单数据的索引. 索引通过名字(小写)来标识, 并且名字在对document(文档)执行indexing(索引), search(搜索), update(更新), delete(删除)操作时会涉及到. 一个单独的集群中, 可以定义想要的索引</p><h5 id="Type-类型"><a href="#Type-类型" class="headerlink" title="Type(类型)"></a>Type(类型)</h5><p>在index(索引)中, 可以定义一个或者多个类型. 一个类型是索引中的一个逻辑的种类/分区,语义完全取决于自己. 一般情况下, 一个类型被定义成一组常见的文档. 假设我们在一个单独的索引中存储了一个博客平台的所有数据, 在这个索引中, 可能定义了一个用户数据类, 博客数据类型和评论数据类型</p><h5 id="Document-文档"><a href="#Document-文档" class="headerlink" title="Document(文档)"></a>Document(文档)</h5><p>document是索引信息的基本单位. 例如存储customer数据的文档,存储product数据的文档,存储order数据的文档</p><h5 id="Shards-amp-Replicas-分片-amp-副本"><a href="#Shards-amp-Replicas-分片-amp-副本" class="headerlink" title="Shards &amp; Replicas (分片 &amp; 副本)"></a>Shards &amp; Replicas (分片 &amp; 副本)</h5><p>索引可以存储大量的数据, 可以超过单个节点的硬件限制. 为了解决这个问题, elasticSearch提供了把index(索引)拆分到多个Shard(分片)中的能力. 在创建索引时, 可以简单的定义Shard(分片)的数量. 每个Shard本身就是一个fully-functional(全功能的)和独立的”index”, Shard可以存储到集群中的任何节点</p><h6 id="Sharding-分片-非常重要的理由"><a href="#Sharding-分片-非常重要的理由" class="headerlink" title="Sharding(分片) 非常重要的理由:"></a>Sharding(分片) 非常重要的理由:</h6><ul><li>水平的拆分/扩展</li><li>分布式的并行跨Shard操作(可能在多个节点), 从而提高了性能/吞吐量<br>每个索引可以被拆分成多个分片, 一个索引可以0个或者多个副本,开启副本后, 将会有主分片和副本分片,分片和副本的数量可以在索引被创建时指定,也可以在任何时候修改副本的数量, 但是不能修改分片的数量<br>默认情况下, es中的每个索引分配了5个主分片和1个副本,如果集群中有两个节点, 则会有5个主分片和5个副本分片</li></ul><h4 id="基本的一些命令"><a href="#基本的一些命令" class="headerlink" title="基本的一些命令"></a>基本的一些命令</h4><h5 id="查看集群的健康程度"><a href="#查看集群的健康程度" class="headerlink" title="查看集群的健康程度"></a>查看集群的健康程度</h5><p><code>curl -XGET &#39;localhost:9200/_cat/health?v&amp;pretty&#39;</code></p><h5 id="获取集群节点的列表"><a href="#获取集群节点的列表" class="headerlink" title="获取集群节点的列表"></a>获取集群节点的列表</h5><p><code>curl -XGET &#39;localhost:9200/_cat/nodes?v&amp;pretty&#39;</code></p><h5 id="列出所有的索引"><a href="#列出所有的索引" class="headerlink" title="列出所有的索引"></a>列出所有的索引</h5><p><code>curl -XGET &#39;localhost:9200/_cat/indices?v&amp;pretty&#39;</code></p><h5 id="创建索引customer"><a href="#创建索引customer" class="headerlink" title="创建索引customer"></a>创建索引customer</h5><p><code>curl -XPUT &#39;localhost:9200/customer?pretty&amp;pretty&#39;</code></p><h5 id="创建一个customer文档到customer索引中-‘external’类型-ID为1"><a href="#创建一个customer文档到customer索引中-‘external’类型-ID为1" class="headerlink" title="创建一个customer文档到customer索引中, ‘external’类型, ID为1"></a>创建一个customer文档到customer索引中, ‘external’类型, ID为1</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XPUT <span class="string">'localhost:9200/customer/external/1?pretty&amp;pretty'</span> -d `</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"john doe"</span></span><br><span class="line">&#125;`</span><br></pre></td></tr></table></figure><h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><p><code>curl -XDELETE &#39;localhost:9200/customer?pretty&amp;pretty&#39;</code></p><h5 id="不指定id可以用POST请求创建一个新的文档-id会自动生成"><a href="#不指定id可以用POST请求创建一个新的文档-id会自动生成" class="headerlink" title="不指定id可以用POST请求创建一个新的文档,id会自动生成"></a>不指定id可以用POST请求创建一个新的文档,id会自动生成</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XPOST <span class="string">'localhost:9200/customer/external?pretty&amp;pretty'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "name": "John Doe"</span></span><br><span class="line"><span class="string">&#125;`</span></span><br></pre></td></tr></table></figure><h5 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h5><p>使用POST方法,修改name,添加age字段<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XPOST <span class="string">'localhost:9200/customer/external/1/_update?pretty&amp;pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    "doc": &#123;</span></span><br><span class="line"><span class="string">        "name": "Jane Doe",</span></span><br><span class="line"><span class="string">        "age": 20</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><p>使用PUT方法,修改name,添加age字段<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XPUT <span class="string">'localhost:9200/customer/external/1/_update?pretty&amp;pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "name": "james Doe"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><p>使用脚本更新年龄<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XPOST <span class="string">'localhost:9200/customer/external/1/_udpate?pretty&amp;pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "script": "ctx._source.age += 5"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><h5 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE &apos;localhost:9200/customer/external/2?pretty&amp;pretty&apos;</span><br></pre></td></tr></table></figure><h5 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h5><p>批量插入数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XPOST <span class="string">'192.168.198.88:9200/customer/external/_bulk?pretty&amp;pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;"index": &#123;"_id": "5"&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;"name": "john dow"&#125;</span></span><br><span class="line"><span class="string">&#123;"index": &#123;"_id": "6"&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;"name": "jane wick"&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure></p><p>批量更新数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XPUT <span class="string">'192.168.198.88:9200/customer/external/_bulk?pretty&amp;pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;"index": &#123;"_id": "5"&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;"name": "john dow"&#125;</span></span><br><span class="line"><span class="string">&#123;"index": &#123;"_id": "6"&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;"name": "jane wick"&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure></p><p>更新id=5的文档, 删除id=6的文档<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XPOST <span class="string">'192.168.198.88:9200/customer/external/_bulk?pretty&amp;pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;"update": &#123;"_id":"5"&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;"doc": &#123;"name": "John doe becomes Jane Doe"&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;"delete": &#123;"_id":"6"&#125;&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure></p><h4 id="数据探索部分"><a href="#数据探索部分" class="headerlink" title="数据探索部分"></a>数据探索部分</h4><p>使用REST reqeust URI发送搜索参数<br><br>查询index为customer下的所有的文档<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">'localhost:9200/customer/_search?pretty'</span></span><br></pre></td></tr></table></figure></p><p>使用REST request body发送请求, 使用POST或者GET, 一般浏览器会默认抛弃掉GET请求的请求体, 使用POST比较保险<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XPOST <span class="string">'localhost:9200/customer/_search?pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;"match_all": &#123;&#125;&#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><h5 id="返回的数据主要有以下几部分"><a href="#返回的数据主要有以下几部分" class="headerlink" title="返回的数据主要有以下几部分:"></a>返回的数据主要有以下几部分:</h5><ul><li>took: es执行搜索的耗时(ms)</li><li>time_out: 搜索是否超时</li><li>_shards: 告诉我们搜索了多少分片,统计了成功/失败的分片</li><li>hits: 搜索的结果</li><li>hits.hits: 实际的搜索结果数组(默认为前10的文档)</li><li>sort: 结果的排序key(没有则按照score排序)</li><li>score</li></ul><h5 id="DSL-Domain-Specific-Language-领域特定语言"><a href="#DSL-Domain-Specific-Language-领域特定语言" class="headerlink" title="DSL(Domain-Specific Language, 领域特定语言)"></a>DSL(Domain-Specific Language, 领域特定语言)</h5><p>elasticSearch提供了可执行查询的Json风格的DSL. 这个查询语言非常全面,我们从基础开始<br><br>查询customer中的一条数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XGET <span class="string">'192.168.198.88:9200/customer/_search?pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "match_all": &#123;&#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><p>添加查询的分页,from:指定文档开始的编号,size:返回的条数,sort:指定排序的字段和规则<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XGET <span class="string">'localhost:9200/customer/_search?pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;"match_all": &#123;&#125;&#125;,</span></span><br><span class="line"><span class="string">    "from": 10,</span></span><br><span class="line"><span class="string">    "size": 10,</span></span><br><span class="line"><span class="string">    "sort": &#123;</span></span><br><span class="line"><span class="string">        "age": &#123;</span></span><br><span class="line"><span class="string">            "order": "desc"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><p>返回指定字段name和age<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XGET <span class="string">'localhost:9200/customer/_search?pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "match_all": &#123;&#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    "_source": ["name", "age"]</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><p>返回年龄为20的customer<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XGET <span class="string">'localhost:9200/customer/_search?pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "match": &#123;</span></span><br><span class="line"><span class="string">            "age": 20</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><p>返回所有name中包含john的customer, 不是精确匹配<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XGET <span class="string">'localhost:9200/customer/_search?pretty'</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "match": &#123;</span></span><br><span class="line"><span class="string">            "name": "john"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><p>精确匹配一个单词或者短语<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XGET <span class="string">'localhost:9200/customer/_search?pretty'</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;"match_phrase": &#123;</span></span><br><span class="line"><span class="string">        "name": "john"</span></span><br><span class="line"><span class="string">    &#125;&#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><h6 id="bool查询"><a href="#bool查询" class="headerlink" title="bool查询"></a>bool查询</h6><p>使用boolean逻辑构建较小的查询到更大的查询中去<br><br>返回name中同时包含john和jane的文档<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Contetn-Type:application/json"</span> -XGET <span class="string">'localhost:9200/customer/_search?pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "bool": &#123;</span></span><br><span class="line"><span class="string">            "must": [</span></span><br><span class="line"><span class="string">                &#123;"match": &#123;"name": "john"&#125;&#125;,</span></span><br><span class="line"><span class="string">                &#123;"match": &#123;"name": "jane"&#125;&#125;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><p>上面的例子中, bool must 语句指定了所有的查询必须为true时匹配到的文档<br><br>如果两个名字是或的关系,例子如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Contetn-Type:application/json"</span> -XGET <span class="string">'localhost:9200/customer/_search?pretty'</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "bool": &#123;</span></span><br><span class="line"><span class="string">            "should": [</span></span><br><span class="line"><span class="string">                &#123;"match": &#123;"name": "john"&#125;&#125;,</span></span><br><span class="line"><span class="string">                &#123;"match": &#123;"name": "jane"&#125;&#125;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><p>bool should中只要有一个为true就会匹配到<br><br>如果两者都不想匹配到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XGET <span class="string">'localhost:9200/customer/_search?pretty'</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "bool": &#123;</span></span><br><span class="line"><span class="string">            "must_not": [</span></span><br><span class="line"><span class="string">                &#123;"match": &#123;"name": "john"&#125;&#125;,</span></span><br><span class="line"><span class="string">                &#123;"match": &#123;"name": "jane"&#125;&#125;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><p>以上如果条件都不为true才会匹配到文档<br><br>我们可以在bool查询中同时联合使用must, should, must_not<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -XGET <span class="string">'localhost:9200/customer/_search?pretty'</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "bool": &#123;</span></span><br><span class="line"><span class="string">            "must": [</span></span><br><span class="line"><span class="string">                &#123;"match": &#123;"age": 40&#125;&#125;</span></span><br><span class="line"><span class="string">            ],</span></span><br><span class="line"><span class="string">            "must_not": [</span></span><br><span class="line"><span class="string">                &#123;"match": &#123;"name": "jane"&#125;&#125;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><h6 id="过滤查询"><a href="#过滤查询" class="headerlink" title="过滤查询"></a>过滤查询</h6>]]></content>
    
    <summary type="html">
    
      es操作笔记
    
    </summary>
    
      <category term="elasticSearch" scheme="https://zonzie.gitee.io/categories/elasticSearch/"/>
    
    
      <category term="elasticSearch" scheme="https://zonzie.gitee.io/tags/elasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>缓存系统的问题</title>
    <link href="https://zonzie.gitee.io/2018/09/17/cache-problem/"/>
    <id>https://zonzie.gitee.io/2018/09/17/cache-problem/</id>
    <published>2018-09-17T11:27:33.000Z</published>
    <updated>2018-10-22T10:38:38.749Z</updated>
    
    <content type="html"><![CDATA[<h5 id="高并发系统中缓存可能会遇到的问题"><a href="#高并发系统中缓存可能会遇到的问题" class="headerlink" title="高并发系统中缓存可能会遇到的问题"></a>高并发系统中缓存可能会遇到的问题</h5><ol><li><a href="#缓存穿透">缓存穿透</a></li><li><a href="#缓存雪崩">缓存雪崩</a></li><li><a href="#缓存击穿">缓存击穿</a></li></ol><h5 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h5><ul><li>查询一个一定不存在的key, 由于缓存是没有命中时被动写入的, 一般查不到这个key就不写入缓存, 这将导致不存在的key每次请求都会到达持久层去查询, 在流量大时, 对系统性能会有影响, 可能导致数据库崩溃</li><li>解决方案:<ol><li>使用布隆过滤器,计算所有的可能的key的多种hash值,存入位数组中,一个一定不存在的key会直接被拦截掉, 从而避免了请求到达持久层, 占用数据库资源</li><li>将value为空的key也存入缓存,可以设置较短的过期时间</li></ol></li></ul><h5 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h5><ul><li>指的是缓存中的数据在同一个时间一起失效, 导致大量的请求直接到达数据库层面, 导致数据库直接崩溃</li><li>解决方案:<ol><li>在缓存失效时, 对访问数据库的操作加锁,只允许单个线程访问数据库中的同一条数据</li><li>在设置缓存失效时间时, 加一个随机数, 错开所有的缓存的失效时间, 避免集体失效事件</li></ol></li></ul><h5 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h5><ul><li>某些热点数据在某些时间被超高并发的访问, 此时缓存失效, 同样会导致大量的请求涌向数据库, 在重建缓存未完成时, db瞬间被大量的请求压垮</li><li>解决方案:<ol><li>同一条数据在同一时间只允许单个线程访问数据库</li><li>在即将过期之前更新缓存</li><li>设置服务降级</li></ol></li></ul><p><strong>以lettuce为例解决redis缓存击穿问题:</strong><br>lettuce的jar包:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupid</span>&gt;</span>biz.paluch.redis<span class="tag">&lt;/<span class="name">groupid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>lettuce<span class="tag">&lt;/<span class="name">artifactid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.beta1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>代码实现</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lambdaworks.redis.*;</span><br><span class="line"><span class="keyword">import</span> com.lambdaworks.redis.api.statefulredisconnection;</span><br><span class="line"><span class="keyword">import</span> com.lambdaworks.redis.api.async.redisasynccommands;</span><br><span class="line"><span class="keyword">import</span> com.lambdaworks.redis.api.sync.rediscommands;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.arrayblockingqueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.executionexception;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.threadpoolexecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.timeunit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/10 17:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lettuceclient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// lettuce connection对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> statefulredisconnection&lt;string, string&gt; connection;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> threadpoolexecutor poolexecutor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁的key</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> string mutex_key = <span class="string">"mutex_key"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化connection</span></span><br><span class="line">        redisclient client = redisclient.create(redisuri.create(<span class="string">"redis://192.168.198.128:6379"</span>));</span><br><span class="line">        connection = client.connect();</span><br><span class="line">        <span class="comment">// 初始化线程池</span></span><br><span class="line">        poolexecutor = <span class="keyword">new</span> threadpoolexecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">200</span>, timeunit.seconds, <span class="keyword">new</span> arrayblockingqueue&lt;runnable&gt;(<span class="number">5</span>), <span class="keyword">new</span> threadpoolexecutor.discardoldestpolicy());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决缓存击穿问题, 方法一</span></span><br><span class="line"><span class="comment">     * 为了解决缓存击穿的问题, 业界常用的做法--设置mutex key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 互斥锁的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> string <span class="title">mutexget</span><span class="params">(string key)</span> <span class="keyword">throws</span> interruptedexception </span>&#123;</span><br><span class="line">        rediscommands&lt;string, string&gt; sync = connection.sync();</span><br><span class="line">        string value = sync.get(key);</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            string set = sync.set(mutex_key, <span class="string">"1"</span>, setargs.builder.nx().px(<span class="number">3</span> * <span class="number">60</span>));</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"ok"</span>.equalsignorecase(set)) &#123;</span><br><span class="line">                <span class="comment">// 从数据库获取value</span></span><br><span class="line">                value = <span class="string">"getvaluebykey"</span>;</span><br><span class="line">                sync.set(key, value, setargs.builder.px(<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">2</span>));</span><br><span class="line">                sync.del(mutex_key);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                thread.sleep(<span class="number">50</span>);</span><br><span class="line">                <span class="comment">// 递归重试</span></span><br><span class="line">                mutexget(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决缓存击穿的问题,方法二</span></span><br><span class="line"><span class="comment">     * 提前更新key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> string <span class="title">get</span><span class="params">(<span class="keyword">final</span> string key)</span> <span class="keyword">throws</span> interruptedexception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> rediscommands&lt;string, string&gt; sync = connection.sync();</span><br><span class="line">        string value = sync.get(key);</span><br><span class="line">        <span class="keyword">long</span> ttl = sync.ttl(key);</span><br><span class="line">        <span class="comment">// 如果key已经过期,立即从数据库获取新的value</span></span><br><span class="line">        <span class="keyword">if</span>(value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            string set = sync.set(mutex_key, <span class="string">"1"</span>, setargs.builder.nx().px(<span class="number">3</span> * <span class="number">60</span>));</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"ok"</span>.equalsignorecase(set)) &#123;</span><br><span class="line">                <span class="comment">// 从数据库获取value</span></span><br><span class="line">                string var = <span class="string">"getvaluebykeyfromdb"</span>;</span><br><span class="line">                sync.set(key, var, setargs.builder.px(<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">2</span>));</span><br><span class="line">                sync.del(mutex_key);</span><br><span class="line">                <span class="comment">// 返回新的值</span></span><br><span class="line">                <span class="keyword">return</span> var;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                thread.sleep(<span class="number">50</span>);</span><br><span class="line">                <span class="comment">// 递归重试</span></span><br><span class="line">                get(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果10秒后key过期</span></span><br><span class="line">        <span class="keyword">if</span>(ttl &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">// 异步执行缓存更新操作</span></span><br><span class="line">            poolexecutor.execute(<span class="keyword">new</span> runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 设置互斥锁</span></span><br><span class="line">                    string set = sync.set(mutex_key, <span class="string">"1"</span>, setargs.builder.nx().px(<span class="number">3</span> * <span class="number">60</span>));</span><br><span class="line">                    <span class="keyword">if</span>(<span class="string">"ok"</span>.equalsignorecase(set)) &#123;</span><br><span class="line">                        <span class="comment">// 从数据库获取value</span></span><br><span class="line">                        string var = <span class="string">"getvaluebykeyfromdb"</span>;</span><br><span class="line">                        <span class="comment">// 设置新的value</span></span><br><span class="line">                        sync.setex(key, <span class="number">2</span>*<span class="number">60</span>*<span class="number">60</span>, var);</span><br><span class="line">                        <span class="comment">// 删除互斥锁</span></span><br><span class="line">                        sync.del(mutex_key);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 返回旧的值</span></span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><blockquote><p>参考内容: <a href="http://carlosfu.iteye.com/blog/2269687?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">缓存中的热点key的问题</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      系统中的缓存可能会遇到的问题--缓存穿透, 缓存雪崩, 缓存击穿
    
    </summary>
    
      <category term="redis" scheme="https://zonzie.gitee.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://zonzie.gitee.io/tags/redis/"/>
    
      <category term="cache" scheme="https://zonzie.gitee.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>中介者模式</title>
    <link href="https://zonzie.gitee.io/2018/09/11/mediator-pattern/"/>
    <id>https://zonzie.gitee.io/2018/09/11/mediator-pattern/</id>
    <published>2018-09-11T10:14:01.000Z</published>
    <updated>2018-10-22T10:38:38.755Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>Define an object that encapsulates how a set of objects interact. Mediator Promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interation independently.<br><strong>用一个中介对象封装一系列的对象交互,中介者使各个对象不需要显式的相互作用, 从而使其耦合松散, 而且可以独立的改变他们的交互</strong></p></blockquote><h3 id="一个不使用中介者模式的进销存的例子"><a href="#一个不使用中介者模式的进销存的例子" class="headerlink" title="一个不使用中介者模式的进销存的例子"></a>一个不使用中介者模式的进销存的例子</h3><p>这个例子中, 我们简单创建几个部分: 采购管理, 销售管理, 库存管理部分,实现货物的基本的采购,销售,库存管理的功能<br>采购管理部分:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 采购管理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/10 18:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Purchase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 采购IBM电脑 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyIBMComputer</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 访问库存</span></span><br><span class="line">        Stock stock = <span class="keyword">new</span> Stock();</span><br><span class="line">        <span class="comment">// 访问销售</span></span><br><span class="line">        Sale sale = <span class="keyword">new</span> Sale();</span><br><span class="line">        <span class="comment">// 电脑的销售情况</span></span><br><span class="line">        <span class="keyword">int</span> saleStatus = sale.getSaleStatus();</span><br><span class="line">        <span class="keyword">if</span>(saleStatus &gt; <span class="number">80</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"采购电脑: "</span> + number + <span class="string">"台"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 销售情况不好</span></span><br><span class="line">            <span class="keyword">int</span> buyNumber = number / <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">"采购IBM电脑: "</span> + buyNumber + <span class="string">"台"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 不再采购 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refuseBuyIBM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不再采购IBM电脑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>销售管理:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 销售管理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/10 19:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sale</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 销售IBM电脑 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sellIBMComputer</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 访问库存</span></span><br><span class="line">        Stock stock = <span class="keyword">new</span> Stock();</span><br><span class="line">        <span class="comment">// 访问采购</span></span><br><span class="line">        Purchase purchase = <span class="keyword">new</span> Purchase();</span><br><span class="line">        <span class="keyword">if</span>(stock.getStockNumber() &lt; number) &#123;</span><br><span class="line">            purchase.buyIBMComputer(number);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"销售IBM电脑"</span> + number + <span class="string">"台"</span>);</span><br><span class="line">        stock.decrease(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 反馈销售情况 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSaleStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">int</span> saleStatus = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">"IBM电脑的销售情况是: "</span> + saleStatus);</span><br><span class="line">        <span class="keyword">return</span> saleStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 折价处理 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offSale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Stock stock = <span class="keyword">new</span> Stock();</span><br><span class="line">        System.out.println(<span class="string">"电脑折价销售: "</span> + stock.getStockNumber() + <span class="string">"台"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>库存管理:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 库存管理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/10 19:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 100台电脑 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> COMPUTER_NUMBER = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 库存增加 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        COMPUTER_NUMBER += number;</span><br><span class="line">        System.out.println(<span class="string">"库存数量为: "</span> + COMPUTER_NUMBER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 库存减少 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        COMPUTER_NUMBER -= number;</span><br><span class="line">        System.out.println(<span class="string">"库存数量为: "</span> + COMPUTER_NUMBER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 获得库存数量 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStockNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> COMPUTER_NUMBER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 存货压力增大, 清库存 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearStock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Purchase purchase = <span class="keyword">new</span> Purchase();</span><br><span class="line">        Sale sale = <span class="keyword">new</span> Sale();</span><br><span class="line">        System.out.println(<span class="string">"清理库存数量: "</span> + COMPUTER_NUMBER);</span><br><span class="line">        <span class="comment">// 要求折价销售</span></span><br><span class="line">        sale.offSale();</span><br><span class="line">        <span class="comment">// 要求采购人员不要采购</span></span><br><span class="line">        purchase.refuseBuyIBM();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>场景类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 场景类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/10 19:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 采购人员采购电脑</span></span><br><span class="line">        System.out.println(<span class="string">"采购人员采购电脑"</span>);</span><br><span class="line">        Purchase purchase = <span class="keyword">new</span> Purchase();</span><br><span class="line">        purchase.buyIBMComputer(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">// 销售电脑</span></span><br><span class="line">        System.out.println(<span class="string">"销售电脑"</span>);</span><br><span class="line">        Sale sale = <span class="keyword">new</span> Sale();</span><br><span class="line">        sale.sellIBMComputer(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 库存扣减</span></span><br><span class="line">        System.out.println(<span class="string">"清理库存"</span>);</span><br><span class="line">        Stock stock = <span class="keyword">new</span> Stock();</span><br><span class="line">        stock.clearStock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这个例子中, 三个对象之间互相调用, 每个部分要实现功能都必须依赖其他的部分完成,如果再加入物流,资产等管理模块, 代码整体会更加的复杂, 维护成本将越来越大<br>这里, 引入中介者的概念, 不同模块之间, 只处理自己的逻辑, 其余部分交给中介者去管理<br>各个部分之间的复杂关系:<br><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/%E5%A4%8D%E6%9D%82%E5%85%B3%E7%B3%BB.png" alt="复杂关系"></p><h3 id="中介者模式-也叫调停者模式-中的组成部分"><a href="#中介者模式-也叫调停者模式-中的组成部分" class="headerlink" title="中介者模式(也叫调停者模式)中的组成部分"></a>中介者模式(也叫调停者模式)中的组成部分</h3><ol><li>Mediator 抽象中介者角色, 定义统一的接口, 用于各同事角色之间的通信</li><li>Concrete Mediator 具体中介者角色, 协调各同事角色实现协作行为, 必须依赖各个同事角色</li><li>Colleague 同事角色, 每个同事角色,都知道中介者的角色, 而且, 在需要与其他同事角色交互时, 必须通过中介者与其他角色交互,同事类的行为分为两种:<ol><li>自发行为: 同事自身的行为, 比如, 改变对象自身的状态, 处理自身的行为</li><li>依赖方法: 依赖中介者才能完成的行为</li></ol></li></ol><h3 id="使用中介者模式的进销存的例子"><a href="#使用中介者模式的进销存的例子" class="headerlink" title="使用中介者模式的进销存的例子"></a>使用中介者模式的进销存的例子</h3><p>抽象的中介者:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象的中介者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/10 19:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMediator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Purchase purchase;</span><br><span class="line">    <span class="keyword">protected</span> Sale sale;</span><br><span class="line">    <span class="keyword">protected</span> Stock stock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用构造函数注入同事类, 这里如果不是必须的同事类, 可以使用setter/getter注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractMediator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.purchase = <span class="keyword">new</span> Purchase(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.sale = <span class="keyword">new</span> Sale(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.stock = <span class="keyword">new</span> Stock(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中介者最重要的方法, 处理多个对象之间的关系</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String str, Object... objects)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在抽象类Mediator中只定义了同事类的注入, 为什么使用同事类注入, 而不使用同事类的实现类注入呢? 那是因为同事类虽然有抽象, 但是没有每个同事类必须要完成的业务方法, 当然, 如果每个同事类都有相同的方法, 比如execute, handler, 当然要注入抽象类, 做到依赖倒置</p><p>具体的中介者,一般只有一个:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中介者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/10 20:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> <span class="keyword">extends</span> <span class="title">AbstractMediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String str, Object... objects)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 采购电脑</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"purchase.buy"</span>.equals(str)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.buyComputer((Integer) objects[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">// 销售电脑</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"sale.sell"</span>.equals(str)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.sellComputer((Integer) objects[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">// 折价销售</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"sale.offset"</span>.equals(str)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.offSail();</span><br><span class="line">            <span class="comment">// 出清</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"stock.clear"</span>.equals(str)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.clearStock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 采购电脑 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buyComputer</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> saleStatus = <span class="keyword">super</span>.sale.getSaleStatus();</span><br><span class="line">        <span class="keyword">if</span>(saleStatus &gt; <span class="number">80</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"采购IBM电脑"</span> + number + <span class="string">"台"</span>);</span><br><span class="line">            <span class="keyword">super</span>.stock.increase(number);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> buyNumber = number / <span class="number">2</span>; <span class="comment">// 折半采购</span></span><br><span class="line">            System.out.println(<span class="string">"采购IBM电脑"</span> + buyNumber + <span class="string">"台"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 销售电脑 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sellComputer</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">super</span>.stock.getStockNumber() &lt; number) &#123; <span class="comment">// 库存数量不够销售</span></span><br><span class="line">            <span class="keyword">super</span>.purchase.buyIBMComputer(number);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.stock.decrease(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 折价销售电脑 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offSail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"折价销售IBM电脑"</span> + stock.getStockNumber() + <span class="string">"台"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 清仓处理 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearStock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 要求清仓销售</span></span><br><span class="line">        <span class="keyword">super</span>.sale.offSale();</span><br><span class="line">        <span class="comment">// 要求采购人员不要采购</span></span><br><span class="line">        <span class="keyword">super</span>.purchase.refuseBuyIBM();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>抽象的同事类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象的同事类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/10 19:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractColleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> AbstractMediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractColleague</span><span class="params">(AbstractMediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>采购管理:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改后的采购管理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/10 19:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Purchase</span> <span class="keyword">extends</span> <span class="title">AbstractColleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Purchase</span><span class="params">(AbstractMediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 采购电脑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyIBMComputer</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.mediator.execute(<span class="string">"purchase.buy"</span>, number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不再采购电脑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refuseBuyIBM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不再采购电脑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>销售管理:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 销售管理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/10 20:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sale</span> <span class="keyword">extends</span> <span class="title">AbstractColleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sale</span><span class="params">(AbstractMediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 销售电脑 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sellIBMComputer</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator.execute(<span class="string">"sale.sell"</span>, number);</span><br><span class="line">        System.out.println(<span class="string">"销售电脑"</span> + number + <span class="string">"台"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 销售情况 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSaleStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">int</span> saleStatus = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">this</span>.sellIBMComputer(saleStatus);</span><br><span class="line">        System.out.println(<span class="string">"电脑的销售情况: "</span> + saleStatus);</span><br><span class="line">        <span class="keyword">return</span> saleStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 出清 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offSale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator.execute(<span class="string">"sale.offsale"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>库存管理:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 库存管理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/10 20:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stock</span> <span class="keyword">extends</span> <span class="title">AbstractColleague</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stock</span><span class="params">(AbstractMediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 100台电脑</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> COMPUTER_NUMBER = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 库存增加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        COMPUTER_NUMBER += number;</span><br><span class="line">        System.out.println(<span class="string">"库存数量为"</span> + COMPUTER_NUMBER + <span class="string">"台"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 库存降低</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        COMPUTER_NUMBER -= number;</span><br><span class="line">        System.out.println(<span class="string">"库存数量为"</span> + COMPUTER_NUMBER + <span class="string">"台"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得库存数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStockNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> COMPUTER_NUMBER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存货压力大, 通知采购人员不要采购, 销售人员尽快销售</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearStock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"清理存货数量为: "</span> + COMPUTER_NUMBER);</span><br><span class="line">        <span class="keyword">super</span>.mediator.execute(<span class="string">"stock.clear"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同事类必须有中介者, 所以用构造函数注入, 而中介者可以只有部分同事类, 因此,可以使用setter/getter注入<br>使用中介者模式后, 形成的星型结构:<br><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/%E6%98%9F%E5%9E%8B%E7%BB%93%E6%9E%84.png" alt="星型结构"></p><h3 id="中介者模式的优点"><a href="#中介者模式的优点" class="headerlink" title="中介者模式的优点"></a>中介者模式的优点</h3><p>减少类间的依赖,把原有的一对多的依赖变成了一对一的依赖, 同事类只依赖中介者, 减少了依赖,当然同时也降低了类间的耦合</p><h3 id="中介者模式的缺点"><a href="#中介者模式的缺点" class="headerlink" title="中介者模式的缺点"></a>中介者模式的缺点</h3><p>中介者会膨胀的很大, 而且逻辑复杂, 原本多个对象的逻辑会全部放在中介者中,同事类越多, 中介者的逻辑就越复杂</p><h3 id="中介者模式的使用场景"><a href="#中介者模式的使用场景" class="headerlink" title="中介者模式的使用场景"></a>中介者模式的使用场景</h3><p>中介者模式容易被误用, 一个对象与多个对象存在依赖关系是必然的情况, 但是并不代表就要使用中介者模式, 中介者模式适用于多个对象之间紧密耦合的情况, 紧密耦合的标准是,在类图中出现了蜘蛛网状结构,这种情况下一定要考虑使用中介者模式,这有利于把蜘蛛网状的结构梳理为星型结构,使原本复杂混乱的关系变得清晰简单</p><h4 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h4><ul><li>机场调度中心</li><li>MVC框架<ul><li>其中的C(Controller) 就是一个中介者,叫做前端控制器, 作用就是把M(Model)和V(view)隔离开, 并且把M运行的结果和V代表的视图糅合成前端可以展示的页面,减少M和V的依赖关系</li></ul></li><li>媒体网关</li><li>中介服务</li></ul><hr><blockquote><p>内容来自: &laquo;设计模式之禅&raquo;</p></blockquote>]]></content>
    
    <summary type="html">
    
      设计模式-中介者模式
    
    </summary>
    
      <category term="design pattern" scheme="https://zonzie.gitee.io/categories/design-pattern/"/>
    
    
      <category term="design pattern" scheme="https://zonzie.gitee.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="https://zonzie.gitee.io/2018/09/08/prototype-pattern/"/>
    <id>https://zonzie.gitee.io/2018/09/08/prototype-pattern/</id>
    <published>2018-09-08T02:04:18.000Z</published>
    <updated>2018-10-22T10:38:38.755Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>Specify the kinds of objects to create using a prototypical instance, and craete new objects by copying this prototype<br><strong>用原型模式制定创建对象的种类, 并且通过拷贝这些原型创建新的对象</strong></p></blockquote><p>原型模式的核心是clone方法, 通过该方法进行对象的拷贝, java提供了一个Cloneable接口来标示这个对象是可以拷贝的, Cloneable只是一个标识, Cloneable自身没有任何方法, 同样的接口还有Serializable, 这样的接口只是起到一个标记作用, 然后, 只需要重写Object的clone方法就可以了</p><h3 id="原型模式的应用"><a href="#原型模式的应用" class="headerlink" title="原型模式的应用"></a>原型模式的应用</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><h5 id="1-性能优良"><a href="#1-性能优良" class="headerlink" title="1. 性能优良"></a>1. 性能优良</h5><p>原型模式是在内存中二进制流的拷贝, 要比直接new一个对象性能好很多,特别是要在循环体内产生大量的对象时, 原型模式可以更好的体现其优点</p><h5 id="2-逃避构造函数的约束"><a href="#2-逃避构造函数的约束" class="headerlink" title="2. 逃避构造函数的约束"></a>2. 逃避构造函数的约束</h5><p>是优点也是缺点, 直接在内存中拷贝, 构造函数是不会执行的</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><h5 id="1-资源优化场景"><a href="#1-资源优化场景" class="headerlink" title="1. 资源优化场景"></a>1. 资源优化场景</h5><p>类的初始化需要消耗太多的资源</p><h5 id="2-性能和安全要求的场景"><a href="#2-性能和安全要求的场景" class="headerlink" title="2. 性能和安全要求的场景"></a>2. 性能和安全要求的场景</h5><p>new一个对象需要非常繁琐的数据准备, 使用原型模式避免new对象</p><h5 id="3-一个对象多个修改者的场景"><a href="#3-一个对象多个修改者的场景" class="headerlink" title="3. 一个对象多个修改者的场景"></a>3. 一个对象多个修改者的场景</h5><p>一个对象需要提供给多个调用者,并且都需要修改其值的时候,可以使用原型模式</p><p><strong>在真实的项目中, 原型模式很少单独出现, 一般是和工厂方法模式一起出现, 通过clone创建一个对象, 然后由工厂方法提供给调用者.</strong></p><h3 id="原型模式的例子"><a href="#原型模式的例子" class="headerlink" title="原型模式的例子"></a>原型模式的例子</h3><p>批量发送广告邮件的例子: <br></p><p>广告信模板<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 广告信模板</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/8 10:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdvTemplate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String advSubject = <span class="string">"信用卡抽奖活动"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String advContent = <span class="string">"抽奖通知: 刷卡就送一百万!!!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAdvSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> advSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdvSubject</span><span class="params">(String advSubject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.advSubject = advSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAdvContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> advContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdvContent</span><span class="params">(String advContent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.advContent = advContent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>邮件类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 邮件类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/8 10:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mail</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 收件人</span></span><br><span class="line">    <span class="keyword">private</span> String receiver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 邮件名称</span></span><br><span class="line">    <span class="keyword">private</span> String subject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 称谓</span></span><br><span class="line">    <span class="keyword">private</span> String application;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内容</span></span><br><span class="line">    <span class="keyword">private</span> String context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 邮件的尾部</span></span><br><span class="line">    <span class="keyword">private</span> String tail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mail</span><span class="params">(AdvTemplate advTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = advTemplate.getAdvContent();</span><br><span class="line">        <span class="keyword">this</span>.subject = advTemplate.getAdvSubject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复写的clone方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Mail <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Mail) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getReceiver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReceiver</span><span class="params">(String receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubject</span><span class="params">(String subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getApplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplication</span><span class="params">(String application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.application = application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(String context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTail</span><span class="params">(String tail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tail = tail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"Mail&#123;"</span>);</span><br><span class="line">        sb.append(<span class="string">"receiver='"</span>).append(receiver).append(<span class="string">'\''</span>);</span><br><span class="line">        sb.append(<span class="string">", subject='"</span>).append(subject).append(<span class="string">'\''</span>);</span><br><span class="line">        sb.append(<span class="string">", application='"</span>).append(application).append(<span class="string">'\''</span>);</span><br><span class="line">        sb.append(<span class="string">", context='"</span>).append(context).append(<span class="string">'\''</span>);</span><br><span class="line">        sb.append(<span class="string">", tail='"</span>).append(tail).append(<span class="string">'\''</span>);</span><br><span class="line">        sb.append(<span class="string">'&#125;'</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>场景测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 场景测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/8 10:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxCount = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTest</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="comment">// 发送邮件</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 定义发送模板</span></span><br><span class="line">        Mail mail = <span class="keyword">new</span> Mail(<span class="keyword">new</span> AdvTemplate());</span><br><span class="line">        mail.setTail(<span class="string">"xx公司版权所有"</span>);</span><br><span class="line">        <span class="keyword">while</span>(i++ &lt; maxCount) &#123;</span><br><span class="line">            <span class="comment">// 邮件不同的地方</span></span><br><span class="line">            Mail clone = mail.clone();</span><br><span class="line">            clone.setApplication(randomString(<span class="number">5</span>) + <span class="string">" Mr/Mrs"</span>);</span><br><span class="line">            clone.setReceiver(randomString(<span class="number">5</span>) + <span class="string">"@"</span> + randomString(<span class="number">8</span>) + <span class="string">".com"</span>);</span><br><span class="line">            sendMail(clone);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送邮件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(Mail mail)</span> </span>&#123;</span><br><span class="line">        System.out.println(mail);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">randomString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> randNum = random.nextInt(<span class="number">26</span>) + <span class="number">97</span>;</span><br><span class="line">            stringBuilder.append((<span class="keyword">char</span>) randNum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="考虑深拷贝和浅拷贝的区别"><a href="#考虑深拷贝和浅拷贝的区别" class="headerlink" title="考虑深拷贝和浅拷贝的区别"></a>考虑深拷贝和浅拷贝的区别</h4><ul><li>Object对象提供的clone方法只是拷贝本对象, 对象内部的数组, 引用都不拷贝, 还是还是指向原生对象的内部元素地址,这种拷贝就叫做浅拷贝</li><li>使用原型模式, 引用类型的成员变量只有满足两个条件才不能拷贝: <ol><li>类的成员变量,而不是方法内部的变量 </li><li>必须是一个可变的引用对象, 而不是一个原始类型或者不可变对象</li></ol></li></ul><h5 id="浅拷贝的例子"><a href="#浅拷贝的例子" class="headerlink" title="浅拷贝的例子"></a>浅拷贝的例子</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 浅拷贝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/8 12:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShallowCopy</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用类型的变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ShallowCopy <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ShallowCopy) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.add(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"ShallowCopy&#123;"</span>);</span><br><span class="line">        sb.append(<span class="string">"list="</span>).append(list);</span><br><span class="line">        sb.append(<span class="string">'&#125;'</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法</span></span><br><span class="line"><span class="comment">     * 运行结果: ShallowCopy&#123;list=[jack, tom]&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shallowTest</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        ShallowCopy shallowCopy = <span class="keyword">new</span> ShallowCopy();</span><br><span class="line">        shallowCopy.setValue(<span class="string">"jack"</span>);</span><br><span class="line">        <span class="comment">// 拷贝对象</span></span><br><span class="line">        ShallowCopy clone = shallowCopy.clone();</span><br><span class="line">        clone.setValue(<span class="string">"tom"</span>);</span><br><span class="line">        <span class="comment">// 打印原始对象</span></span><br><span class="line">        System.out.println(shallowCopy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="深拷贝的例子"><a href="#深拷贝的例子" class="headerlink" title="深拷贝的例子"></a>深拷贝的例子</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深拷贝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/8 12:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepCopy</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用类型的成员变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DeepCopy <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        DeepCopy clone = (DeepCopy) <span class="keyword">super</span>.clone();</span><br><span class="line">        clone.list =  (ArrayList&lt;String&gt;) <span class="keyword">this</span>.list.clone();</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.add(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"DeepCopy&#123;"</span>);</span><br><span class="line">        sb.append(<span class="string">"list="</span>).append(list);</span><br><span class="line">        sb.append(<span class="string">'&#125;'</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法</span></span><br><span class="line"><span class="comment">     * 运行结果: DeepCopy&#123;list=[jack]&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shallowTest</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        DeepCopy deepCopy = <span class="keyword">new</span> DeepCopy();</span><br><span class="line">        deepCopy.setValue(<span class="string">"jack"</span>);</span><br><span class="line">        <span class="comment">// 拷贝对象</span></span><br><span class="line">        DeepCopy clone = deepCopy.clone();</span><br><span class="line">        clone.setValue(<span class="string">"tom"</span>);</span><br><span class="line">        <span class="comment">// 打印原始对象</span></span><br><span class="line">        System.out.println(deepCopy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象的clone和final是有冲突的-如果变量被final修饰-是不可以被克隆的-想要克隆对象-需要去掉final关键字"><a href="#对象的clone和final是有冲突的-如果变量被final修饰-是不可以被克隆的-想要克隆对象-需要去掉final关键字" class="headerlink" title="对象的clone和final是有冲突的, 如果变量被final修饰, 是不可以被克隆的, 想要克隆对象, 需要去掉final关键字"></a>对象的clone和final是有冲突的, 如果变量被final修饰, 是不可以被克隆的, 想要克隆对象, 需要去掉final关键字</h4><h4 id="总之-就是先产生出一个包含大量的共有信息的类-然后可以拷贝出副本-再修正副本的细节"><a href="#总之-就是先产生出一个包含大量的共有信息的类-然后可以拷贝出副本-再修正副本的细节" class="headerlink" title="总之,就是先产生出一个包含大量的共有信息的类, 然后可以拷贝出副本, 再修正副本的细节"></a>总之,就是先产生出一个包含大量的共有信息的类, 然后可以拷贝出副本, 再修正副本的细节</h4><hr><blockquote><p><strong>内容来自: &laquo;设计模式之禅&raquo; — 秦小波</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      设计模式--原型模式
    
    </summary>
    
      <category term="design pattern" scheme="https://zonzie.gitee.io/categories/design-pattern/"/>
    
    
      <category term="design pattern" scheme="https://zonzie.gitee.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>一致性哈希:原理和Java实现</title>
    <link href="https://zonzie.gitee.io/2018/09/06/consistent-hash/"/>
    <id>https://zonzie.gitee.io/2018/09/06/consistent-hash/</id>
    <published>2018-09-06T12:25:18.000Z</published>
    <updated>2018-10-22T10:38:38.749Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法的提出"><a href="#算法的提出" class="headerlink" title="算法的提出"></a>算法的提出</h3><ul><li>一致性哈希算法是在1997年由MIT提出的一种分布式哈希算法, 设计目标是为了解决因特网中的热点问题, 喂鸡百颗的解释: <a href="https://zh.wikipedia.org/wiki/%E4%B8%80%E8%87%B4%E5%93%88%E5%B8%8C" target="_blank" rel="noopener">点这里</a></li><li>一致性哈希算法提出了在动态变化的cache中,判定hash算法好换的四个定义<ol><li>平衡性: 指的是哈希的结果能够尽可能的分布到所有的缓存中去,这样可以使得所有的缓冲空间都得到利用</li><li>单调性: 如果已经有一些内容通过哈希分派到了相应的缓存中, 又有新的缓存加入到了系统. 哈希的结果能够保证原有的已分配的内容可以映射到原有的或者新的缓存中去,但是不会映射到旧的缓存区</li><li>分散性</li><li>负载</li></ol></li><li>在分布式集群中,机器的添加删除,故障后自动脱离集群这些操作是分布式集群管理中最基本的功能,如果采用一般的hash(object)%N的算法,在集群节点稍有变动的情况下, 原有的数据就再也找不到了, 这样严重违反了单调性原则</li></ul><h3 id="一致性哈希的解释"><a href="#一致性哈希的解释" class="headerlink" title="一致性哈希的解释"></a>一致性哈希的解释</h3><ol><li>按照常用的哈希算法将对应的key映射到一个具有2^32个桶的空间中, 将这些数字头尾相连,想象成一个闭合的环<br><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/consistent_hash_1.png" alt="consistent_hash_1"></li><li>将节点的标识通过hash算法处理后映射到环上,如图,计算三个节点node1-node3的hash值,映射到hash环上<br><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/consistent_hash_2.png" alt="consistent_hash_2"></li><li>将要存储的key计算hash值后,也映射到环上,按照顺时针(或者逆时针)一个方向,将数据存储到最近的一个节点上, 如图所示<br><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/consistent_hash_3.png" alt="consisten_hash_3"></li><li>如果加入了新的节点, 失效的缓存只有很少的一部分, 只有key4的缓存失效了,因为它的hash值会映射到node4上,其他的则保持不变<br><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/consistent_hash_4.png" alt="consisten_hash_4"></li><li>如果有节点挂掉, 同样失效的缓存也是只有很少的一部分, node4挂掉后, 也只有key4会受到影响,其他部分保持不变<br><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/consistent_hash_5.png" alt="consistent_hash_5"></li><li><strong>但是</strong>,哈希算法并不能保证平衡性,也就是说,通过key计算的hash值, 并不一定能均匀的分布在整个环中, 这样有可能会导致大量的key分布在同一个节点中,如果节点挂掉,就会导致其他节点的压力更大, 从而导致雪崩式的节点崩溃,图中node2承接了来自node3的压力<br><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/consistent_hash_7.png" alt="consistent_hash_5"></li><li>因此,所有的节点必须均匀分布在整个哈希环中,因此提出了虚拟节点的概念, 虚拟节点是真实节点在哈希空间中的复制品, 一个真实节点可以有很多个虚拟节点, 虚拟节点越多, 整个哈希环中的节点分布就越均匀,图中node1的虚拟节点对应node1_v1和node1_v2, node2对应node2_v1和node2_v2<br><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/consistent_hash_6.png" alt="consistent_hash_6"></li></ol><h3 id="hash算法的选取"><a href="#hash算法的选取" class="headerlink" title="hash算法的选取"></a>hash算法的选取</h3><p>这里选用的hash算法必须具有很好的分散性,java中的Object的hashcode实现,变化程度太小,例如,需要计算哈希值的key为”node-1”,”node-2”, 计算结果为-1040172250, -1040172249, 计算结果过于集中, 这会使所有的节点分布在哈希环上很小的范围内, 导致缓存无法均匀分布在各个节点上,因此需要选取合适的hash算法, 推荐使用CRC32_HASH、FNV1_32_HASH、 KETAMA_HASH、murmur_hash</p><h3 id="不带虚拟节点的代码实现"><a href="#不带虚拟节点的代码实现" class="headerlink" title="不带虚拟节点的代码实现"></a>不带虚拟节点的代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.SortedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一致性哈希</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/5 19:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistentHashingWithoutVirtualNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 缓存服务器列表 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] servers = &#123;<span class="string">"192.168.198.128:111"</span>, <span class="string">"192.168.198.128:112"</span>, <span class="string">"192.168.198.128:113"</span>, <span class="string">"192.168.198.128:114"</span>, <span class="string">"192.168.198.128:115"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** key表示服务器的hash值, value表示服务器的名称 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SortedMap&lt;Integer, String&gt; sortedMap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String server : servers) &#123;</span><br><span class="line">            <span class="keyword">int</span> hash = hash(server);</span><br><span class="line">            System.out.println(<span class="string">"["</span> + server + <span class="string">"] 加入集合中, hash值为"</span> + hash);</span><br><span class="line">            sortedMap.put(hash, server);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 使用FNV1_32_HASH算法计算服务器的Hash值*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> p = <span class="number">16777619</span>;</span><br><span class="line">        <span class="keyword">int</span> hash = (<span class="keyword">int</span>) <span class="number">2166136261L</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</span><br><span class="line">            hash = (hash ^ str.charAt(i)) * p;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">13</span>;</span><br><span class="line">        hash ^= hash &gt;&gt; <span class="number">7</span>;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">3</span>;</span><br><span class="line">        hash ^= hash &gt;&gt; <span class="number">17</span>;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 算出来值为负数就取绝对值</span></span><br><span class="line">        <span class="keyword">if</span>(hash &lt; <span class="number">0</span>)</span><br><span class="line">            hash = Math.abs(hash);</span><br><span class="line">        <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**得到应当路由的节点*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getServer</span><span class="params">(String node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hash = hash(node);</span><br><span class="line">        <span class="comment">// 大于这个hash值得所有的节点</span></span><br><span class="line">        SortedMap&lt;Integer, String&gt; tailMap = sortedMap.tailMap(hash);</span><br><span class="line">        <span class="comment">// 第一个key就是离node最近的那个节点</span></span><br><span class="line">        Integer integer = tailMap.firstKey();</span><br><span class="line">        <span class="keyword">return</span> tailMap.get(integer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] nodes = &#123;<span class="string">"127.0.0.1:1111"</span>, <span class="string">"221.226.0.1:2222"</span>, <span class="string">"10.211.0.1:3333"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String node : nodes) &#123;</span><br><span class="line">            System.out.println(<span class="string">"节点:"</span> + node + <span class="string">" 哈希值: "</span> + hash(node) + <span class="string">", 被路由到节点:"</span> + getServer(node));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带有虚拟节点的java实现"><a href="#带有虚拟节点的java实现" class="headerlink" title="带有虚拟节点的java实现"></a>带有虚拟节点的java实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteOrder;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加虚拟节点的一致性哈希</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/5 20:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistentHashingWithVirtualNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  真实的服务器列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] servers = &#123;<span class="string">"192.168.198.128:111"</span>, <span class="string">"192.168.198.128:112"</span>, <span class="string">"192.168.198.128:113"</span>, <span class="string">"192.168.198.128:114"</span>, <span class="string">"192.168.198.128:115"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  真实节点列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; realNodes = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  虚拟节点列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SortedMap&lt;Long, String&gt; virtualNodes = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  虚拟节点的数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VIRTUAL_NODES = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分隔符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEPARATOR = <span class="string">"=&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化节点数据</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 先添加原始的服务器到真实的节点列表</span></span><br><span class="line">        realNodes.addAll(Arrays.asList(servers));</span><br><span class="line">        <span class="comment">// 添加虚拟节点</span></span><br><span class="line">        addVirtualNode(realNodes.toArray(realNodes.toArray(<span class="keyword">new</span> String[]&#123;&#125;)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用</span></span><br><span class="line"><span class="comment">     * FNV1_32_HASH或者murmurHash</span></span><br><span class="line"><span class="comment">     * 计算Hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">hash</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hash = murmurHash(str);</span><br><span class="line">        <span class="keyword">return</span> Math.abs(hash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应当路由到的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getServer</span><span class="params">(String node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> hash = hash(node);</span><br><span class="line">        SortedMap&lt;Long, String&gt; tailMap = virtualNodes.tailMap(hash);</span><br><span class="line">        Long i = <span class="keyword">null</span>;</span><br><span class="line">        String virtualNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(tailMap.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            i = virtualNodes.firstKey();</span><br><span class="line">            virtualNode = virtualNodes.get(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = tailMap.firstKey();</span><br><span class="line">            virtualNode = tailMap.get(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个key就是顺时针过去离node最近的节点</span></span><br><span class="line">        <span class="comment">// 返回虚拟节点的名称</span></span><br><span class="line">        <span class="keyword">return</span> virtualNode.substring(<span class="number">0</span>, virtualNode.indexOf(SEPARATOR));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态添加节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(String... nodes)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 添加真实的节点</span></span><br><span class="line">        realNodes.addAll(Arrays.asList(nodes));</span><br><span class="line">        <span class="comment">// 添加虚拟节点</span></span><br><span class="line">        addVirtualNode(nodes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(String... nodes)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 移除真实节点</span></span><br><span class="line">        realNodes.removeAll(Arrays.asList(nodes));</span><br><span class="line">        <span class="comment">// 移除虚拟节点</span></span><br><span class="line">        <span class="keyword">for</span> (String node : nodes) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VIRTUAL_NODES; i++) &#123;</span><br><span class="line">                String virtualNodeName = node + SEPARATOR + i;</span><br><span class="line">                <span class="keyword">long</span> hash = hash(virtualNodeName);</span><br><span class="line">                System.out.println(<span class="string">"移除虚拟节点:"</span> + virtualNodeName + <span class="string">"  hash值为: "</span> + hash);</span><br><span class="line">                virtualNodes.remove(hash);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  添加虚拟节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addVirtualNode</span><span class="params">(String... nodes)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 添加虚拟节点</span></span><br><span class="line">        <span class="keyword">for</span> (String s : nodes) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VIRTUAL_NODES; i++) &#123;</span><br><span class="line">                String virtualNodeName = s + SEPARATOR + i;</span><br><span class="line">                <span class="keyword">long</span> hash = hash(virtualNodeName);</span><br><span class="line">                System.out.println(<span class="string">"虚拟节点["</span> + virtualNodeName + <span class="string">"]被添加, hash值为"</span> + hash);</span><br><span class="line">                virtualNodes.put(hash, virtualNodeName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FNV1_32_HASH</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fnvHash</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> p = <span class="number">16777619</span>;</span><br><span class="line">        <span class="keyword">int</span> hash = (<span class="keyword">int</span>) <span class="number">2166136261L</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</span><br><span class="line">            hash = (hash ^ str.charAt(i)) * p;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">13</span>;</span><br><span class="line">        hash ^= hash &gt;&gt; <span class="number">7</span>;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">3</span>;</span><br><span class="line">        hash ^= hash &gt;&gt; <span class="number">17</span>;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 算出来值为负数就取绝对值</span></span><br><span class="line">        <span class="keyword">if</span>(hash &lt; <span class="number">0</span>)</span><br><span class="line">            hash = Math.abs(hash);</span><br><span class="line">        <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * murmurHash: 非加密hash算法, 速度快, 碰撞少, 随机分布特征表现良好</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">murmurHash</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        ByteBuffer buf = ByteBuffer.wrap(key.getBytes());</span><br><span class="line">        <span class="keyword">int</span> seed = <span class="number">0x1234ABCD</span>;</span><br><span class="line"></span><br><span class="line">        ByteOrder byteOrder = buf.order();</span><br><span class="line">        buf.order(ByteOrder.LITTLE_ENDIAN);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> m = <span class="number">0xc6a4a7935bd1e995L</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">47</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> h = seed ^ (buf.remaining() * m);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> k;</span><br><span class="line">        <span class="keyword">while</span> (buf.remaining() &gt;= <span class="number">8</span>) &#123;</span><br><span class="line">            k = buf.getLong();</span><br><span class="line"></span><br><span class="line">            k *= m;</span><br><span class="line">            k ^= k &gt;&gt;&gt; r;</span><br><span class="line">            k *= m;</span><br><span class="line"></span><br><span class="line">            h ^= k;</span><br><span class="line">            h *= m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buf.remaining() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ByteBuffer finish = ByteBuffer.allocate(<span class="number">8</span>).order(</span><br><span class="line">                    ByteOrder.LITTLE_ENDIAN);</span><br><span class="line">            finish.put(buf).rewind();</span><br><span class="line">            h ^= finish.getLong();</span><br><span class="line">            h *= m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        h ^= h &gt;&gt;&gt; r;</span><br><span class="line">        h *= m;</span><br><span class="line">        h ^= h &gt;&gt;&gt; r;</span><br><span class="line">        buf.order(byteOrder);</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> consistentHashTest &#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            list.add(UUID.randomUUID().toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            String server = getServer(list.get(i));</span><br><span class="line">            Integer integer = hashMap.get(server);</span><br><span class="line">            <span class="keyword">if</span>(integer == <span class="keyword">null</span>) &#123;</span><br><span class="line">                hashMap.put(server, i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                hashMap.put(server, integer+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; strings = hashMap.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">            System.out.println(<span class="string">"节点["</span> +string+<span class="string">"]分配到的元素个数为"</span>+ hashMap.get(string));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>参考内容:<br><a href="http://m.elecfans.com/article/717709.html" target="_blank" rel="noopener">http://m.elecfans.com/article/717709.html</a><br> <a href="https://www.cnblogs.com/shangxiaofei/p/6859904.html" target="_blank" rel="noopener">https://www.cnblogs.com/shangxiaofei/p/6859904.html</a><br><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/631-yi-zhi-xing-ha-xi.html" target="_blank" rel="noopener">https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/631-yi-zhi-xing-ha-xi.html</a><br>hash算法: <a href="https://www.cnblogs.com/wanghetao/p/4658471.html" target="_blank" rel="noopener">https://www.cnblogs.com/wanghetao/p/4658471.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      一致性哈希的原理以及java实现
    
    </summary>
    
      <category term="hash" scheme="https://zonzie.gitee.io/categories/hash/"/>
    
    
      <category term="hash" scheme="https://zonzie.gitee.io/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>springboot中的动态数据源配置</title>
    <link href="https://zonzie.gitee.io/2018/09/03/springboot%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/"/>
    <id>https://zonzie.gitee.io/2018/09/03/springboot中的动态数据源配置/</id>
    <published>2018-09-03T09:32:58.000Z</published>
    <updated>2018-10-22T10:38:38.756Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在项目中使用多数据源"><a href="#在项目中使用多数据源" class="headerlink" title="在项目中使用多数据源"></a>在项目中使用多数据源</h4><ul><li>使用多数据源一般有两种解决办法<ul><li>在数据库之上加一层,项目在访问数据时,直接访问中间层,中间层解析sql,确定访问哪个数据库实例,或者访问多个实例,然后再汇总数据</li><li>如果是简单的配置多数据源,或者配置读写分离,可以采用spring的动态数据源配置</li></ul></li></ul><h5 id="这里只说使用动态数据源的方法"><a href="#这里只说使用动态数据源的方法" class="headerlink" title="这里只说使用动态数据源的方法"></a>这里只说使用动态数据源的方法</h5><ul><li>spring提供的动态数据源配置非常简单</li><li>基本思路如下:<ol><li>分别初始化每个数据源</li><li>将所有的数据源全部放入spring提供的动态数据源对象中</li><li>将dao层使用的原本的数据源切换为动态数据源对象</li><li>在执行dao层的方法时,确定具体要访问的数据源</li></ol></li><li>下面的例子基于springboot项目</li></ul><h5 id="初始化数据源"><a href="#初始化数据源" class="headerlink" title="初始化数据源"></a>初始化数据源</h5><h6 id="这里只添加两个数据源-做一个简单的读写分离配置"><a href="#这里只添加两个数据源-做一个简单的读写分离配置" class="headerlink" title="这里只添加两个数据源,做一个简单的读写分离配置"></a>这里只添加两个数据源,做一个简单的读写分离配置</h6><p><strong>1 首先是application.yml的配置</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据源使用druid</span></span><br><span class="line"><span class="attr">druidconfig:</span> <span class="meta">&amp;druidconfig</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">  driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">  initialSize:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  minIdle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  maxActive:</span> <span class="number">21</span></span><br><span class="line"><span class="attr">  maxWait:</span> <span class="number">60001</span></span><br><span class="line"><span class="attr">  timeBetweenEvictionRunsMillis:</span> <span class="number">60001</span></span><br><span class="line"><span class="attr">  minEvictableIdleTimeMillis:</span> <span class="number">300001</span></span><br><span class="line"><span class="attr">  validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">  testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">  filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"><span class="attr">  connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span><br><span class="line"><span class="attr">  useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://192.168.198.128:3306/operation?characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*druidconfig</span></span><br><span class="line"><span class="attr">  readSource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://192.168.198.128:3306/operation?characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*druidconfig</span></span><br></pre></td></tr></table></figure></p><p><strong>2 然后是初始化数据源配置</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> itw_yaobq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/2/28 17:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"writeDataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">writeDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"readDataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.readSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">readDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3 jpa数据源配置</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改jpa的自动配置,添加动态数据源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> itw_yaobq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/2/28 17:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(value = <span class="string">"com.taikang.operation.*.repository"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitialDataSource</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载yml中的配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JpaProperties jpaProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里的DataSource,注入动态数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"routingDataSource"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置动态数据源,属性配置,扫描entity的位置</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactoryBean"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactoryBean</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.dataSource(dataSource).properties(jpaProperties.getProperties()).packages(<span class="string">"com.taikang.operation.*.repository.entity"</span>)</span><br><span class="line">                <span class="comment">//                .persistenceUnit("")</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置实体工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EntityManagerFactory <span class="title">entityManagerFactory</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.entityManagerFactoryBean(builder).getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        MyJpaTransactionManager myJpaTransactionManager = <span class="keyword">new</span> MyJpaTransactionManager();</span><br><span class="line">        myJpaTransactionManager.setEntityManagerFactory(<span class="keyword">this</span>.entityManagerFactory(builder));</span><br><span class="line">        <span class="keyword">return</span> myJpaTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>4 事务管理类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.taikang.operation.core.common.constant.DataSourceType;</span><br><span class="line"><span class="keyword">import</span> com.taikang.operation.core.config.readwriteseparationconfig.dynamicdatasourceconfig.DynamicDataSourceHolder;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.DefaultTransactionStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> itw_yaobq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/2/28 17:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJpaTransactionManager</span> <span class="keyword">extends</span> <span class="title">JpaTransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doBegin</span><span class="params">(Object transaction, TransactionDefinition definition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> readOnly = definition.isReadOnly();</span><br><span class="line">        <span class="keyword">if</span> (!readOnly) &#123;</span><br><span class="line">            DynamicDataSourceHolder.setDataSource(DataSourceType.write.getType());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">"transaction-readOnly?: &#123;&#125;"</span>, readOnly);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.doBegin(transaction, definition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doCommit</span><span class="params">(DefaultTransactionStatus status)</span> </span>&#123;</span><br><span class="line">        String dataSource = DynamicDataSourceHolder.getDataSource();</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">"dataSource: &#123;&#125;"</span>, dataSource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.doCommit(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="配置动态数据源"><a href="#配置动态数据源" class="headerlink" title="配置动态数据源"></a>配置动态数据源</h6><p><strong>1 先创建一个读写库的标识</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> itw_yaobq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/1 13:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> DataSourceType &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读写分离标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    read(<span class="string">"read"</span>, <span class="string">"读库"</span>), write(<span class="string">"write"</span>, <span class="string">"写库"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    DataSourceType(String type, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2 创建动态数据源,并且设置数据源的切换策略</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.taikang.operation.core.common.constant.DataSourceType;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> itw_yaobq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/2/28 16:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切换数据源的名称标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String dataSource = DynamicDataSourceHolder.getDataSource();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(dataSource)) &#123;</span><br><span class="line">            dataSource = DataSourceType.write.getType();</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"dataSource: "</span> + dataSource);</span><br><span class="line">DynamicDataSourceHolder.clearDataSource();</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3 创建动态数据源</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.taikang.operation.core.common.constant.DataSourceType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置动态数据源,将所有的数据源都放入DynamicDataSource中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> itw_yaobq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/2/28 16:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceRouting</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"routingDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractRoutingDataSource <span class="title">routingDataSource</span><span class="params">(@Qualifier(<span class="string">"readDataSource"</span>)</span> DataSource readDataSource, @<span class="title">Qualifier</span><span class="params">(<span class="string">"writeDataSource"</span>)</span> DataSource writeDataSource) </span>&#123;</span><br><span class="line">        DynamicDataSource dynamicDataSource = <span class="keyword">new</span> DynamicDataSource();</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        map.put(DataSourceType.read.getType(), readDataSource);</span><br><span class="line">        map.put(DataSourceType.write.getType(), writeDataSource);</span><br><span class="line"></span><br><span class="line">        dynamicDataSource.setTargetDataSources(map);</span><br><span class="line">        <span class="comment">// 设置默认的数据源</span></span><br><span class="line">        dynamicDataSource.setDefaultTargetDataSource(writeDataSource);</span><br><span class="line">        <span class="keyword">return</span> dynamicDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>4 将读写库的标识存到ThreadLocal中</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绑定当前线程和特定的数据源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> itw_yaobq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/2/28 16:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; DATASOURCE = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DATASOURCE.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(String dataSourceName)</span> </span>&#123;</span><br><span class="line">        DATASOURCE.set(dataSourceName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DATASOURCE.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>5 在切面中根据方法名称判断要切换的数据源</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.taikang.operation.core.common.constant.DataSourceType;</span><br><span class="line"><span class="keyword">import</span> com.taikang.operation.core.config.readwriteseparationconfig.dynamicdatasourceconfig.DynamicDataSourceHolder;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> itw_yaobq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/2/28 16:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.taikang.operation.*.service.impl.*.select*(..)) || execution(* com.taikang.operation.*.service.impl.*.find*(..)) "</span> +</span><br><span class="line">            <span class="string">"|| execution(* com.taikang.operation.*.service.impl.*.get*(..)) || execution(* com.taikang.operation.*.service.impl.*.query*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">setReadDataSourceType</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) pjp.getSignature();</span><br><span class="line">        Class declaringType = signature.getDeclaringType();</span><br><span class="line">        <span class="keyword">boolean</span> annotationPresent = declaringType.isAnnotationPresent(Transactional.class);</span><br><span class="line">        <span class="keyword">if</span> (!annotationPresent) &#123;</span><br><span class="line">            DynamicDataSourceHolder.setDataSource(DataSourceType.read.getType());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">"数据源切面: &#123;&#125;"</span>, <span class="string">"read"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.taikang.operation.*.service.impl.*.delete*(..)) || execution(* com.taikang.operation.*.service.impl.*.update*(..)) "</span> + <span class="string">"|| execution(* com.taikang.operation.*.service.impl.*.insert*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">setWriteDataSourceType</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//        MethodSignature signature = (MethodSignature) pjp.getSignature();</span></span><br><span class="line">        DynamicDataSourceHolder.setDataSource(DataSourceType.write.getType());</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">"数据源切面: &#123;&#125;"</span>, <span class="string">"write"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里只是给出了两个数据源读写分离的配置,数据库的主从复制需要另外处理,除此之外,配置mybatis的动态数据源与此类似,还可以将代码改为支持多数据源配置的方法,只需要添加新的数据源, 至于具体选择哪个数据源,可以将根据方法名切换数据源的方式修改为根据自定义注解的方式切换数据源,在此不再赘述</p>]]></content>
    
    <summary type="html">
    
      在spring项目中使用多数据源配置的基本方法
    
    </summary>
    
      <category term="springboot" scheme="https://zonzie.gitee.io/categories/springboot/"/>
    
    
      <category term="mysql" scheme="https://zonzie.gitee.io/tags/mysql/"/>
    
      <category term="springboot" scheme="https://zonzie.gitee.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch和ELK的安装使用</title>
    <link href="https://zonzie.gitee.io/2018/09/01/howToUseEsAndELK/"/>
    <id>https://zonzie.gitee.io/2018/09/01/howToUseEsAndELK/</id>
    <published>2018-09-01T06:41:38.000Z</published>
    <updated>2018-10-22T10:38:38.753Z</updated>
    
    <content type="html"><![CDATA[<h4 id="es安装"><a href="#es安装" class="headerlink" title="es安装"></a>es安装</h4><ul><li>下载es<ul><li>下载es,地址: <a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a>,可以下载tarball或者zip文件</li><li>es不能在root目录下运行,需要一个普通账户</li><li>解压后进入bin目录,<code>./elasticsearch</code>,就可以启动es</li></ul></li><li><p>安装ik分词器</p><ul><li>下载地址: <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></li><li>可以使用plugin直接安装,但是需要安装对应的版本,我这里下载的是6.3.2: <code>./elasticsearch-plugin install https://oiw0skz2u.qnssl.com/o_1cl0qgokl4aq1gof9ii1qch1r5k7.zip?attname=elasticsearch-analysis-ik-6.3.2.zip</code></li><li>我这里无法直接下载安装,只能手动安装: <ul><li>下载zip文件: <code>wget https://oiw0skz2u.qnssl.com/o_1cl0qgokl4aq1gof9ii1qch1r5k7.zip?attname=elasticsearch-analysis-ik-6.3.2.zip</code></li><li>解压文件,指定目录: <code>unzip -d ./ikanalyzer elasticsearch-analysis-ik-6.3.2.zip</code></li><li>进入目录,打包,需要maven环境: <code>mvn clean package</code></li><li>打包完毕后,找到<code>target/release/</code>目录下的zip文件,复制到es的plugin目录下</li><li>解压这个文件,指定目录: <code>unzip -d ./ikanalyzer elasticsearch-analysis-ik-6.3.2.zip</code></li><li>删除zip文件</li><li>再次启动es,ikAnalyzer会自动被加载</li></ul></li></ul></li><li><p>es没有界面,可以使用head插件,head插件需要node环境</p><ul><li>安装node,去官网下载node</li><li>解压</li><li><p>配置环境变量: <code>vim /etc/profile</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NODE=/opt/node/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li><li><p>切换npm源: <code>npm config set registry https://registry.npm.taobao.org</code></p></li><li>下载head插件, 地址: <a href="https://github.com/mobz/elasticsearch-head.git" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head.git</a></li><li>使用yum安装git,使用git clone: <code>git clone https://github.com/mobz/elasticsearch-head.git</code></li><li>拉下代码后, 进入目录,运行<code>npm install</code></li><li>因为没有phantomJs,会报错,再执行<code>npm install phantomjs-prebuilt@2.1.16 --ignore-scripts</code></li><li>可以启动了: <code>npm run start</code></li><li>但是打开浏览器,还是无法连接es,需要在config/elasticsearch.yml中添加配置: <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>es集群配置</p><ul><li><p>需要修改<code>/config/elasticsearch.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要修改的配置</span></span><br><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line"><span class="string">cluster.name:</span> <span class="string">es-cluster</span></span><br><span class="line"><span class="comment"># 节点名称,每个节点要不一样</span></span><br><span class="line"><span class="string">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="comment"># 是否可以作为master</span></span><br><span class="line"><span class="string">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 是否可以作为数据节点</span></span><br><span class="line"><span class="string">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 本机的ip地址</span></span><br><span class="line"><span class="string">network.host:</span> <span class="number">192.168</span><span class="number">.198</span><span class="number">.88</span></span><br><span class="line"><span class="comment"># 要监听的端口</span></span><br><span class="line"><span class="string">http.port:</span> <span class="number">9201</span></span><br><span class="line"><span class="comment"># 集群的端口</span></span><br><span class="line"><span class="string">transport.tcp.port:</span> <span class="number">9301</span></span><br><span class="line"><span class="comment"># 集群中的其他节点的host,因为都在一台机器上,集群端口不一样,这里配置两个实例的单机集群</span></span><br><span class="line"><span class="string">discovery.zen.ping.unicast.hosts:</span> <span class="string">["192.168.198.88:9301","192.168.198.88:9302"]</span></span><br><span class="line"><span class="comment"># 最小集群节点数,为了避免集群脑裂, 集群中的节点数应该为 半数+1</span></span><br><span class="line"><span class="string">discovery.zen.minimum_master_nodes:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>依次启动各个节点即可组成集群</p></li></ul></li></ul><h4 id="ELK的基本安装整合使用-以及和logback整合使用"><a href="#ELK的基本安装整合使用-以及和logback整合使用" class="headerlink" title="ELK的基本安装整合使用,以及和logback整合使用"></a>ELK的基本安装整合使用,以及和logback整合使用</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><ul><li>ELK是当前流行的日志分析系统,是由三个部分组成ElasticSearch, LogStash, Kibana组成, 三个部分都是elastic的开源产品,Logstash是一个用来收集分析过滤日志的工具,它可以从各种来源收集日志,输出到各种其他的组件之中,Kibana是一个基于web的图形化界面, 主要用于数据的可视化展示, ELK三者基本都做到了零配置,开箱即用</li><li>官网上有各个部分的使用文档: <a href="https://www.elastic.co/cn/products" target="_blank" rel="noopener">https://www.elastic.co/cn/products</a></li><li>ELK三者的版本需要保持一致</li></ul><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><h6 id="logstash的配置"><a href="#logstash的配置" class="headerlink" title="logstash的配置:"></a>logstash的配置:</h6><ul><li>logstash依赖jdk1.8,使用之前需要配置好jdk环境</li><li>logstash通过管道进行运作,管道有两个必须的元素,输入和输出,还有一个可选的元素,过滤器</li><li>输出部分从数据源获取数据,过滤器根据用户指定的数据格式修改数据,输出插件则将数据写入到目的地,如图:<img height="50" src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/basic_logstash_pipeline.png" alt="logstash"></li><li><p>一个简单的例子,启动logstash</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/logstash -e <span class="string">'input &#123; stdin &#123;&#125;&#125; output &#123; stdout &#123;&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>  启动后,键入的输入都会作为logstash的输入并且返回结果<br>  这里添加一个新的配置文件logstash-logback.conf</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    tcp &#123;</span><br><span class="line">        host =&gt; &quot;192.168.198.128&quot;</span><br><span class="line">        port =&gt; 9760</span><br><span class="line">        mode =&gt; &quot;server&quot;</span><br><span class="line">        tags =&gt; [&quot;tags&quot;]</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123;</span><br><span class="line">        codec =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; &quot;192.168.198.88:9200&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  上面的input内容会接收发送到<code>host:port</code>的内容,host是本机的ip,output中有两个输出,一个输出到标准控制台,另一个输出到es</p></li><li>带配置文件启动: <code>./bin/logstash -f ./config/logstash-logback.conf</code></li></ul><h6 id="Kibana的配置"><a href="#Kibana的配置" class="headerlink" title="Kibana的配置"></a>Kibana的配置</h6><ul><li>解压下载包后, 找到config目录下的kibana.yml</li><li><p>开启配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server.port:</span> <span class="number">5601</span></span><br><span class="line"><span class="string">server.host:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line"><span class="string">elasticsearch.url:</span> <span class="string">"http://192.168.198.88:9200"</span></span><br><span class="line"><span class="string">kibana.index:</span> <span class="string">".kibana"</span></span><br></pre></td></tr></table></figure></li><li><p>直接启动bin目录下的kibana.bat,就可以直接使用了</p></li><li>访问kibana的页面: <code>localhost:5601</code></li><li>由于logstash默认的索引是以<code>logstash-</code>开头, 后面为当前的日期,因此create index pattern 添加<code>logstash-*</code></li></ul><h6 id="项目中的日志配置"><a href="#项目中的日志配置" class="headerlink" title="项目中的日志配置"></a>项目中的日志配置</h6><ul><li><p>pom文件中添加jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在日志配置的文件logback.xml中添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">destination</span>&gt;</span>192.168.198.128:9760<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>至此,开启ELK,可以在kibana的界面上看到项目的日志了,可以根据自己想看的内容添加filter,过滤日志内容</p><hr><blockquote><p>参考内容: <br> <a href="https://www.cnblogs.com/yuhuLin/p/7018858.html" target="_blank" rel="noopener">https://www.cnblogs.com/yuhuLin/p/7018858.html</a> <br> <a href="https://blog.csdn.net/y_y_y_k_k_k_k/article/details/72772223" target="_blank" rel="noopener">https://blog.csdn.net/y_y_y_k_k_k_k/article/details/72772223</a> <br> <a href="https://www.cnblogs.com/moonlightL/p/7760512.html" target="_blank" rel="noopener">https://www.cnblogs.com/moonlightL/p/7760512.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      elasticsearch以及ELK的安装配置及使用
    
    </summary>
    
      <category term="es" scheme="https://zonzie.gitee.io/categories/es/"/>
    
    
      <category term="elasticSearch" scheme="https://zonzie.gitee.io/tags/elasticSearch/"/>
    
      <category term="logstash" scheme="https://zonzie.gitee.io/tags/logstash/"/>
    
      <category term="kibana" scheme="https://zonzie.gitee.io/tags/kibana/"/>
    
      <category term="ELK" scheme="https://zonzie.gitee.io/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="https://zonzie.gitee.io/2018/08/20/builder-pattern/"/>
    <id>https://zonzie.gitee.io/2018/08/20/builder-pattern/</id>
    <published>2018-08-20T13:51:40.000Z</published>
    <updated>2018-10-22T10:38:38.749Z</updated>
    
    <content type="html"><![CDATA[<h3 id="建造者模式-生成器模式"><a href="#建造者模式-生成器模式" class="headerlink" title="建造者模式(生成器模式)"></a>建造者模式(生成器模式)</h3><blockquote><p>separate the construction of a complex object from its representation so that the same construction process can create diffrent representations<br><strong>将一个复杂对象的构建和表示分离,使得同样的构建过程可以创建不同的表示</strong></p></blockquote><h4 id="建造者中的角色"><a href="#建造者中的角色" class="headerlink" title="建造者中的角色"></a>建造者中的角色</h4><h5 id="Product产品类"><a href="#Product产品类" class="headerlink" title="Product产品类"></a>Product产品类</h5><p>要创建的复杂对象,通常实现了模板方法模式,也就是有模板方法和普通方法</p><h5 id="Builder抽象建造者"><a href="#Builder抽象建造者" class="headerlink" title="Builder抽象建造者"></a>Builder抽象建造者</h5><p>规范产品的构建, 一般由子类实现</p><h5 id="ConcreteBuilder具体建造者"><a href="#ConcreteBuilder具体建造者" class="headerlink" title="ConcreteBuilder具体建造者"></a>ConcreteBuilder具体建造者</h5><p>实现具体的构建方法, 返回一个组建好的对象</p><h5 id="Director导演类"><a href="#Director导演类" class="headerlink" title="Director导演类"></a>Director导演类</h5><p>负责安排已有模块的建造顺序, 然后告诉builder开始建造</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>相同的方法,不同的执行顺序, 产生的事件的结果不同,可以使用建造者模式</li><li>多个部件和零件, 都可以装配到一个对象中, 但是产生的运行结果又不相同时, 可以使用该模式</li><li>产品类字段很多, 不同的调用顺序产生不同的效能时,使用建造者模式非常合适</li></ul><h4 id="一个建造者模式的demo"><a href="#一个建造者模式的demo" class="headerlink" title="一个建造者模式的demo"></a>一个建造者模式的demo</h4><h5 id="首先提供产品类"><a href="#首先提供产品类" class="headerlink" title="首先提供产品类"></a>首先提供产品类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组装一台电脑,假设它有三个部件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/3 20:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String mainBoard;</span><br><span class="line">    <span class="keyword">private</span> String ram;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">(String cpu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMainBoard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mainBoard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMainBoard</span><span class="params">(String mainBoard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mainBoard = mainBoard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRam</span><span class="params">(String ram)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ram = ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"Computer&#123;"</span>);</span><br><span class="line">        sb.append(<span class="string">"cpu='"</span>).append(cpu).append(<span class="string">'\''</span>);</span><br><span class="line">        sb.append(<span class="string">", mainBoard='"</span>).append(mainBoard).append(<span class="string">'\''</span>);</span><br><span class="line">        sb.append(<span class="string">", ram='"</span>).append(ram).append(<span class="string">'\''</span>);</span><br><span class="line">        sb.append(<span class="string">'&#125;'</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="然后是抽象的builder"><a href="#然后是抽象的builder" class="headerlink" title="然后是抽象的builder"></a>然后是抽象的builder</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个抽象的建造者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/3 20:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildCpu</span><span class="params">(String cpu)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildMainBoard</span><span class="params">(String mainBoard)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildRam</span><span class="params">(String ram)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建造者的具体实现"><a href="#建造者的具体实现" class="headerlink" title="建造者的具体实现"></a>建造者的具体实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 建造者的实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/3 20:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractBuilder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个computer对象</span></span><br><span class="line">    <span class="keyword">private</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCpu</span><span class="params">(String cpu)</span> </span>&#123;</span><br><span class="line">        computer.setCpu(cpu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildMainBoard</span><span class="params">(String mainBoard)</span> </span>&#123;</span><br><span class="line">        computer.setMainBoard(mainBoard);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildRam</span><span class="params">(String ram)</span> </span>&#123;</span><br><span class="line">        computer.setRam(ram);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="导演类-指挥建造者建造的流程"><a href="#导演类-指挥建造者建造的流程" class="headerlink" title="导演类,指挥建造者建造的流程"></a>导演类,指挥建造者建造的流程</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指挥者类,指挥建造流程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/3 20:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ComputerBuilder build = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(ComputerBuilder build)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.build = build;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回建造好的实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cpu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mainBoard</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ram</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">createComputer</span><span class="params">(String cpu, String mainBoard, String ram)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 规范建造流程</span></span><br><span class="line">        <span class="keyword">this</span>.build.buildMainBoard(mainBoard);</span><br><span class="line">        <span class="keyword">this</span>.build.buildCpu(cpu);</span><br><span class="line">        <span class="keyword">this</span>.build.buildRam(ram);</span><br><span class="line">        <span class="keyword">return</span> build.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/3 21:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ComputerBuilder computerBuilder = <span class="keyword">new</span> ComputerBuilder();</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(computerBuilder);</span><br><span class="line">        Computer computer = director.createComputer(<span class="string">"i7"</span>, <span class="string">"intel主板"</span>, <span class="string">"8G"</span>);</span><br><span class="line">        System.out.println(computer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="建造者模式的优点"><a href="#建造者模式的优点" class="headerlink" title="建造者模式的优点"></a>建造者模式的优点</h4><ul><li>封装性: 使用者不需要关注产品内部的实现细节</li><li>建造者独立,容易扩展</li><li>便于控制细节风险, 具体的建造者是独立的, 可以对建造过程逐步细化, 不对其他模块产生影响</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>在实际开发中,往往会省略Director角色, 直接使用builder对象直接进行组装</p>]]></content>
    
    <summary type="html">
    
      设计模式--建造者模式
    
    </summary>
    
      <category term="design pattern" scheme="https://zonzie.gitee.io/categories/design-pattern/"/>
    
    
      <category term="design pattern" scheme="https://zonzie.gitee.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>JDK中的Map</title>
    <link href="https://zonzie.gitee.io/2018/08/14/JDK%E4%B8%AD%E7%9A%84HashMap/"/>
    <id>https://zonzie.gitee.io/2018/08/14/JDK中的HashMap/</id>
    <published>2018-08-14T07:15:40.000Z</published>
    <updated>2018-10-22T10:38:38.748Z</updated>
    
    <content type="html"><![CDATA[<h4 id="jdk1-7的hashMap源码注释"><a href="#jdk1-7的hashMap源码注释" class="headerlink" title="jdk1.7的hashMap源码注释"></a>jdk1.7的hashMap源码注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.security.action.GetPropertyAction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.AccessController;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk1.7 HashMap的实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/9 19:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHashMap7</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/** 初始容量, 默认16 */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 最大初始容量, 2^30 */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 负载因子, 默认0.75, 负载因子越小, hash冲突几率越低 */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 初始化一个Entry数组 */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Entry&lt;?,?&gt;[] EMPTY_TABLE = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 将初始化好的空数组赋值给table, table数组是hashMap实际存储数据的地方,并不在EMPTY_TABLE数组中 */</span></span><br><span class="line">    <span class="keyword">transient</span> Entry&lt;K, V&gt;[] table = (Entry&lt;K, V&gt;[]) EMPTY_TABLE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** HashMap实际存储的元素个数 */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 临界值(HashMap实际能存储的大小), 公式为(threshold = capacity * loadFactor) */</span></span><br><span class="line">    <span class="keyword">int</span> threshold = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 负载因子 */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** HashMap 的结构被修改的次数, 用于迭代器 */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**散列的默认阈值*/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALTERNATIVE_HASHING_THRESHOLD_DEFAULT = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> hashSeed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// holds values which can't be initialized until after VM is booted.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Table capacity above which to switch to use alternative hashing.</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALTERNATIVE_HASHING_THRESHOLD;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//          关于AccessController.doPrivileged的解释  http://www.blogjava.net/DLevin/archive/2012/11/02/390637.html</span></span><br><span class="line"><span class="comment">//          关于jdk.map.althashing.threshold  https://my.oschina.net/huangy/blog/1619144</span></span><br><span class="line">            String altThreshold = AccessController.doPrivileged(<span class="keyword">new</span> GetPropertyAction((<span class="string">"jdk.map.althashing.threshold"</span>)));</span><br><span class="line">            <span class="keyword">int</span> threshold;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                threshold = (<span class="keyword">null</span> != altThreshold) ? Integer.parseInt(altThreshold) : ALTERNATIVE_HASHING_THRESHOLD_DEFAULT;</span><br><span class="line">                <span class="comment">// disable alternative hashing if -1</span></span><br><span class="line">                <span class="keyword">if</span>(threshold == -<span class="number">1</span>) &#123;</span><br><span class="line">                    threshold = Integer.MAX_VALUE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(threshold &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"value must be positive"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException failed) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Illegal value for 'jdk.map.althashing.threshold'"</span>, failed);</span><br><span class="line">            &#125;</span><br><span class="line">            ALTERNATIVE_HASHING_THRESHOLD = threshold;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定初始化容量和负债因子的构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestHashMap7</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断设置的容量和负载因子合不合理</span></span><br><span class="line">        <span class="keyword">if</span>(initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"illegal initial capacity: "</span> + initialCapacity);</span><br><span class="line">        <span class="keyword">if</span>(initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span>(loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> + loadFactor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置负载因子,临界值此时为默认大小, 后面第一次put时由inflateTable(int toSize) 方法初始化一个数组table</span></span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        threshold = initialCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestHashMap7</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据已有的map创建一个新的相应容量的map</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestHashMap7</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Math.max((<span class="keyword">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class="number">1</span>, DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestHashMap7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *初始化表的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toSize</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inflateTable</span><span class="params">(<span class="keyword">int</span> toSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> capacity = roundUpToPowerOf2(toSize);</span><br><span class="line">        threshold = (<span class="keyword">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 创建一个Entry数组,作为最初的table</span></span><br><span class="line">        table = <span class="keyword">new</span> Entry[capacity];</span><br><span class="line">        <span class="comment">// 是否需要改变hashSeed的值</span></span><br><span class="line">        initHashSeedAsNeeded(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否需要给hashSeed重新赋值,如果重新赋值,需要重新计算hash值和桶的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">initHashSeedAsNeeded</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> currentAltHashing = hashSeed != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> useAltHashing = sun.misc.VM.isBooted() &amp;&amp; (capacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);</span><br><span class="line">        <span class="keyword">boolean</span> switching = currentAltHashing ^ useAltHashing;</span><br><span class="line">        <span class="keyword">if</span>(switching) &#123;</span><br><span class="line">            hashSeed = useAltHashing ? sun.misc.Hashing.randomHashSeed(<span class="keyword">this</span>) : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> switching;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算容量的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">roundUpToPowerOf2</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number &gt;= MAXIMUM_CAPACITY ? MAXIMUM_CAPACITY : (number &gt; <span class="number">1</span>) ? Integer.highestOneBit((number-<span class="number">1</span>) &lt;&lt; <span class="number">1</span>) : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算hash值</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = hashSeed;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">        &#125;</span><br><span class="line">        h ^= k.hashCode();</span><br><span class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算索引,桶的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = h &amp; (length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map的尺寸</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取null key的值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> V <span class="title">getForNullKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span>(e.key == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> e.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否存在key</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getEntry(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取一个Entry</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">        <span class="comment">// 遍历索引值为i的位置的entry的所有的元素</span></span><br><span class="line">        <span class="keyword">for</span>(Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="comment">// 判断key的hash值是否相等,同时key的equals方法需要返回true</span></span><br><span class="line">            <span class="keyword">if</span>(e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(table == EMPTY_TABLE) &#123;</span><br><span class="line">            <span class="comment">// 如果没有初始化table的长度,赋予默认值16,表的容量是16*0.75=12</span></span><br><span class="line">            inflateTable(threshold);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">        <span class="comment">// 遍历索引为i的entry</span></span><br><span class="line">        <span class="keyword">for</span>(Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="comment">// 如果key的hash值相等同时key值也相等,用新的value替换旧的value,并返回</span></span><br><span class="line">            <span class="keyword">if</span>(e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 修改次数加1</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">// 添加一个新的entry</span></span><br><span class="line">        addEntry(hash, key, value, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// null值null键单独处理</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span>(e.key == <span class="keyword">null</span>) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line"><span class="comment">//                e.recordAccess(this);</span></span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">        addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> getForNullKey();</span><br><span class="line">        Entry&lt;K,V&gt; entry = getEntry(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span> == entry ? <span class="keyword">null</span> : entry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类Entry,链表结构,1.7的hashMap使用拉链法解决hash碰撞</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; next;</span><br><span class="line">        <span class="keyword">int</span> hash;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建一个Entry</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> h key的hash值</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> k key</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> v value</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> n 下一个节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">            value = v;</span><br><span class="line">            next = n;</span><br><span class="line">            key = k;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置新值,返回旧值</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry e = (Map.Entry)o;</span><br><span class="line">            Object k1 = getKey();</span><br><span class="line">            Object k2 = e.getKey();</span><br><span class="line">            <span class="keyword">if</span>(k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class="line">                Object v1 = getValue();</span><br><span class="line">                Object v2 = e.getValue();</span><br><span class="line">                <span class="keyword">if</span>(v1 == v2 || v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果table的长度大于临界值同时桶的位置至少有一个元素,需要对表进行扩容</span></span><br><span class="line">        <span class="keyword">if</span>((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">            resize(<span class="number">2</span> * table.length);</span><br><span class="line">            <span class="comment">// 扩容以后需要重新计算hash值</span></span><br><span class="line">            hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 重新计算桶的位置</span></span><br><span class="line">            bucketIndex = indexFor(hash, table.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建一个新的entry</span></span><br><span class="line">        createEntry(hash, key, value, bucketIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据给定的参数创建一个新的entry</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 取出指定位置的entry</span></span><br><span class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">        <span class="comment">// 创建的新的entry放在指定的桶的位置上</span></span><br><span class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">        <span class="comment">// map元素个数加1</span></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表扩容</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">        Entry[] oldTable = table;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">        <span class="comment">// 如果容量达到最大值,不再扩容,直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建新的table,指定新的容量</span></span><br><span class="line">        Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">        <span class="comment">// 迁移数据到新的表</span></span><br><span class="line">        transfer(newTable, initHashSeedAsNeeded(newCapacity));</span><br><span class="line">        table = newTable;</span><br><span class="line">        <span class="comment">// 重新指定阈值</span></span><br><span class="line">        threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将旧表的数据迁移到新的扩容后的表,同时确定是否需要重新计算hash值</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">        <span class="comment">// 遍历旧的表</span></span><br><span class="line">        <span class="keyword">for</span>(Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">null</span> != e) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                <span class="keyword">if</span>(rehash) &#123;</span><br><span class="line">                    <span class="comment">// 使用新的hsahseed 重新计算hash值</span></span><br><span class="line">                    e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 根据hash值重新计算桶的位置</span></span><br><span class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">                <span class="comment">// 将entry中的next赋值为i处的元素</span></span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                <span class="comment">// 再将i处的元素重新赋值为整个entry</span></span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                <span class="comment">// 指向旧表中entry的下一个节点</span></span><br><span class="line">                e = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ThreadLocal的源码注释"><a href="#ThreadLocal的源码注释" class="headerlink" title="ThreadLocal的源码注释"></a>ThreadLocal的源码注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/27 15:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * threadLocals基于每一个线程的线性检测哈希映射附加到每一个线程上,</span></span><br><span class="line"><span class="comment">     * ThreadLocal对象本身作为key, 通过threadLocalHashCode搜索,</span></span><br><span class="line"><span class="comment">     * 这是一个自定义的hashcode, 消除了在相同线程数使用连续构造的threadLocal的常见情况下的冲突,同时在不太常见的情况下保持良好的行为</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给出下一个hashcode,从零开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * magic number ,以这个数为间隙的数值与2^n取模得到的数值可以均匀的分布在整个哈希表中</span></span><br><span class="line"><span class="comment">     * ThreadLocalMap使用的解决冲突的方法是 "线性探测法",</span></span><br><span class="line"><span class="comment">     * 均匀分布的好处是可以很快就探测到下一个临近的可用的slot,从而保证效率,因此哈希表的大小要保证是2^n</span></span><br><span class="line"><span class="comment">     * 和连续增长的hashcode不同, 0x61c88647 更适合长度为2^n的表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回下一个hashcode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为threadLocal初始化一个值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span>  T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个thread local 变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadLocalTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前线程的此线程局部变量副本中的值</span></span><br><span class="line"><span class="comment">     * 如果变量没有当前线程的值，则首先将其初始化为调用initialValue方法返回的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span>(map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span>(e != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> (T) e.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T value = initialValue();</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span>(map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>,value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取和一个线程关联的map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">        <span class="keyword">if</span>(m != <span class="keyword">null</span>)</span><br><span class="line">            m.remove(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个和threadLocal关联的map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstValue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">        t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ThreadLocalMap <span class="title">createInheritedMap</span><span class="params">(ThreadLocalMap parentMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadLocalMap(parentMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">childValue</span><span class="params">(T parentValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * threadLocalMap 是个自定义的哈希映射,仅适合维护threadLocal的值,</span></span><br><span class="line"><span class="comment">     * 为了帮助处理非常大且长寿命的用法，哈希表条目使用WeakReferences作为键,</span></span><br><span class="line"><span class="comment">     * 但是，由于未使用引用队列，因此只有在表开始空间不足时才能保证删除过时条目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这个entries 在这个哈希映射中继承自WeakReference,</span></span><br><span class="line"><span class="comment">         * 使用主要引用字段作为key(总会是一个threadLocal对象)</span></span><br><span class="line"><span class="comment">         * 需要注意的是key是null时,意味着这个key不再被引用, 所以这个这个entry会从表中擦除,</span></span><br><span class="line"><span class="comment">         * 这些entries被称为 "陈旧的entry(stale entries)"</span></span><br><span class="line"><span class="comment">         * --------------------------------------------</span></span><br><span class="line"><span class="comment">         * 使用弱引用: java中的四级引用中的第三级,一个对象,如果没有强引用链可达,一般活不过下一次GC</span></span><br><span class="line"><span class="comment">         * 这里使用弱引用,在threadLocal没有强引用可达时, 会被GC回收, 在ThreadLocalMap里对应的Entry会失效,这为垃圾清理提供便利</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocalTest</span>&gt; </span>&#123;</span><br><span class="line">            <span class="comment">// ThreadLocal中实际存储的数据</span></span><br><span class="line">            Object value;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Entry</span><span class="params">(ThreadLocalTest k, Object v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 初始化容量 -- 必须是2^n次方</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这个table</span></span><br><span class="line"><span class="comment">         * table.length 必须是2^n次方</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 表中的entry的个数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  需要扩容的阈值,默认是0</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置阈值,最坏情况下 2/3 负载因子</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setThreshold</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">            threshold = len * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 上一个索引</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ((i + <span class="number">1</span> &lt; len) ? i + <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下一个索引</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">prevIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ((i -<span class="number">1</span>) &gt;= <span class="number">0</span> ? i - <span class="number">1</span> : len - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 构建一个新的map,初始化容量 (firstKey, firstValue)</span></span><br><span class="line"><span class="comment">         * ThreadLocalMaps是延迟构建的,只有在至少有一个entry的时候去构建一个ThreadLocalMaps</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ThreadLocalMap(ThreadLocalTest firstKey, Object firstValue) &#123;</span><br><span class="line">            <span class="comment">// 初始化table数组</span></span><br><span class="line">            table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">            <span class="comment">// 用firstKey的threadLocalhashCode与初始化大小16取模得到哈希值,使用"&amp;(2^n - 1)"代替"%(2^n)",加快计算效率</span></span><br><span class="line">            <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 创建这个节点</span></span><br><span class="line">            table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">            <span class="comment">// 设置节点表的大小 = 1</span></span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 设定需要扩容的阈值</span></span><br><span class="line">            setThreshold(INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 构建一个新的map, 包含所有的继承的ThreadLocals,只会被createInheritedMap调用</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> parentMap</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">ThreadLocalMap</span><span class="params">(ThreadLocalMap parentMap)</span> </span>&#123;</span><br><span class="line">            Entry[] parentTable = parentMap.table;</span><br><span class="line">            <span class="keyword">int</span> len = parentTable.length;</span><br><span class="line">            setThreshold(len);</span><br><span class="line">            table = <span class="keyword">new</span> Entry[len];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                Entry e = parentTable[j];</span><br><span class="line">                <span class="keyword">if</span>(e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    ThreadLocalTest key = e.get();</span><br><span class="line">                    <span class="keyword">if</span>(key != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        Object value = key.childValue(e.value);</span><br><span class="line">                        Entry c = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">                        <span class="keyword">int</span> h = key.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">while</span> (table[h] != <span class="keyword">null</span>)</span><br><span class="line">                            h = nextIndex(h, len);</span><br><span class="line">                        table[h] = c;</span><br><span class="line">                        size++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取和这个entry关联的key,这里只处理直接命中的情况,</span></span><br><span class="line"><span class="comment">         * 其他情况由getEntryAfterMiss处理,这里被设计为最大化直接命中的性能</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> key threadLocalTest 对象</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 与key关联的entry</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocalTest key)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 根据key获取索引</span></span><br><span class="line">            <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">            Entry e = table[i];</span><br><span class="line">            <span class="comment">// 对应的Entry存在并且没有失效且弱引用指向的ThreadLocal就是key,则命中返回</span></span><br><span class="line">            <span class="keyword">if</span>(e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">// 没有直接命中,继续向后找</span></span><br><span class="line">                <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 当getEntry方法没有直接在哈希槽中发现这个值时被调用</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> key threadLocalTest object</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> i key 的 hashcode</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e 在table中的entry</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 返回值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntryAfterMiss</span><span class="params">(ThreadLocalTest key, <span class="keyword">int</span> i, Entry e)</span> </span>&#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 基于线性探测法不断向后探测直到遇到空的entry</span></span><br><span class="line">            <span class="keyword">while</span>(e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ThreadLocalTest k = e.get();</span><br><span class="line">                <span class="comment">// 命中返回</span></span><br><span class="line">                <span class="keyword">if</span>(k == key)</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">                <span class="comment">// key已经被回收,调用expungeStaleEntry清理无效的entry</span></span><br><span class="line">                <span class="keyword">if</span>(k == <span class="keyword">null</span>)</span><br><span class="line">                    expungeStaleEntry(i);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">// 继续往后走</span></span><br><span class="line">                    i = nextIndex(i, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置与这个key关联的值</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> key threadLocalTest 对象</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> value 要关联的值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocalTest key, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这里没有像getEntry的时候一样, 使用一个fast path,</span></span><br><span class="line">            <span class="comment">// 因为使用set去创建一个对象和替换一个已经存在的的对象一样常见</span></span><br><span class="line">            <span class="comment">// 因此, fast path会更容易失败</span></span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line">            <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 线性探测, 基于一个索引向后找</span></span><br><span class="line">            <span class="keyword">for</span>(Entry e = table[i]; e != <span class="keyword">null</span>; e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">                ThreadLocalTest k = e.get();</span><br><span class="line">                <span class="comment">// 找到返回</span></span><br><span class="line">                <span class="keyword">if</span>(k == key) &#123;</span><br><span class="line">                    e.value = value;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 替换失效的entry</span></span><br><span class="line">                <span class="keyword">if</span>(k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    replaceStableEntry(key, value, i);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            table[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">            <span class="keyword">int</span> sz = ++size;</span><br><span class="line">            <span class="keyword">if</span>(!cleanSomeSlots(i,sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">                rehash();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 移除这个key的entry</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ThreadLocalTest key)</span> </span>&#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line">            <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(Entry e = tab[i]; e != <span class="keyword">null</span>; e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">                <span class="comment">// 显示的断开弱引用</span></span><br><span class="line">                e.clear();</span><br><span class="line">                <span class="comment">// 进行段清理</span></span><br><span class="line">                expungeStaleEntry(i);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将set操作期间遇到的陈旧entry替换为指定键的entry。</span></span><br><span class="line"><span class="comment">         * 无论指定键的entry是否已存在，value参数中传递的值都存储在entry中</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 作为副作用，此方法将清除包含所有的过时entry的。两个空槽之间的一系列entry都会被清除</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> value the value associated with key</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> staleSlot 搜索key的时候遇到的第一个陈旧的entry</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceStableEntry</span><span class="params">(ThreadLocalTest key, Object value, <span class="keyword">int</span> staleSlot)</span> </span>&#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line">            Entry e;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 先备份,再清理过时的entry</span></span><br><span class="line">            <span class="comment">// 避免由于GC释放串中的refs（即，每当GC运行时）不断进行增量重复。</span></span><br><span class="line">            <span class="comment">// 向前扫描, 查找最前的一个无效的slot</span></span><br><span class="line">            <span class="keyword">int</span> slotToExpunge = staleSlot;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = prevIndex(staleSlot, len); (e = tab[i]) != <span class="keyword">null</span>; i = prevIndex(i, len)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(e.get() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    slotToExpunge = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Find either the key or trailing null slot of run, whichever</span></span><br><span class="line">            <span class="comment">// occurs first</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = nextIndex(staleSlot, len); (e = tab[i]) != <span class="keyword">null</span>; i = nextIndex(i, len)) &#123;</span><br><span class="line">                ThreadLocalTest k = e.get();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果我们找到键，那么我们需要将它与旧的entry交换以维护哈希表顺序</span></span><br><span class="line">                <span class="comment">// 旧的哈希槽将会被送到expungeStaleEntry去移除或者rehash</span></span><br><span class="line">                <span class="keyword">if</span>(k == key) &#123;</span><br><span class="line">                    <span class="comment">// 更新value的值</span></span><br><span class="line">                    e.value = value;</span><br><span class="line"></span><br><span class="line">                    tab[i] = tab[staleSlot];</span><br><span class="line">                    tab[staleSlot] = e;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 如果存在,就开始擦除前面旧entry</span></span><br><span class="line">                    <span class="comment">// 如果在扫描过程中(一开始的向前扫描和i之前的向后扫描)</span></span><br><span class="line">                    <span class="comment">// 找到了之前的无效slot,则以那个位置作为清理的起点,否则以当前的i作为清理的起点</span></span><br><span class="line">                    <span class="keyword">if</span>(slotToExpunge == staleSlot)</span><br><span class="line">                        slotToExpunge = i;</span><br><span class="line">                    <span class="comment">// 从slotToExpunge开始做一次连续段的清理,再做一次启发式的清理</span></span><br><span class="line">                    cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If we didn't find stale entry on backward scan, the</span></span><br><span class="line">                <span class="comment">// first stale entry seen while scanning for key is the</span></span><br><span class="line">                <span class="comment">// first still present in the run.</span></span><br><span class="line">                <span class="comment">// 如果当前的slot已经无效,并且向前扫描过程中没有无效的slot,则更新slotToExpunge为当前位置</span></span><br><span class="line">                <span class="keyword">if</span>(k == <span class="keyword">null</span> &amp;&amp; slotToExpunge == staleSlot)</span><br><span class="line">                    slotToExpunge = i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果没有发现key, 把新的entry放到旧的槽中</span></span><br><span class="line">            tab[staleSlot].value = <span class="keyword">null</span>;</span><br><span class="line">            tab[staleSlot] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If there are any other stale entries in run, expunge them</span></span><br><span class="line">            <span class="comment">// 如果当前的slot已经无效,并且向前扫描过程中没有无效的slot,则做一次清理</span></span><br><span class="line">            <span class="keyword">if</span>(slotToExpunge != staleSlot)</span><br><span class="line">                cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 核心清理函数 从staleSlot开是遍历,将无效(弱引用指向对象被回收)的entry清理(先将对应的value置空,再将table[i]置空,直到扫到空的entry)</span></span><br><span class="line"><span class="comment">         * 另外,对非空的entry做rehash</span></span><br><span class="line"><span class="comment">         * 这个函数的作用: 从staleSlot开始清理连续段的slot(断开强引用 rehash slot)</span></span><br><span class="line"><span class="comment">         * -----------</span></span><br><span class="line"><span class="comment">         * 通过重新处理staleSlot和下一个空槽之间的任何可能碰撞的条目来清除过时的entry</span></span><br><span class="line"><span class="comment">         * 这也会删除在尾随空值之前遇到的任何其他陈旧entry</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> staleSlot</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expungeStaleEntry</span><span class="params">(<span class="keyword">int</span> staleSlot)</span> </span>&#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 擦除旧的槽中的entry,显示的断开强引用</span></span><br><span class="line">            tab[staleSlot].value = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 显示的设置entry为null, 以便于垃圾回收</span></span><br><span class="line">            tab[staleSlot] = <span class="keyword">null</span>;</span><br><span class="line">            size--;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// rehash直到遇到null</span></span><br><span class="line">            Entry e;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="comment">// 从i开始连续清理直到遇到为null的entry</span></span><br><span class="line">            <span class="keyword">for</span>(i = nextIndex(staleSlot, len); (e = tab[i]) != <span class="keyword">null</span>; i = nextIndex(i ,len)) &#123;</span><br><span class="line">                ThreadLocalTest k = e.get();</span><br><span class="line">                <span class="keyword">if</span>(k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    e.value = <span class="keyword">null</span>;</span><br><span class="line">                    tab[i] = <span class="keyword">null</span>;</span><br><span class="line">                    size--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * 对于还没有被回收的情况,需要做一次rehash</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 如果rehash后,新的hashcode h != i, 则从h向后线性探测到第一个空的slot,把当前的entry放进去</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(h != i) &#123;</span><br><span class="line">                        tab[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Unlike Knuth 6.4 Algorithm R, we must scan until</span></span><br><span class="line">                        <span class="comment">// null because multiple entries could have been stale.</span></span><br><span class="line">                        <span class="comment">// 源码注释表示: 不能套用Knuth高德纳的著作TAOCP6.4章中的R算法</span></span><br><span class="line">                        <span class="comment">// R算法描述了如何从使用线性探测的散列表中删除一个元素, R算法维护了一个上次删除元素的index,</span></span><br><span class="line">                        <span class="comment">// 当在某个非空连续段中扫描到某个entry的哈希值取模后的索引,还没遍历到时, 会将entry挪到index那个位置,并且</span></span><br><span class="line">                        <span class="comment">// 更新当前位置为新的index,然后继续向后扫描直到遇到空的entry</span></span><br><span class="line">                        <span class="comment">// 由于使用了弱引用,每个slot的状态有 有效,无效,空,不能直接使用R算法</span></span><br><span class="line">                        <span class="comment">// expungeStaleEntry函数在扫描过程中会对无效的slot清理将之转换为空的slot</span></span><br><span class="line">                        <span class="comment">// 直接使用R算法, 可能会出现具有相同的哈希值的entry之间断开(中间有空的entry)</span></span><br><span class="line">                        <span class="keyword">while</span> (tab[h] != <span class="keyword">null</span>)</span><br><span class="line">                            h = nextIndex(h, len);</span><br><span class="line">                        tab[h] = e;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 返回staleSlot之后第一个空的slot索引</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 启发式扫描一些旧的entry的slot。</span></span><br><span class="line"><span class="comment">         * 添加新元素或删除另一个旧元素时会调用此方法。</span></span><br><span class="line"><span class="comment">         * 它执行对数扫描，作为无扫描（快速但保留垃圾）和与元素数量成比例的多个扫描之间的平衡，</span></span><br><span class="line"><span class="comment">         * 这将找到所有垃圾但会导致一些插入花费O（n）时间。</span></span><br><span class="line"><span class="comment">         * 这个函数会有两处会被调用, 一处是插入的时候可能会被调用,另外是在替换无效slot的时候可能会被调用</span></span><br><span class="line"><span class="comment">         * 区别是前者传入的n为元素的个数, 后者为table的容量</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> i 一个已知没有旧的entry的位置。 扫描从i之后的元素开始。</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> n 扫描控制次数 正常情况下,如果扫描了log n次,没有发现无效的slot,函数也就结束了</span></span><br><span class="line"><span class="comment">         *          但这里如果发现了无效的slot,会将n置为table的长度len,做一次连续段的清理,再从下一个空的slot开始继续扫描</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>  true if any stale entries have been removed.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">cleanSomeSlots</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">// i 在任何情况下自己都不会是一个无效的slot,所以从下一个开始判断</span></span><br><span class="line">                i = nextIndex(i, len);</span><br><span class="line">                Entry e = tab[i];</span><br><span class="line">                <span class="keyword">if</span>(e != <span class="keyword">null</span> &amp;&amp; e.get() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    n = len;</span><br><span class="line">                    removed = <span class="keyword">true</span>;</span><br><span class="line">                    i = expungeStaleEntry(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((n &gt;&gt;&gt;= <span class="number">1</span>) != <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> removed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 首先扫描整个表,删除无用的entry</span></span><br><span class="line"><span class="comment">         * 如果不足以缩小表的大小, 则表的大小加倍</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            expungeStaleEntries();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(size &gt;= threshold - threshold / <span class="number">4</span>) &#123;</span><br><span class="line">                resize();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 扩容</span></span><br><span class="line"><span class="comment">         * 表的容量加倍</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Entry[] oldTab = table;</span><br><span class="line">            <span class="keyword">int</span> oldLen = oldTab.length;</span><br><span class="line">            <span class="keyword">int</span> newLen = oldLen * <span class="number">2</span>;</span><br><span class="line">            Entry[] newTab = <span class="keyword">new</span> Entry[newLen];</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldLen; ++j) &#123;</span><br><span class="line">                Entry e = oldTab[j];</span><br><span class="line">                <span class="keyword">if</span>(e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    ThreadLocalTest k = e.get();</span><br><span class="line">                    <span class="keyword">if</span>(k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        e.value = <span class="keyword">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (newLen - <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">while</span> (newTab[h] != <span class="keyword">null</span>)</span><br><span class="line">                            h = nextIndex(h, newLen);</span><br><span class="line">                        newTab[h] = e;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            setThreshold(newLen);</span><br><span class="line">            size = count;</span><br><span class="line">            table = newTab;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 擦除表中的所有的无用的节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expungeStaleEntries</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                Entry e = tab[j];</span><br><span class="line">                <span class="keyword">if</span>(e != <span class="keyword">null</span> &amp;&amp; e.get() == <span class="keyword">null</span>)</span><br><span class="line">                    expungeStaleEntry(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考内容: <br><a href="http://www.blogjava.net/DLevin/archive/2012/11/02/390637.html" target="_blank" rel="noopener">http://www.blogjava.net/DLevin/archive/2012/11/02/390637.html</a> <br> <a href="https://my.oschina.net/huangy/blog/1619144" target="_blank" rel="noopener">https://my.oschina.net/huangy/blog/1619144</a> <br> 拉链法: <a href="http://www.cnblogs.com/lizhanwu/p/4303410.html" target="_blank" rel="noopener">http://www.cnblogs.com/lizhanwu/p/4303410.html</a> <br> 为啥是31: <a href="https://blog.csdn.net/qq_38182963/article/details/78940047" target="_blank" rel="noopener">https://blog.csdn.net/qq_38182963/article/details/78940047</a> <br><a href="https://stackoverflow.com/questions/299304/why-does-javas-hashcode-in-string-use-31-as-a-multiplier%EF%BC%89" target="_blank" rel="noopener">https://stackoverflow.com/questions/299304/why-does-javas-hashcode-in-string-use-31-as-a-multiplier%EF%BC%89</a> <br> <a href="https://crossoverjie.top/2018/07/23/java-senior/ConcurrentHashMap/" target="_blank" rel="noopener">https://crossoverjie.top/2018/07/23/java-senior/ConcurrentHashMap/</a> <br> <a href="https://www.cnblogs.com/chenssy/p/3521565.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenssy/p/3521565.html</a> <br> ThreadLocal解释: <a href="https://www.cnblogs.com/micrari/p/6790229.html" target="_blank" rel="noopener">https://www.cnblogs.com/micrari/p/6790229.html</a> <br> java中的引用:<a href="https://www.cnblogs.com/huajiezh/p/5835618.html" target="_blank" rel="noopener">https://www.cnblogs.com/huajiezh/p/5835618.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      jdK中的几种map的实现的源码注释,会一直更新
    
    </summary>
    
      <category term="hashMap" scheme="https://zonzie.gitee.io/categories/hashMap/"/>
    
    
      <category term="hash算法" scheme="https://zonzie.gitee.io/tags/hash%E7%AE%97%E6%B3%95/"/>
    
      <category term="HashMap" scheme="https://zonzie.gitee.io/tags/HashMap/"/>
    
      <category term="threadLocal" scheme="https://zonzie.gitee.io/tags/threadLocal/"/>
    
  </entry>
  
  <entry>
    <title>redis实现分布式锁</title>
    <link href="https://zonzie.gitee.io/2018/08/13/redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://zonzie.gitee.io/2018/08/13/redis实现分布式锁/</id>
    <published>2018-08-13T01:49:26.000Z</published>
    <updated>2018-10-22T10:38:38.756Z</updated>
    
    <content type="html"><![CDATA[<h4 id="redis实现分布式锁"><a href="#redis实现分布式锁" class="headerlink" title="redis实现分布式锁"></a>redis实现分布式锁</h4><h5 id="基本的实现思路"><a href="#基本的实现思路" class="headerlink" title="基本的实现思路"></a>基本的实现思路</h5><ul><li>一个线程,在redis中存入一个加锁的key,和一个特有的value,表示获取到了锁</li><li>线程需要加锁的操作结束后, 再删除这个key,删除之前需要比对value是否一致</li><li>其他线程在操作相同的资源之前,也去存入相同的key,如果这个key已经存在,则存入key失败,即获取锁失败,一直重试直到获取锁成功,或者达到超时时间放弃获取锁</li></ul><h5 id="redis实现的并不可靠的方法"><a href="#redis实现的并不可靠的方法" class="headerlink" title="redis实现的并不可靠的方法"></a>redis实现的并不可靠的方法</h5><ul><li>这里使用的spring提供的redisTemplate,需要做一些简单的配置</li><li><p>由于redisTemplate没有提供同时设置<code>NX</code>,<code>PX</code>参数的方法,因此这里使用lua脚本实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"lock"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">lock</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">    String script = <span class="string">"local key = KEYS[1]; local value = ARGV[1]; if redis.call('set', key, value, 'NX' ,'PX', 5000) then return 1 else return 0 end"</span>;</span><br><span class="line">    DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(script, Long.class);</span><br><span class="line">    Object execute = redisTemplate.execute(redisScript, Collections.singletonList(key), Collections.singletonList(value));</span><br><span class="line">    System.out.println(execute);</span><br><span class="line">    <span class="keyword">return</span> execute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阻塞锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"blockLock"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">blockLock</span><span class="params">(String key, String value)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 被阻塞的时间超过5秒就停止获取锁</span></span><br><span class="line">    <span class="keyword">int</span> blockTime = <span class="number">5000</span>;</span><br><span class="line">    <span class="comment">// 默认的间隔时间</span></span><br><span class="line">    <span class="keyword">int</span> defaultTime = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        <span class="keyword">if</span>(blockTime &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            String script = <span class="string">"local key = KEYS[1]; local value = ARGV[1]; if redis.call('set', key, value, 'NX' ,'PX', 5000) then return 1 else return 0 end"</span>;</span><br><span class="line">            DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(script, <span class="keyword">long</span>.class);</span><br><span class="line">            Long result = redisTemplate.execute(redisScript, Collections.singletonList(key), value);</span><br><span class="line">            System.out.println(<span class="string">"try lock ... ,result: "</span>+result);</span><br><span class="line">            <span class="keyword">if</span>(result != <span class="keyword">null</span> &amp;&amp; result == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 得到了锁</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"lock success"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                blockTime -= defaultTime;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 已经超时</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"lock timeout..., please retry later..."</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"unlock"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">unlock</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">    String script = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del',KEYS[1]) else return 0 end"</span>;</span><br><span class="line">    DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(script, Long.class);</span><br><span class="line">    Long execute = redisTemplate.execute(redisScript, Collections.singletonList(key), value);</span><br><span class="line">    System.out.println(<span class="string">"unlock result: "</span>+execute);</span><br><span class="line">    <span class="keyword">if</span>(execute != <span class="keyword">null</span> &amp;&amp; execute != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 解锁成功</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"unlock success"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"unlock failed"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>缺点: 仅适合没有slave的单节点redis,因为slave和master之间的数据是异步复制的,有可能并不一致,只要不是单节点,不推荐使用</p></li></ul><h5 id="redis官方推荐的方法-redLock"><a href="#redis官方推荐的方法-redLock" class="headerlink" title="redis官方推荐的方法-redLock"></a>redis官方推荐的方法-redLock</h5><h6 id="redLock-参考文档-https-redis-io-topics-distlock"><a href="#redLock-参考文档-https-redis-io-topics-distlock" class="headerlink" title="redLock-参考文档:https://redis.io/topics/distlock"></a>redLock-参考文档:<a href="https://redis.io/topics/distlock" target="_blank" rel="noopener">https://redis.io/topics/distlock</a></h6><ul><li>redis把分布式锁的算法称之为redLock-红锁, 红锁需要N个(N&gt;=3)redis独立节点,节点之间没有任何联系,保持独立即可.</li><li>基本实现思路: 客户端在每个redis实例上获取锁,只要大多数实例上获取锁成功就算加锁成功, redLock的算法实现各种语言的版本有很多,java的实现是redisson,可以直接引入使用</li><li>客户端获取锁的基本流程<ul><li>首先客户端记录当前的时间,用于计算获取锁的耗时</li><li>客户端使用相同的key和随机的value,从所有的redis节点上获取锁.客户端在每个实例上设置锁的过程,需要设置超时时间(5-50ms),不成功就换下一个实例继续设置锁,用来防止客户端阻塞在一个down掉的实例上</li><li>客户端需要计算获得锁的总耗时.客户端从至少N/2+1个节点上成功获取锁,且总耗时小于锁过期时间才能成功获得锁</li><li>客户端获得锁之后,该锁的有效期不再是最初的过期时间,因为客户端要从多个节点上获得锁,需要去掉这些过程耗时</li><li>如果客户端最终获得锁失败,必须在所有的节点上执行锁释放的操作</li><li>执行完毕后,主动释放所有的节点上的锁</li></ul></li><li>redLock保证了<ul><li>锁的互斥性,同一时间只能有一个锁</li><li>不会死锁</li><li>多节点容错,只要大部分节点获取锁成功就算得到了锁</li></ul></li><li><p>使用redisson的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Config config = <span class="keyword">new</span> Config();</span><br><span class="line">config.useSingleServer().setAddress(<span class="string">"redis://192.168.198.128:6379"</span>);</span><br><span class="line">RedissonClient redisson1 = Redisson.create(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同样的方法再创建两个新的连接  redisson2, redisson3</span></span><br><span class="line">RLock lock1 = redisson1.getLock(<span class="string">"resource"</span>);</span><br><span class="line">RLock lock2 = redisson2.getLock(<span class="string">"resource"</span>);</span><br><span class="line">RLock lock3 = redisson3.getLock(<span class="string">"resource"</span>);</span><br><span class="line">RedissonRedLock lock = <span class="keyword">new</span> RedissonRedLock(lock1, lock2, lock3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line"><span class="keyword">boolean</span> res = lock.tryLock(WAIT_TIME, TIME_OUT, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure></li><li><p>一个简单的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonRedLocker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WAIT_TIME = <span class="number">10</span>; <span class="comment">// 10s</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> TIME_OUT = <span class="number">10</span>; <span class="comment">// 10s</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_NODES_URL = <span class="string">"ip1:port,ip2:port,ip3:port"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RedissonClient[] clients;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        initRedisInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initRedisInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] redisAddrs = REDIS_NODES_URL.split(<span class="string">","</span>);</span><br><span class="line">        List&lt;RedissonClient&gt; list = <span class="keyword">new</span> ArrayList&lt;RedissonClient&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String addr: redisAddrs) &#123;</span><br><span class="line">            list.add(getRedisInstance(addr));</span><br><span class="line">        &#125;</span><br><span class="line">        clients = list.toArray(clients);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> RedissonClient <span class="title">getRedisInstance</span><span class="params">(String addr)</span> </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">"redis://"</span> + addr);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> RedissonRedLock <span class="title">getRedLock</span><span class="params">(String resource)</span> </span>&#123;</span><br><span class="line">        List&lt;RLock&gt; locks = <span class="keyword">new</span> ArrayList&lt;RLock&gt;();</span><br><span class="line">        <span class="keyword">for</span>(RedissonClient client : clients) &#123;</span><br><span class="line">            locks.add(client.getLock(resource));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedissonRedLock((RLock[]) locks.toArray());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(RedissonRedLock lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> res = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            res = lock.tryLock(WAIT_TIME, TIME_OUT, TimeUnit.SECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>参考内容: <br><a href="http://baijiahao.baidu.com/s?id=1596540166265981065&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">http://baijiahao.baidu.com/s?id=1596540166265981065&amp;wfr=spider&amp;for=pc</a> <br> <a href="https://blog.csdn.net/l1028386804/article/details/73523810" target="_blank" rel="noopener">https://blog.csdn.net/l1028386804/article/details/73523810</a> <br> <a href="https://crossoverjie.top/2018/03/29/distributed-lock/distributed-lock-redis/" target="_blank" rel="noopener">https://crossoverjie.top/2018/03/29/distributed-lock/distributed-lock-redis/</a> <br> <a href="https://blog.csdn.net/forezp/article/details/70305336" target="_blank" rel="noopener">https://blog.csdn.net/forezp/article/details/70305336</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      使用redis实现分布式锁的方法
    
    </summary>
    
      <category term="redis" scheme="https://zonzie.gitee.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://zonzie.gitee.io/tags/redis/"/>
    
      <category term="分布式" scheme="https://zonzie.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="lock" scheme="https://zonzie.gitee.io/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>Lua语法基础</title>
    <link href="https://zonzie.gitee.io/2018/08/09/Lua%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <id>https://zonzie.gitee.io/2018/08/09/Lua语法基础/</id>
    <published>2018-08-09T09:30:30.000Z</published>
    <updated>2018-10-22T10:38:38.749Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h4><ul><li>单行注释: 两个减号</li><li><p>多行注释: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--[[</span><br><span class="line"> 多行注释</span><br><span class="line"> 多行注释</span><br><span class="line">]]--</span><br></pre></td></tr></table></figure></li><li><p>标示符: 不允许使用@$%等特殊字符,并且区分大小写</p></li><li>关键字: 与一般与语言差别不大,特别的有until,elseif</li><li>全局变量: 默认情况下,变量总是全局变量,变量不需要声明,没有初始化也不会错,只不过得到的结果是nil,删除一个全局变量,只需要给它赋值nil</li><li><p>数据类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nil 表示一个无效值</span><br><span class="line">boolean 布尔类型:true/false</span><br><span class="line">number 表示双精度类型的实浮点数</span><br><span class="line">string 字符串由一对双引号或者单引号来表示</span><br><span class="line">function 由C或者Lua编写的函数</span><br><span class="line">userdata 表示任意存储在变量中的C数据结构</span><br><span class="line">thread 表示执行的独立线路,用于执行协同程序</span><br><span class="line">table Lua中的表其实是一个&quot;关联数组&quot;,表的创建通过&quot;构造表达式&quot;来完成</span><br></pre></td></tr></table></figure></li><li><p>nil 打印一个没有赋值的变量,会输出nil</p><ul><li>对于table和全局变量,nil有删除的作用</li><li>nil比较时应该加上双引号: <code>type(x)==&quot;nil&quot;</code>  输出true</li></ul></li><li><p>boolean 布尔</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">false</span> <span class="keyword">or</span> <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"至少一个是true"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"false和nil都为false"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p><strong>string 字符串类型</strong></p><ul><li>可以用一对双引号或者单引号来表示</li><li>也可以用两个方括号来表示”一块”字符串</li><li>在对一个数字字符串进行运算时,lua会尝试将这个数字字符串转为数字<ul><li><code>print(&quot;2&quot; + 6)</code>&rArr;8.0</li></ul></li><li>连接两个字符串使用” .. “:<ul><li><code>print(&quot;a&quot; .. &#39;b&#39;)</code>&rArr;ab</li><li><code>print(123 .. 1243)</code>&rArr;1231243</li></ul></li><li>使用#来计算字符串的长度,放在字符串的前面<ul><li>len = “helloworld”</li><li>print(#len)&rArr;10</li></ul></li></ul></li><li><strong>table 表</strong><ul><li>创建一个空的表: local tbl1 = {}</li><li>直接初始化: local tbl2 = {“apple”, “grape”}</li><li>table不会固定长度大小,有新的数据时table长度会自动增长</li></ul></li><li><p><strong>function 函数</strong></p><ul><li>在Lua中,函数被看作是”第一类值”,可以存在变量里<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial1</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n * factorial1(n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(factorial1(<span class="number">5</span>))</span><br><span class="line">factorial2 = factorial1</span><br><span class="line"><span class="built_in">print</span>(factorial2(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ------------------------------</span></span><br><span class="line"><span class="comment">-- 通过匿名函数的方式传参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFun</span><span class="params">(tab,fun)</span></span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(fun(k,v));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">tab=&#123;key1=<span class="string">"var1"</span>,key2=<span class="string">"val2"</span>&#125;</span><br><span class="line">testFun(tab,</span><br><span class="line">    <span class="function"><span class="keyword">function</span><span class="params">(key,val)</span></span></span><br><span class="line">        <span class="keyword">return</span> key..<span class="string">"="</span>..val;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>thread 线程</strong></p><ul><li>在 Lua 里，最主要的线程是协同程序（coroutine）。它跟线程（thread）差不多，拥有自己独立的栈、局部变量和指令指针，可以跟其他协同程序共享全局变量和其他大部分东西。</li><li>线程跟协程的区别：线程可以同时多个运行，而协程任意时刻只能运行一个，并且处于运行状态的协程只有被挂起（suspend）时才会暂停。</li></ul></li><li><strong>userdata 自定义类型</strong><ul><li>userdata 是一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型，可以将任意 C/C++ 的任意数据类型的数据（通常是 struct 和 指针）存储到 Lua 变量中调用。</li></ul></li><li><strong>lua中的变量</strong><ul><li>共有三种变量: 全局变量,局部变量,表中的域</li><li>lua中所有的变量都是全局变量,哪怕是语句块或者函数里,除非用local显示的声明为局部变量</li><li>局部变量的作用域为从声明位置开始到所在的语句块结束</li><li>变量的默认值均为nil</li></ul></li><li><strong>赋值语句:</strong><ul><li>lua可以对多个变量同时赋值,<code>a = &quot;hello&quot; .. &quot;world&quot;</code>,<code>a,b = 10,2*x</code>, <code>x,y = y,x</code></li><li>当变量的个数和值的个数不一致时, lua会以变量个数为基础采取以下策略<ol><li>变量个数 &gt; 值的个数 –&gt; 按照变量个数补足nil</li><li>变量个数 &lt; 值得个数 –&gt; 多余得值会被忽略</li></ol></li></ul></li><li><strong>索引</strong><ul><li>对table的索引使用[]<ol><li>t[i]</li><li>t.i</li></ol></li></ul></li><li><p><strong>循环</strong></p><ul><li>几种方式:<ul><li>while 循环</li><li>for循环</li><li>repeat..until</li><li>循环嵌套</li></ul></li><li>循环控制:<ul><li><code>break</code><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"循环将永远执行下去"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>流程控制</strong></p><ul><li><p>控制结构的条件表达式结果可以是任何值, lua认为false和nil为假,true和非nil为真,所以lua中0也是真</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[ 0 为 true ]</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"0为true"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>lua中的控制结构的语句</p><ul><li>if语句</li><li>if..else 语句</li><li>if嵌套语句</li></ul></li></ul></li><li><p><strong>函数定义</strong></p>  <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">optional_function_scope function_name(argument1, argument2,argument3...,argumentn)</span><br><span class="line">    function_body</span><br><span class="line">    <span class="keyword">return</span> result_params_comma_separated</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>解析<ul><li>optional_function_scope: 该参数是可选的, 制定行函数是全局函数还是局部函数,未设置参数则默认是全局的,局部函数需要使用关键字local</li><li>function_name: 指定函数的名称</li><li>argument1,argument2,argument3…,函数的参数,会以逗号隔开</li><li>function_body: 函数体,函数中需要执行的代码语句块</li><li>result_params_comma_separated: 函数返回值,Lua语言函数可以返回多个值, 以逗号隔开</li></ul></li><li><p>实例</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[ 函数返回两个值的最大值 --]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span><span class="params">(num1, num2)</span></span></span><br><span class="line">    <span class="keyword">if</span>(num1 &gt; num2) <span class="keyword">then</span></span><br><span class="line">        result = num1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        result = num2;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 调用函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"两个值比较最大值为 "</span>, <span class="built_in">max</span>(<span class="number">10</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"两个值比较最大值为 "</span>, <span class="built_in">max</span>(<span class="number">5</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure></li><li><p><strong>lua中,将函数作为参数传递给函数</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">myprint = <span class="function"><span class="keyword">function</span><span class="params">(param)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"这是打印函数 - ##"</span>, param, <span class="string">"##"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(num1, num2, functionPrint)</span></span></span><br><span class="line">    result = num1 + num2</span><br><span class="line">    <span class="comment">-- 调用传递的函数参数</span></span><br><span class="line">    functionPrint(result)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">myprint(<span class="number">10</span>)</span><br><span class="line"><span class="comment">-- myprint 函数作为参数传递</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">5</span>,myprint)</span><br></pre></td></tr></table></figure></li><li><p><strong>多返回值</strong></p><ul><li><p>lua函数可以返回多个结果值,比如string.find,其返回匹配串”开始和结束的下标”(如果不存在匹配串返回nil)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; s,e = string.find(&quot;www.runoob.com&quot;,&quot;runoob&quot;)</span><br><span class="line">&gt; print(s,e)</span><br><span class="line">5, 10</span><br></pre></td></tr></table></figure></li><li><p>lua函数中, 在return后列出要返回的值的列表即刻返回多值</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maximun</span><span class="params">(a)</span></span></span><br><span class="line">    <span class="keyword">local</span> mi = <span class="number">1</span> <span class="comment">-- 最大值索引</span></span><br><span class="line">    <span class="keyword">local</span> m = a[mi] <span class="comment">-- 最大值</span></span><br><span class="line">    <span class="keyword">for</span> i, val <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> val &gt; m <span class="keyword">then</span></span><br><span class="line">            mi = i</span><br><span class="line">            m = val</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> m, mi</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(maximun(&#123;<span class="number">8</span>,<span class="number">10</span>,<span class="number">23</span>,<span class="number">12</span>,<span class="number">5</span>&#125;))</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>可变参数</strong></p><ul><li>lua函数可以接受可变数目的参数,和C类似,在函数参数列表中使用<code>...</code> 表示有可可变的参数<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(...)</span></span></span><br><span class="line"><span class="keyword">local</span> s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>&#123;...&#125; <span class="keyword">do</span> <span class="comment">--&gt; &#123;...&#125;表示一个由所有的变长的参数构成的数组</span></span><br><span class="line">        s = s + v</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">33</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)) <span class="comment">---&gt; 25</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>我们可以将可变参数赋值给一个变量</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">average</span><span class="params">(...)</span></span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">arg</span>=&#123;...&#125; <span class="comment">---&gt; arg为一个局部表,局部变量</span></span><br><span class="line">    <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(<span class="built_in">arg</span>) <span class="keyword">do</span></span><br><span class="line">        result = result + v</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"总共传入 "</span>.. #<span class="built_in">arg</span> .. <span class="string">"个数"</span>)</span><br><span class="line">    <span class="keyword">return</span> result/#<span class="built_in">arg</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"平均值为"</span>,average(<span class="number">10</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">// <span class="comment">-------------</span></span><br><span class="line">执行结果为:</span><br><span class="line">总共传入 <span class="number">6</span> 个数</span><br><span class="line">平均值为 <span class="number">5.5</span></span><br><span class="line"></span><br><span class="line">// <span class="comment">------------------------</span></span><br><span class="line"><span class="comment">-- 有时候我们可能需要几个固定参数加上可变参数,固定参数必须放在变长参数之前:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fwrite</span><span class="params">(fmt, ...)</span></span> <span class="comment">-- -&gt; 固定参数fmt</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(fmt, ...))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fwrite(<span class="string">"runoob\n"</span>) <span class="comment">-- -&gt; fmt = "runoob", 没有变长参数</span></span><br><span class="line">fwrite(<span class="string">"%d%d\n"</span>,<span class="number">1</span>,<span class="number">2</span>) <span class="comment">-- &gt; fmt = "%d%d", 变长参数为1和2</span></span><br></pre></td></tr></table></figure></li><li><p>通常在遍历变长参数的时候只需要使用{…}, 然而变长参数可能会包含一些nil, 那么就可以用select函数来访问变长参数了: select(‘#’, …) 或者 select(n, …)</p><ul><li>select(‘#’, …) 返回可变参数的长度</li><li>select(n, …) 用于访问n到select(‘#’, …)的参数</li></ul></li><li>调用select时, 必须传入一个固定实参selector(选择开关)和一系列变长参数,如果selector为数字n,那么select返回它的第n个可变实参,否则只能为字符串”#”,这样select会返回变长参数的总数<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(...)</span></span></span><br><span class="line">        <span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">select</span>(<span class="string">'#'</span>, ...) <span class="keyword">do</span> <span class="comment">-- -&gt; 获取参数总数</span></span><br><span class="line">            <span class="keyword">local</span> <span class="built_in">arg</span> = <span class="built_in">select</span>(i, ...); <span class="comment">-- -&gt; 读取参数</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"arg"</span>, <span class="built_in">arg</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>常用的字符串的操作</strong></p><ul><li><code>string.upper(argument)</code>: 字符串全部转为大写字母</li><li><code>string.lower(argument)</code>: 字符串转换为小写字母</li><li><code>string.gsub(mainString,findString,num)</code>: 在字符串中替换, mainString为要替换的字符串,findString为被替换的字符,replaceString要替换的字符, num替换次数(可以忽略,则全部忽略)<br><code>string.gsub(&quot;aaaa&quot;,&quot;a&quot;,&quot;z&quot;,3)</code></li><li><code>string.find(str,substr,[init,[end]])</code>: 在一个指定的目标字符串中搜索指定的内容(第三个参数为索引),返回其具体位置,不存在就返回nil</li><li><code>string.reverse(&quot;Lua&quot;)</code>: 字符串的反转</li><li><code>string.format(..)</code>: 返回一个类似printf的格式化字符串</li><li><code>string.char(arg)</code>和<code>string.byte(arg[,int])</code>: char将整型数字转成支付并连接,byte转换字符为整数值(可以指定某个字符,默认第一个字符)</li><li><code>string.len(arg)</code>: 计算字符串长度</li><li><code>string.rep(string,n)</code>: 返回字符串string的n个拷贝</li><li><p><code>string.gmatch(str,pattern)</code>: 回一个迭代器函数，每一次调用这个函数，返回一个在字符串 str 找到的下一个符合 pattern 描述的子串。如果参数 pattern 描述的字符串没有找到，迭代函数返回nil</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(<span class="string">"Hello Lua user"</span>,<span class="string">"%a+"</span>) <span class="keyword">do</span> <span class="built_in">print</span>(word) <span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p><code>string.match(str, pattern, init)</code>: string.match()只寻找源字串str中的第一个配对. 参数init可选, 指定搜寻过程的起点, 默认为1. 在成功配对时, 函数将返回配对表达式中的所有捕获结果; 如果没有设置捕获标记, 则返回整个配对字符串. 当没有成功的配对时, 返回nil。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>.<span class="built_in">match</span>(<span class="string">"I have 2 questions for you."</span>, <span class="string">"%d+ %a+"</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>lua迭代器</strong></p><ul><li><p>泛型for迭代器,泛型 for 在自己内部保存迭代函数，实际上它保存三个值：迭代函数、状态常量、控制变量。泛型 for 迭代器提供了集合的 key/value 对</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法格式</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- k,v 为变量列表,pairs为表达式列表</span></span><br><span class="line"><span class="comment">-- 例子</span></span><br><span class="line">array = &#123;<span class="string">"Lua"</span>, <span class="string">"Tutorial"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> <span class="built_in">ipairs</span>(array)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(key,value)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p><strong>泛型for的执行过程</strong></p><ol><li>初始化，计算in后面表达式的值，表达式应该返回泛型 for 需要的三个值：迭代函数、状态常量、控制变量；与多值赋值一样，如果表达式返回的结果个数不足三个会自动用nil补足，多出部分会被忽略</li><li>将状态常量和控制变量作为参数调用迭代函数（注意：对于for结构来说，状态常量没有用处，仅仅在初始化时获取他的值并传递给迭代函数）</li><li>将迭代函数返回的值赋给变量列表</li><li>如果返回的第一个值为nil循环结束，否则执行循环体</li><li>回到第二步再次调用迭代函数</li></ol></li><li><p><strong>无状态迭代器</strong></p><blockquote><p>无状态迭代器是指不保留任何状态的迭代器,因此在循环中我们可以利用无状态迭代器避免创建闭包花费额外的代价,每一次迭代,迭代函数都是用两个变量(状态常量和控制常量)的值作为参数被调用,一个无状态的迭代器只利用这两个值可以获取下一个元素</p></blockquote>  <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用一个简单的函数来实现迭代器,实现数字n的平方:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span><span class="params">(iteratorMaxCount,currentNumber)</span></span></span><br><span class="line">    <span class="keyword">if</span> currentNumber &lt; iteratorMaxCount</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        currentNumber = currentNumber + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> currentNumebr, currentNumber*currentNumber</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,n <span class="keyword">in</span> square,<span class="number">3</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">print</span>(i,n)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 迭代的状态包括被遍历的表(循环过程中不会改变的状态的常量)和当前的索引的下标(控制变量),ipairs和迭代函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iter</span><span class="params">(a,i)</span></span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">local</span> v = a[i]</span><br><span class="line">    <span class="keyword">if</span> v <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> i,v</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ipairs</span><span class="params">(a)</span></span></span><br><span class="line">    <span class="keyword">return</span> iter, a, <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 当Lua调用ipairs(a)开始循环时，他获取三个值：迭代函数iter、状态常量a、控制变量初始值0；然后Lua调用iter(a,0)返回1,a[1]（除非a[1]=nil）；第二次迭代调用iter(a,1)返回2,a[2]……直到第一个nil元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>多状态的迭代器</strong></p><blockquote><p>很多情况下,迭代器需要保存多个状态信息而不是简单的状态常量和控制变量,,还有一种方法是将所有的状态信息封装到table内,将table作为迭代器的状态常量,因为这种情况下可以将所有的信息存放在table内,所以迭代函数通常不需要第二个参数</p></blockquote>  <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建自己的迭代器</span></span><br><span class="line">array = &#123;<span class="string">"lua"</span>,<span class="string">"tutorial"</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">elementIterator</span><span class="params">(collection)</span></span> </span><br><span class="line">    <span class="keyword">local</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> count = #collection</span><br><span class="line">    <span class="comment">-- 闭包函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> </span><br><span class="line">            index &lt;= count</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="comment">-- 返回迭代器的当前的元素</span></span><br><span class="line">            <span class="keyword">return</span> collection[index]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elementIterator(array)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(element)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>table表</strong></p><blockquote><p>table 是lua的一种数据结构用来帮我们创建不同的数据类型,如:数组,字典等<br>lua table 使用关联型数组,你可以用任意类型的值来做数组恩典索引,但是这个值不能是nil<br>lua也是通过table来解决模块(module),包(package)和对象(Object)的</p></blockquote>  <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 初始化表</span></span><br><span class="line">mytable = &#123;&#125;</span><br><span class="line"><span class="comment">-- 指定值</span></span><br><span class="line">mytable[<span class="number">1</span>] = <span class="string">"lua"</span></span><br><span class="line"><span class="comment">-- 移除引用</span></span><br><span class="line">mytable = <span class="literal">nil</span></span><br><span class="line"><span class="comment">-- lua垃圾回收会释放内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--------------------------------------</span></span><br><span class="line"><span class="comment">-- 我们为a设置元素,然后将a赋值给b,则a与b都指向同一个内存.如果a设置为nil,则b同样能访问table元素.如果没有指定的变量指向a,lua的垃圾回收机制会清理相对应的内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 简单的table</span></span><br><span class="line">mytable = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"mytable的类型是 "</span>,<span class="built_in">type</span>(mytable))</span><br><span class="line">mytable[<span class="number">1</span>] = <span class="string">"lua"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"mytable 索引为1的元素是:"</span>,mytable[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"mytable 索引为wow的元素是"</span>,mytable[<span class="string">"wow"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">-- alternatetable和mytable是指向同一个table</span></span><br><span class="line">alternatetable = mytable</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"alternatetable索引为1的元素是 "</span>, alternatetable[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"mytable索引为wow的元素是 "</span>,alternatetable[<span class="string">"wow"</span>])</span><br><span class="line"></span><br><span class="line">alternatetable[<span class="string">"wow"</span>] = <span class="string">"修改后"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"mytable索引为wow的元素是 "</span>,mytable[<span class="string">"wow"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 释放变量</span></span><br><span class="line">alternatetable = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"alternatetable是 "</span>,alternatetable)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- mytable 仍然可以访问</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"mytable索引为wow的元素是 "</span>, mytable[<span class="string">"wow"</span>])</span><br><span class="line"></span><br><span class="line">mytbale = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"mytable是 "</span>,mytable)</span><br></pre></td></tr></table></figure></li><li><p><strong>table 操作</strong></p><ul><li>常用的方法</li></ul></li></ul><style>table th:first-of-type {    width: 100px;}</style><table><thead><tr><th>序号</th><th>方法&amp;用途</th></tr></thead><tbody><tr><td>1</td><td>table.concat(table[,sep[,start[,end]]]):<br>concat是concatenate(连锁, 连接)的缩写. table.concat()函数列出参数中指定table的数组部分从start位置到end位置的所有元素, 元素间以指定的分隔符(sep)隔开</td></tr><tr><td>2</td><td>table.insert(table,[pos[,value]]):<br>在table数组部分指定位置(pos)插入值为value的一个元素,pos参数可选,默认为数组部分末尾</td></tr><tr><td>3</td><td>table.maxn(table):<br>指定table中所有正数key值中最大的key值. 如果不存在key值为正数的元素, 则返回0。(Lua5.2之后该方法已经不存在了,本文使用了自定义函数实现)</td></tr><tr><td>4</td><td>table.remove(table[,pos]):<br>返回table数组部分位于pos位置的元素. 其后的元素会被前移. pos参数可选, 默认为table长度, 即从最后一个元素删起</td></tr><tr><td>5</td><td>table.sort(table[,comp]):<br>对给定的table进行升序排列</td></tr></tbody></table><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方法实例:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- table连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用concat()方法来连接两个table</span></span><br><span class="line">fruits = &#123;<span class="string">"banana"</span>,<span class="string">"orange"</span>,<span class="string">"apple"</span>&#125;</span><br><span class="line"><span class="comment">-- 返回table连接后的字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"连接后的字符串"</span>,<span class="built_in">table</span>.<span class="built_in">concat</span>(fruits))</span><br><span class="line"><span class="comment">-- 指定连接字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"连接后的字符串 "</span>,<span class="built_in">table</span>.<span class="built_in">concat</span>(fruits,<span class="string">", "</span>))</span><br><span class="line"><span class="comment">-- 指定索引来连接table</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"连接后的字符串 "</span>,<span class="built_in">table</span>.<span class="built_in">concat</span>(fruits,<span class="string">", "</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入和移除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 演示table的插入和移除操作</span></span><br><span class="line"><span class="comment">-- 在末尾插入</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(fruits,<span class="string">"mango"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"索引为4的元素为 "</span>,fruits[<span class="number">4</span>])</span><br><span class="line"><span class="comment">-- 在索引为2的键处插入</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(fruits,<span class="number">2</span>,<span class="string">"grapes"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"索引为2的元素为 "</span>,fruits[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"最后一个元素为 "</span>,fruits[<span class="number">5</span>])</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">remove</span>(fruits)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"移除后最后一个元素为 "</span>,fruits[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">-- table排序</span></span><br><span class="line"></span><br><span class="line">fruits = &#123;<span class="string">"banana"</span>,<span class="string">"apple"</span>,<span class="string">"grapes"</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"排序前"</span>)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(fruits) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(fruits)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"排序后"</span>)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(fruits) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- table最大值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 自定义table_maxn来实现</span></span><br><span class="line"><span class="comment">-- 获取table中的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">table_maxn</span><span class="params">(t)</span></span></span><br><span class="line">    <span class="keyword">local</span> mn=<span class="literal">nil</span></span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span>(mn==<span class="literal">nil</span>) <span class="keyword">then</span></span><br><span class="line">            mn=v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> mn &lt; v <span class="keyword">then</span></span><br><span class="line">            mn = v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> mn</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">tb1 = &#123;[<span class="number">1</span>] = <span class="number">2</span>, [<span class="number">2</span>] = <span class="number">6</span>, [<span class="number">3</span>] = <span class="number">34</span>, [<span class="number">26</span>] = <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"tb1最大值: "</span>,table_maxn(tb1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"tb1长度 "</span>,#tb1)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 代码执行的结果是: </span></span><br><span class="line"><span class="comment">-- tb1最大值: 34</span></span><br><span class="line"><span class="comment">-- tb1长度: 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 当我们获取 table 的长度的时候无论是使用 # 还是 table.getn 其都会在索引中断的地方停止计数，而导致无法正确取得 table 的长度。</span></span><br><span class="line"><span class="comment">-- 使用以下方法替换:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">table_leng</span><span class="params">(t)</span></span></span><br><span class="line">    <span class="keyword">local</span> leng = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">        leng=leng+<span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> leng</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      主要还是为了redis,内容来自:http://www.runoob.com/lua/lua-tutorial.html
    
    </summary>
    
      <category term="lua" scheme="https://zonzie.gitee.io/categories/lua/"/>
    
    
      <category term="redis" scheme="https://zonzie.gitee.io/tags/redis/"/>
    
      <category term="lua" scheme="https://zonzie.gitee.io/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>rabbitMq基本用法</title>
    <link href="https://zonzie.gitee.io/2018/08/01/rabbitMq%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>https://zonzie.gitee.io/2018/08/01/rabbitMq基本用法/</id>
    <published>2018-08-01T02:17:00.000Z</published>
    <updated>2018-10-22T10:38:38.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h4 id="MQ简介"><a href="#MQ简介" class="headerlink" title="MQ简介"></a>MQ简介</h4><ul><li>MQ是啥?<ul><li>MQ是Message Queue消息队列的缩写,是一种应用程序对应用程序的通信方法、应用程序通过写和检索入列队的针对应用程序的数据来进行通信，而不需要专用连接来链接它们。队列的使用除去了接收和发送应用程序同时执行的要求。</li></ul></li><li>概况<ul><li>是分布式应用之间交换信息的一种技术,消息队列可以驻留在内存或者磁盘中,直到被程序读走,通过消息队列,应用程序可以独立执行,不需要消息收发者彼此的位置</li></ul></li><li>基本概念<ol><li>消息message<ul><li>消息是mq中最小的概念,本质上是一段数据,能被一个或者多个应用程序所理解,是传递信息的载体</li></ul></li><li>队列Queue<ul><li>初始化队列: 用作消息的触发功能</li><li>传输队列: 暂存待传消息,条件许可的情况下,通过管道将消息传送到其他队列</li><li>目标队列: 是消息的目的地,可以长期存放</li><li>死信队列: 当消息不能送到目标队列,也不再路由出去,则自动放入死信队列</li></ul></li></ol></li><li>应用场景:<ul><li>所有可以异步操作的功能都可以用mq</li></ul></li></ul><h4 id="rabbitMq简介"><a href="#rabbitMq简介" class="headerlink" title="rabbitMq简介"></a>rabbitMq简介</h4><ul><li>简介: rabbitMq是一个由Erlang语言开发的AMQP的开源实现</li><li>AMQP: Advanced Message Queuing Protocol, 高级消息队列协议,它是应用层协议的一个开放的标准,以解决众多的消息中间件的需求和拓扑结构问题,并不受产品,语言等条件的限制</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><ul><li>先安装erlang语言环境<ul><li>可以使用yum工具安装</li><li>这里下载官方的tar包安装,下载源码包otp_src_21.0.tar.gz<ol><li>先解压 <code>tar -zxvf otp_src_21.0.tar.gz</code></li><li>进入目录后,设置安装目录 <code>./configure --prefix=/opt/erlang/</code></li><li>如果出现报错信息如下,可以使用yum搜索相关的组件,并且安装即可: <img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180801153222.png" alt="报错信息"></li><li>然后<code>make &amp;&amp; make install</code></li><li>在<code>/etc/profile</code>配置环境变量即可</li><li>输入<code>erl</code>看是否安装成功</li></ol></li></ul></li><li>再安装rabbitMq<ul><li>官网下载<code>rabbitmq-server-generic-unix-3.7.7.tar</code>,下载的rabbitMq的版本要和erlang适配,具体适配的版本机见rabbitMq官网每个版本的说明</li><li>解压后配置环境变量即可</li><li>运行: <code>rabbitmq-server</code></li></ul></li><li>如果有docker环境,可以直接拉取rabbitMQ的镜像,直接启动<ul><li>搜索相关的镜像: <code>docker search rabbitmq</code></li><li>拉取镜像: <code>docker pull rabbitmq</code></li><li>启动镜像,指定hostname,映射相关的端口,映射rabbitmq的数据库文件到宿主机: <code>docker run -tid --hostname rabbitmq_2 --name my_rabbitmq_2 -p 5672:5672 -p 15672:15672 -v /root/rabbitmq/lib/:/var/lib/rabbitmq/ rabbitmq:latest /bin/bash</code></li><li>进入镜像启动rabbitmq: <code>rabbitmq-server -detached</code></li><li>添加新的rabbitmq用户</li><li>添加管理界面的插件 <code>rabbitmq-plugins enable rabbitmq_management</code></li></ul></li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ol><li>生产者和消费者<ul><li>生产者: 消息投递的一方,投递的消息一般包含两部分:消息体(payload)和标签(tag),消息一般是带哦有业务逻辑结构的数据,标签用来描述这条消息,比如一个交换器的名称和一个路由键</li><li>消费者: 接收消息的一方,消费者消费消息时,消费的只是消息体payload,在消息路由的过程中,消息的标签会被丢弃掉,存入队列的只有消息体,消费者也不会知道消息的生产者是谁</li><li>broker: 服务节点,一个broker可以看作一个简单的服务节点,<br><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/rabbitmq-structure.png" alt="topic"><center>rabbitmq整体架构</center></li></ul></li><li>队列<ul><li>rabbitMq的内部对象,用来存储消息</li></ul></li><li>交换器,路由,绑定<ul><li>Exchange: 交换器,决定最终投递到哪个队列的路由的一部分,消息被发送到Exchange,交换器将消息路由到一个或者多个队列中<ul><li>fanout: 会将所有发送到交换器的消息路由到所有与交换器绑定的队列中</li><li>direct: 会把消息路由到所有的BindingKey和RoutingKey完全匹配的队列中<br><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/rabbitmq-direct.png" alt="direct"><center>交换器direct</center></li><li>topic: 将消息路由到RoutingKey和BindingKey满足一定的匹配规则的队列中<ul><li>RoutingKey为点号<code>.</code>分隔的一些单词组成</li><li>BindingKey也是点号<code>.</code>分隔的字符串</li><li>BindingKey中存在两种特殊的字符<code>*</code>,<code>#</code>,用于模糊匹配,<code>*</code>用于匹配一个单词,<code>#</code>用于匹配多个单词<ul><li>例如: routingKey为<code>com.rabbitMq.client</code>的消息会路由到bindingKey为<code>*.rabbitMq.*</code>和<code>*.*.client</code>和<code>com.#</code>的队列<br><img src="https://hexoblog-1255784309.cos.ap-beijing.myqcloud.com/rabbitmq-topic.png" alt="topic"><center>交换器topic</center></li></ul></li></ul></li><li>headers: 根据发送内容中的headers属性进行匹配</li></ul></li><li>RoutingKey: 路由键 生产者将消息发送到交换器时,一般会指定一个RoutingKey,它和交换器类型还有绑定键联合使用才能最终生效</li><li>BindingKey: 绑定键 在交换器的类型为direct或者topic时,消息将发送到routingKey和bindingKey匹配的队列中</li></ul></li></ol><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><ul><li>添加一个root用户,密码是root<code>rabbitmqctl add_user root root</code></li><li>设置所有权限: <code>rabbitmqctl set_permissions -p / root &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></li><li>设置管理员角色: <code>rabbitmqctl set_user_tags root administrator</code></li></ul><h4 id="开启管理界面"><a href="#开启管理界面" class="headerlink" title="开启管理界面"></a>开启管理界面</h4><ul><li>使用命令 <code>rabbitmq-plugins enable rabbitmq_management</code></li><li>重启rabbitMq <code>rabbitmqctl stop</code>, <code>rabbitmq-server -detached</code></li><li>如果需要在其他机器上访问,需要放开15672端口,centos7使用firewall而不是iptables,需要注意</li></ul><h4 id="消息的流转过程"><a href="#消息的流转过程" class="headerlink" title="消息的流转过程"></a>消息的流转过程</h4><ul><li><strong>生产者</strong>:<ol><li>生产者连接到RabbitMQ Broker,建立一个连接(Connection),开启一个信道(Channel)</li><li>生产者声明一个交换器,并且设置相关的属性,比如交换机类型,是否持久化等</li><li>生产者声明一个队列并且设置相关的属性,比如是否排他,是否持久化,是否自动删除等</li><li>生产者通过路由键将交换器和队列绑定起来</li><li>生产者发送消息到RabbitMq Broker,其中包含路由键,交换器等信息(tag和payload两部分)</li><li>相应的交换器根据接收到的路由键查找相匹配的队列</li><li>如果找到,将从生产者发过来的消息存入到相应的队列</li><li>如果没有找到,则根据生产者配置的属性选择丢弃还是回退给生产者</li><li>关闭信道</li><li>关闭连接</li></ol></li><li><strong>消费者</strong>:<ol><li>消费者连接到RabbitMQ Broker, 建立一个连接(Connection),开启一个信道(Channel)</li><li>消费者向RabbitMQ Broker 请求消费相应的队列中的消息,可能会设置相应的回调函数,以及做一些准备工作</li><li>等待RabbitMQ Broker 回应并投递相应的队列中的消息,消费者接收消息</li><li>消费者确认(ack)接收到的消息</li><li>RabbitMQ从队列中删除相应的已经被确认的消息</li><li>关闭信道</li><li>关闭连接</li></ol></li></ul><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><ul><li><strong>首先需要导入依赖</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>生产者代码:</strong> </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rabbitMq 生产者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/30 15:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"exchange_demo"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY = <span class="string">"routingkey_demo"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"queue_demo"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IP_ADDRESS = <span class="string">"192.168.198.128"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">5672</span>;<span class="comment">// rabbitmq 服务端默认的端口</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(IP_ADDRESS);</span><br><span class="line">        factory.setPort(PORT);</span><br><span class="line">        factory.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">// 创建信道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 创建一个type="direct",持久化的,非自动删除的交换器</span></span><br><span class="line">        AMQP.Exchange.DeclareOk direct = channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"direct"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 创建一个持久化的,非排他的,非自动删除的队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 将交换器与队列通过路由键绑定,因为交换器类型为direct,所以ROUTING_KEY和BINDING_KEY保持一致,这里使用ROUTING_KEY就行</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, ROUTING_KEY);</span><br><span class="line">        <span class="comment">// 发送一条持久化的消息:hello world!</span></span><br><span class="line">        String message = <span class="string">"hello world"</span>;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, ROUTING_KEY, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>消费者代码:</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rabbitMq 消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/30 16:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"queue_demo"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IP_ADDRESS = <span class="string">"192.168.198.128"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">5672</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException </span>&#123;</span><br><span class="line">        Address[] addresses = &#123;<span class="keyword">new</span> Address(IP_ADDRESS, PORT)&#125;;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        Connection connection = factory.newConnection(addresses);</span><br><span class="line">        <span class="comment">// 创建信道</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 设置客户端最多接收未被ACK的消息的个数</span></span><br><span class="line">        channel.basicQos(<span class="number">64</span>);</span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"recv message: "</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, defaultConsumer);</span><br><span class="line">        <span class="comment">// 等待回调函数执行完毕, 关闭资源</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">20</span>);</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在spring中的使用-rabbitTemplate"><a href="#在spring中的使用-rabbitTemplate" class="headerlink" title="在spring中的使用-rabbitTemplate"></a>在spring中的使用-rabbitTemplate</h4><ul><li><strong>相关的spring配置:</strong> </li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-boot-rabbitmq</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.198</span><span class="number">.128</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment"># 设置手动确认</span></span><br><span class="line"><span class="attr">    publisher-confirms:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><strong>生产者: 配置队列和交换器,还有绑定关系</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/12 18:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmqpConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个队列 -&gt; "hello"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        <span class="comment">// 设置超时时间</span></span><br><span class="line">        map.put(<span class="string">"x-message-ttl"</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 设置死信交换器</span></span><br><span class="line">        map.put(<span class="string">"x-dead-letter-exchange"</span>, <span class="string">"dead-letter-exchange"</span>);</span><br><span class="line">        <span class="comment">// 设置死信路由键</span></span><br><span class="line">        map.put(<span class="string">"x-dead-letter-routing-key"</span>, <span class="string">"dead-letter-routing"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"hello"</span>,<span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个队列 -&gt; "object"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">objectQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"object"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个队列 -&gt; "test"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">testQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">deadQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"deadqueue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信交换器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">deadExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"dead-letter-exchange"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定死信队列和死信交换器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">deadBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deadQueue()).to(deadExchange()).with(<span class="string">"dead-letter-routing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个direct交换器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"com.zonzie.directtest"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过bindingKey -&gt; "hellotest", 绑定queue-&gt;"hello"和上面的交换器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue()).to(directExchange()).with(<span class="string">"hellotest"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建topic交换器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">topicExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(<span class="string">"com.zonzie.topictest"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过bindingKey -&gt; "com.*.test" 绑定queue-&gt;"test"和上面的topicExchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">topicBindKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(testQueue()).to(topicExchange()).with(<span class="string">"com.*.test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过bindingKey -&gt; "com.#" 绑定 queue-&gt;"hello"和topicExchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">topicBindKey2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue()).to(topicExchange()).with(<span class="string">"com.#"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>生产者: 设置rabbitTemplate</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/13 17:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmqpTemplateConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"myTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate(connectionFactory);</span><br><span class="line">        <span class="comment">// 设置messageConverter,确定消息传递时序列化的方式</span></span><br><span class="line">        rabbitTemplate.setMessageConverter(messageConverter());</span><br><span class="line">        <span class="comment">// 设置重试次数</span></span><br><span class="line">        RetryTemplate retryTemplate = <span class="keyword">new</span> RetryTemplate();</span><br><span class="line">        ExponentialBackOffPolicy exponentialBackOffPolicy = <span class="keyword">new</span> ExponentialBackOffPolicy();</span><br><span class="line">        exponentialBackOffPolicy.setInitialInterval(<span class="number">500</span>);</span><br><span class="line">        exponentialBackOffPolicy.setMultiplier(<span class="number">10.0</span>);</span><br><span class="line">        exponentialBackOffPolicy.setMaxInterval(<span class="number">10000</span>);</span><br><span class="line">        retryTemplate.setBackOffPolicy(exponentialBackOffPolicy);</span><br><span class="line">        rabbitTemplate.setRetryTemplate(retryTemplate);</span><br><span class="line">        <span class="comment">// 设置回调方法</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> ConfirmCallbackDemo());</span><br><span class="line">        <span class="comment">// 失败后return回调</span></span><br><span class="line">        rabbitTemplate.setReturnCallback(<span class="keyword">new</span> ReturnCallBackDemo());</span><br><span class="line">        <span class="comment">// return 回调需要设置,不然不会生效</span></span><br><span class="line">        rabbitTemplate.setMandatory(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 事务</span></span><br><span class="line"><span class="comment">//        rabbitTemplate.setChannelTransacted(true);</span></span><br><span class="line"><span class="comment">//        rabbitTemplate.setExchange();</span></span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Jackson2JsonMessageConverter <span class="title">messageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.support.CorrelationData;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动确认回调的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/14 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfirmCallbackDemo</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">" 消息id:"</span> + correlationData);</span><br><span class="line">        <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">            log.info(<span class="string">"消息发送确认成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">"消息发送确认失败:"</span> + cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------</span></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置消息消费失败后回调的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/15 13:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReturnCallBackDemo</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ReturnCallback</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode, String replyText, String exchange, String routingKey)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"return--message:"</span>+<span class="keyword">new</span> String(message.getBody())+<span class="string">",replyCode:"</span>+replyCode+<span class="string">",replyText:"</span>+replyText+<span class="string">",exchange:"</span>+exchange+<span class="string">",routingKey:"</span>+routingKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>用到的实体</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/13 15:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>生产者: 发送消息</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zonzie.domian.User;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.support.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/13 14:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"sender"</span>, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"myTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/send"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String context)</span> </span>&#123;</span><br><span class="line">        System.out.println(context);</span><br><span class="line">        CorrelationData correlationData = <span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString());</span><br><span class="line"><span class="comment">//        rabbitTemplate.convertAndSend("hello", context, correlationData);</span></span><br><span class="line"><span class="comment">//        rabbitTemplate.convertAndSend("test","helloTest");</span></span><br><span class="line"><span class="comment">//        rabbitTemplate.convertAndSend("com.zonzie.directtest","hellotest","helloTEST");</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"com.zonzie.topictest"</span>, <span class="string">"com.zonzie.test"</span>,context);</span><br><span class="line"><span class="comment">//        rabbitTemplate.convertAndSend("hellotest","helloTEST");</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"ybq"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123"</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"object"</span>,user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"bingo!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>消费者: 消费者配置</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/13 17:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmqpConsumeConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"myListenContainer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleRabbitListenerContainerFactory <span class="title">rabbitListenerContainerFactory</span><span class="params">(ConnectionFactory connectionFactory, @Qualifier(<span class="string">"rabbitTransactionManager"</span>)</span> PlatformTransactionManager manager) </span>&#123;</span><br><span class="line">        SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">        <span class="comment">// 设置messageConverter,需要同生产者保持一致</span></span><br><span class="line">        factory.setMessageConverter(messageConverter());</span><br><span class="line">        <span class="comment">// 设置事务管理,事务管理和手动确认的方式只能使用一种</span></span><br><span class="line"><span class="comment">//        factory.setChannelTransacted(true);</span></span><br><span class="line"><span class="comment">//        factory.setTransactionManager(manager);</span></span><br><span class="line">        factory.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 设置手动应答模式</span></span><br><span class="line">        factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"rabbitTransactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitTransactionManager <span class="title">getTransactionManager</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RabbitTransactionManager(connectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    另一种配置消费者的方式</span></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public SimpleMessageListenerContainer messageContainer(ConnectionFactory connectionFactory) &#123;</span></span><br><span class="line"><span class="comment">//        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer(connectionFactory);</span></span><br><span class="line"><span class="comment">//        container.setMessageConverter(messageConverter());</span></span><br><span class="line"><span class="comment">//        container.setQueues(new Queue("hello"), new Queue("object"));</span></span><br><span class="line"><span class="comment">//        container.setExposeListenerChannel(true);</span></span><br><span class="line"><span class="comment">//        container.setMaxConcurrentConsumers(1);</span></span><br><span class="line"><span class="comment">//        container.setConcurrentConsumers(1);</span></span><br><span class="line"><span class="comment">//        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span></span><br><span class="line"><span class="comment">//        container.setMessageListener(new ChannelAwareMessageListener() &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void onMessage(Message message, com.rabbitmq.client.Channel channel) throws Exception &#123;</span></span><br><span class="line"><span class="comment">//                byte[] body = message.getBody();</span></span><br><span class="line"><span class="comment">//                log.info("消费端接收到消息 : " + new String(body));</span></span><br><span class="line"><span class="comment">//                  // 手动确认消息已被消费</span></span><br><span class="line"><span class="comment">//                channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"><span class="comment">//        return container;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Jackson2JsonMessageConverter <span class="title">messageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>消息监听并且消费</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.base.Objects;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.zonzie.domian.User;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.AmqpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Header;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zonzie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/13 15:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">        消息的标识，false只确认当前一个消息收到，true确认所有consumer获得的消息</span></span><br><span class="line"><span class="comment">        channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);</span></span><br><span class="line"><span class="comment">        ack返回false，并重新回到队列，api里面解释得很清楚</span></span><br><span class="line"><span class="comment">        channel.basicNack(message.getMessageProperties().getDeliveryTag(), false, true);</span></span><br><span class="line"><span class="comment">        拒绝消息</span></span><br><span class="line"><span class="comment">        channel.basicReject(message.getMessageProperties().getDeliveryTag(), true);</span></span><br><span class="line"><span class="comment">        如果消息没有到exchange,则confirm回调,ack=false</span></span><br><span class="line"><span class="comment">        如果消息到达exchange,则confirm回调,ack=true</span></span><br><span class="line"><span class="comment">        exchange到queue成功,则不回调return</span></span><br><span class="line"><span class="comment">        exchange到queue失败,则回调return(需设置mandatory=true,否则不回回调,消息就丢了)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(containerFactory = <span class="string">"myListenContainer"</span>, queues = <span class="string">"object"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(User user, @Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="keyword">long</span> deliveryTag, Channel channel) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">// 确认消息收到</span></span><br><span class="line">        channel.basicAck(deliveryTag,<span class="keyword">false</span>);</span><br><span class="line">        System.out.print(<span class="string">"这里是接收者1答应消息： "</span>);</span><br><span class="line">        System.out.println(<span class="string">"SYS_TOPIC_ORDER_CALCULATE_ZZ_FEE process1  : "</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(containerFactory = <span class="string">"myListenContainer"</span>,queues = &#123;<span class="string">"hello"</span>,<span class="string">"test"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String hello, Channel channel, @Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="keyword">long</span> deliverTag) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Receiver: "</span> + hello);</span><br><span class="line">        <span class="keyword">if</span>(Objects.equal(hello, <span class="string">"tttt"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 对于业务中遇到的一些不满足条件的消息,使用channel.reject(),或者channel.Nack(),会触发生产者的returnCallBack配置并且被处理或者会被发送到死信队列</span></span><br><span class="line">            channel.basicReject(deliverTag, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        channel.basicAck(deliverTag, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(containerFactory = <span class="string">"myListenContainer"</span>,queues = &#123;<span class="string">"test"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process2</span><span class="params">(String hello, Channel channel, @Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="keyword">long</span> deliverTag) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Receiver222: "</span> + hello);</span><br><span class="line">        channel.basicAck(deliverTag, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><h4 id="单机多节点集群配置"><a href="#单机多节点集群配置" class="headerlink" title="单机多节点集群配置"></a>单机多节点集群配置</h4><ul><li>一台机器部署多个rabbitMQ服务节点,需要确保每个节点都有独立的名称,数据存储位置,端口号(包括插件的端口号),我们在主机名为node1的机器上创建一个由rabbit1@node1,rabbit2@node1和rabbit3@node1这三个节点组成的RabbitMQ集群</li><li>没有安装任何插件的情况,依次启动三个节点:<ol><li><code>RABBITMQ_NODE_PORT=5672 RABBITMQ_NODENAME=rabbit1 rabbitmq-server -detached</code></li><li><code>RABBITMQ_NODE_PORT=5673 RABBITMQ_NODENAME=rabbit2 rabbitmq-server -detached</code></li><li><code>RABBITMQ_NODE_PORT=5674 RABBITMQ_NODENAME=rabbit3 rabbitmq-server -detached</code></li></ol></li><li>如果安装了managemnet插件,还需要配置插件的端口号,不然按照上面的启动方式会报错<ol><li><code>RABBITMQ_NODE_PORT=5672 RABBITMQ_NODENAME=rabbit1 RABBITMQ_SERVER_START_ARGS=&quot;-rabbitmq_management listener [{port,15672}]&quot; rabbitmq-server -detached</code></li><li><code>RABBITMQ_NODE_PORT=5673 RABBITMQ_NODENAME=rabbit2 RABBITMQ_SERVER_START_ARGS=&quot;-rabbitmq_management listener [{port,15673}]&quot; rabbitmq-server -detached</code></li><li><code>RABBITMQ_NODE_PORT=5674 RABBITMQ_NODENAME=rabbit3 RABBITMQ_SERVER_START_ARGS=&quot;-rabbitmq_management listener [{port,15674}]&quot; rabbitmq-server -detached</code></li></ol></li><li>3个节点都启动了之后, 将rabbit2@node1节点加入到rabbit1@node1的集群之中,并且按照同样的方法,将rabbit3加入到集群之中<ol><li><code>rabbitmqctl -n rabbit2@node1 stop_app</code></li><li><code>rabbitmqctl -n rabbit2@node1 reset</code></li><li><code>rabbitmqctl -n rabbit2@node1 join_cluster rabbit1@node1</code></li><li><code>rabbitmqctl -n rabbit2@node1 start_app</code></li></ol></li><li>集群状态查看<ul><li><code>rabbitmqctl -n rabbit1@node1 cluster_status</code></li></ul></li></ul><h4 id="多机多节点配置"><a href="#多机多节点配置" class="headerlink" title="多机多节点配置"></a>多机多节点配置</h4><ol><li><p>为了让每个节点能够识别其他节点,首先需要修改/etc/hosts文件,添加ip和节点名称的映射文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.1 node1</span><br><span class="line">192.168.0.2 node2</span><br><span class="line">192.168.0.3 node3</span><br></pre></td></tr></table></figure></li><li><p>编辑RabitMQ的cookie文件,确保每个节点的cookie文件使用的是同一个值,可以读取一个节点的cookie的值,将其复制到node2和node3节点中.cookie文件默认的路径为<code>/var/lib/rabbitmq/.erlang.cookie</code>或者<code>$HOME/.erlang.cookie</code>, cookie相当于密钥令牌,集群中的RabbitMQ节点需要通过交换密钥令牌以获得相互认证,不然在配置节点时会报错</p></li><li>启动三个节点的RabbitMQ服务<ul><li>分别在三个节点下执行: <code>rabbitmq-server -detached</code></li></ul></li><li>以node1为基准,分别将node2和node3加入到node1节点的集群中<ol><li><code>rabbitmqctl stop_app</code></li><li><code>rabbitmqctl reset</code></li><li><code>rabbitmqctl join_cluster rabbit@node1</code></li><li><code>rabbitmqctl start_app</code></li></ol></li><li>如果关闭了集群中的所有的节点,则需要确保在启动的时候最后关闭的节点是第一个启动的,如果第一个启动的不是最后关闭的节点,那这个节点会等待最后关闭的节点启动,这个等待时间是30s,如果没有等到,那么这个节点的启动也会失败,最新的版本中会默认重试10次,每次30s</li><li>如果最后一个节点因为某些异常而无法启动,可以通过<code>rabbitmqctl forget_cluster_node</code>命令将此节点剔除出集群</li><li>如果集群中所有节点都因为某些原因非正常关闭,比如断电,那么集群中的节点都会认为还有节点在它后面关闭,此时需要调用<code>rabbitmqctl force_boot</code>强制启动某一个节点,其他节点才会正常启动</li></ol><h4 id="剔除单个节点"><a href="#剔除单个节点" class="headerlink" title="剔除单个节点"></a>剔除单个节点</h4><ul><li>有多种方法可以将一个节点剔除出集群<ol><li>如果由于启动顺序的原因不得不剔除一个节点,有两种情况<ol><li>node2节点已经不再运行rabbitMQ了, 可以在node1或者node3中将其剔除: <code>rabbitmqctl forget_cluster_node rabbit@node2</code></li><li>如果此时没有节点处于启动状态,需要剔除掉node1节点,可以在node2或者node3执行命令: <code>rabbitmqctl forget_cluster_node rabbit@node1 --offline</code>,这里如果不加”–offline”,则需要保证执行命令的节点处于运行状态,如果node2和node3无法先行启动,可以加这个参数,在没有启动rabbitmq的情况下将node1剔除出节点</li></ol></li><li>正常情况下,剔除一个节点的方法<ol><li><code>rabbitmqctl stop_app</code></li><li><code>rabbitmqctl reset</code></li><li><code>rabbitmqctl start_app</code></li></ol></li></ol></li></ul><blockquote><p><strong>以上代码地址</strong>: <a href="https://github.com/zonzie/rabbitMQ_demo" target="_blank" rel="noopener">https://github.com/zonzie/rabbitMQ_demo</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      rabbitMq的基本用法,参考自:&amp;laquo;RabbitMQ实战指南&amp;raquo;
    
    </summary>
    
      <category term="mq" scheme="https://zonzie.gitee.io/categories/mq/"/>
    
    
      <category term="rabbitMq" scheme="https://zonzie.gitee.io/tags/rabbitMq/"/>
    
  </entry>
  
  <entry>
    <title>dokcer基本操作(二)</title>
    <link href="https://zonzie.gitee.io/2018/07/19/dokcer%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-%E4%BA%8C/"/>
    <id>https://zonzie.gitee.io/2018/07/19/dokcer基本操作-二/</id>
    <published>2018-07-19T05:23:19.000Z</published>
    <updated>2018-10-22T10:38:38.750Z</updated>
    
    <content type="html"><![CDATA[<h4 id="docker镜像的制作"><a href="#docker镜像的制作" class="headerlink" title="docker镜像的制作"></a>docker镜像的制作</h4><ul><li><strong>一般docker的镜像有两种制作方式</strong><ol><li>通过Dockerfile和build制作镜像</li><li>通过docker commit制作镜像</li></ol></li><li>Dockerfile使用基本的基于DSL语法的指令来构建一个Docker镜像，之后使用docker builder命令基于该Dockerfile中的指令构建一个新的镜像。</li><li><strong>Dockerfile常用的指令</strong><ol><li>FROM 设置镜像使用的的基础镜像<ul><li>语法: <code>FROM &lt;image&gt;[:&lt;tag&gt; | @&lt;digest&gt;]</code></li></ul></li><li>MAINTAINER 设置镜像的作者<ul><li>语法: <code>MAINTAINER &lt;name&gt;</code></li></ul></li><li>RUN 编译镜像时运行的脚本以及命令<ul><li>语法：<code>RUN &lt;command&gt;</code>;<br><code>RUN [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code></li></ul></li><li>CMD 设置容器的启动命令<ul><li>语法: <code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code>;<br><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code>;<br><code>CMD &lt;command&gt;</code></li></ul></li><li>LABEL 设置镜像的标签<ul><li>语法: <code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; …</code></li><li>镜像标签可以通过docker inspect查看 </li></ul></li><li>EXPOSE 设置镜像要暴露的端口<ul><li>语法: <code>EXPOSE &lt;port&gt; &lt;port&gt; …</code></li><li>提示：容器启动时，Docker Daemon会扫描镜像中暴露的端口，如果加入-P参数，Docker Daemon会把镜像中所有暴露端口导出，并为每个暴露端口分配一个随机的主机端口（暴露端口是容器监听端口，主机端口为外部访问容器的端口）</li><li>注意：EXPOSE只设置暴露端口并不导出端口，只有启动容器时使用-P/-p才导出端口，这个时候才能通过外部访问容器提供的服务</li></ul></li><li>ENV 设置容器的环境变量<ul><li>语法: <code>ENV &lt;key&gt;=&lt;value&gt;…|&lt;key&gt; &lt;value&gt;</code></li><li>注意：环境变量在整个编译周期都有效，第一种方式可设置多个环境变量，第二种方式只设置一个环境变量 </li><li>提示：通过${变量名}或者 $变量名使用变量，使用方式${变量名}时可以用${变量名:-default} ${变量名:+cover}设定默认值或者覆盖值 </li></ul></li><li>ADD 编译镜像时添加文件到镜像<ul><li>语法：<code>ADD &lt;src&gt;… &lt;dest&gt;|[“&lt;src&gt;”,… “&lt;dest&gt;”]</code></li><li>注意：当路径中有空格时，需要使用第二种方式, 当src为文件或目录时，Docker Daemon会从编译目录寻找这些文件或目录，而dest为镜像中的绝对路径或者相对于WORKDIR的路径</li></ul></li><li>COPY 编译镜像时复制文件到镜像<ul><li>语法：<code>COPY &lt;src&gt;… &lt;dest&gt;|[“&lt;src&gt;”,… “&lt;dest&gt;”]</code></li><li>提示：指令逻辑和ADD十分相似，同样Docker Daemon会从编译目录寻找文件或目录，dest为镜像中的绝对路径或者相对于WORKDIR的路径</li></ul></li><li>ENTRYPOINT 设置容器的入口程序<ul><li>语法：<code>ENTRYPOINT [“executable”,”param1”,”param2”]</code>, <code>ENTRYPOINT command param1 param2</code>（shell方式）</li><li>提示：入口程序是容器启动时执行的程序，docker run中最后的命令将作为参数传递给入口程序, 入口程序有两种格式：exec、shell，其中shell使用/bin/sh -c运行入口程序，此时入口程序不能接收信号量, 当Dockerfile有多条ENTRYPOINT时只有最后的ENTRYPOINT指令生效, 如果使用脚本作为入口程序，需要保证脚本的最后一个程序能够接收信号量，可以在脚本最后使用exec或gosu启动传入脚本的命令 </li><li>注意：通过shell方式启动入口程序时，会忽略CMD指令和docker run中的参数, 为了保证容器能够接受docker stop发送的信号量，需要通过exec启动程序；如果没有加入exec命令，则在启动容器时容器会出现两个进程，并且使用docker stop命令容器无法正常退出（无法接受SIGTERM信号），超时后docker stop发送SIGKILL，强制停止容器 </li></ul></li><li>VOLUME 设置容器的挂载卷<ul><li>语法：<code>VOLUME [“/data”]</code>, <code>VOLUME /data1 /data2</code></li><li>提示：启动容器时，Docker Daemon会新建挂载点，并用镜像中的数据初始化挂载点，可以将主机目录或数据卷容器挂载到这些挂载点</li></ul></li><li>USER 设置运行命令以及脚本时的用户<ul><li>语法：<code>USER &lt;name&gt;</code></li></ul></li><li>WORKDIR 设置指令运行时的工作目录<ul><li>语法：WORKDIR <path></path> </li><li>提示：如果工作目录不存在，则Docker Daemon会自动创建, Dockerfile中多个地方都可以调用WORKDIR，如果后面跟的是相对位置，则会跟在上条WORKDIR指定路径后（如WORKDIR /A   WORKDIR B   WORKDIR C，最终路径为/A/B/C）</li></ul></li><li>ARG 设置编译镜像时加入的参数</li><li>ONBUILD    设置镜像的ONBUILD指令<ul><li>语法：<code>ONBUILD [INSTRUCTION]</code></li><li>提示：从该镜像生成子镜像，在子镜像的编译过程中，首先会执行父镜像中的ONBUILD指令，所有编译指令都可以成为钩子指令</li></ul></li><li>STOPSIGNAL 设置容器的退出信号量</li></ol></li><li><strong>docker build命令使用</strong><ul><li><code>--build-arg</code>，设置构建时的变量</li><li><code>--no-cache</code>，默认false。设置该选项，将不使用Build Cache构建镜像</li><li><code>--pull</code>，默认false。设置该选项，总是尝试pull镜像的最新版本</li><li><code>--compress</code>，默认false。设置该选项，将使用gzip压缩构建的上下文</li><li><code>--disable-content-trust</code>，默认true。设置该选项，将对镜像进行验证</li><li><code>--file</code>, -f，Dockerfile的完整路径，默认值为‘PATH/Dockerfile’</li><li><code>--isolation</code>，默认–isolation=”default”，即Linux命名空间；其他还有process或hyperv</li><li><code>--label</code>，为生成的镜像设置metadata</li><li><code>--squash</code>，默认false。设置该选项，将新构建出的多个层压缩为一个新层，但是将无法在多个镜像之间共享新层；设置该选项，实际上是创建了新image，同时保留原有image。</li><li><code>--tag</code>, -t，镜像的名字及tag，通常name:tag或者name格式；可以在一次构建中为一个镜像设置多个tag</li><li><code>--network</code>，默认default。设置该选项，Set the networking mode for the RUN instructions during build</li><li><code>--quiet</code>, -q ，默认false。设置该选项，Suppress the build output and print image ID on success</li><li><code>--force-rm</code>，默认false。设置该选项，总是删除掉中间环节的容器</li><li><code>--rm</code>，默认–rm=true，即整个构建过程成功后删除中间环节的容器</li></ul></li><li><p><strong>docker run命令使用</strong></p><ul><li><p>Usage: <code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code>  </p><ul><li><code>-d</code>, <code>--detach=false</code>         指定容器运行于前台还是后台，默认为false   </li><li><code>-i</code>, <code>--interactive=false</code>   打开STDIN，用于控制台交互  </li><li><code>-t</code>, <code>--tty=false</code>            分配tty设备，该可以支持终端登录，默认为false  </li><li><code>-u</code>, <code>--user=&quot;&quot;</code>              指定容器的用户  </li><li><code>-a</code>, <code>--attach=[]</code>            登录容器（必须是以docker run -d启动的容器）</li><li><code>-w</code>, <code>--workdir=&quot;&quot;</code>           指定容器的工作目录 </li><li><code>-c</code>, <code>--cpu-shares=0</code>        设置容器CPU权重，在CPU共享场景使用  </li><li><code>-e</code>, <code>--env=[]</code>               指定环境变量，容器中可以使用该环境变量  </li><li><code>-m</code>, <code>--memory=&quot;&quot;</code>            指定容器的内存上限  </li><li><code>-P</code>, <code>--publish-all=false</code>    指定容器暴露的端口  </li><li><code>-p</code>, <code>--publish=[]</code>           指定容器暴露的端口 </li><li><code>-h</code>, <code>--hostname=&quot;&quot;</code>          指定容器的主机名  </li><li><code>-v</code>, <code>--volume=[]</code>            给容器挂载存储卷，挂载到容器的某个目录  </li><li><code>--volumes-from=[]</code>          给容器挂载其他容器上的卷，挂载到容器的某个目录</li><li><code>--cap-add=[]</code>               添加权限，权限清单详见：<a href="http://linux.die.net/man/7/capabilities" target="_blank" rel="noopener">http://linux.die.net/man/7/capabilities</a>  </li><li><code>--cap-drop=[]</code>              删除权限，权限清单详见：<a href="http://linux.die.net/man/7/capabilities" target="_blank" rel="noopener">http://linux.die.net/man/7/capabilities</a>  </li><li><code>--cidfile=&quot;&quot;</code>               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  </li><li><code>--cpuset=&quot;&quot;</code>                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  </li><li><code>--device=[]</code>                添加主机设备给容器，相当于设备直通  </li><li><code>--dns=[]</code>                   指定容器的dns服务器  </li><li><code>--dns-search=[]</code>            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  </li><li><code>--entrypoint=&quot;&quot;</code>            覆盖image的入口点  </li><li><code>--env-file=[]</code>              指定环境变量文件，文件格式为每行一个环境变量  </li><li><code>--expose=[]</code>                指定容器暴露的端口，即修改镜像的暴露端口  </li><li><code>--link=[]</code>                  指定容器间的关联，使用其他容器的IP、env等信息  </li><li><code>--lxc-conf=[]</code>              指定容器的配置文件，只有在指定–exec-driver=lxc时使用  </li><li><code>--name=&quot;&quot;</code>                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  </li><li><code>--net=&quot;bridge&quot;</code>             <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">容器网络设置:</span><br><span class="line">      bridge 使用docker daemon指定的网桥     </span><br><span class="line">      host //容器使用主机的网络  </span><br><span class="line">      container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源  </span><br><span class="line">      none 容器使用自己的网络（类似--net=bridge），但是不进行配置</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>--privileged=false</code>         指定容器是否为特权容器，特权容器拥有所有的capabilities  </p></li><li><p><code>--restart=&quot;no&quot;</code>             <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">no：容器退出时不重启  </span><br><span class="line">on-failure：容器故障退出（返回值非零）时重启 </span><br><span class="line">always：容器退出时总是重启</span><br></pre></td></tr></table></figure></p></li><li><p><code>--rm=false</code>                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  </p></li><li><code>--sig-proxy=true</code>           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理  </li></ul></li><li><p><strong>示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># Dockerfile 示例</span><br><span class="line"># version: 1.0.0</span><br><span class="line">FROM ubuntu:latest</span><br><span class="line">MAINTAINER &quot;yaobq13@gmail.com&quot;</span><br><span class="line"># 修改apt-get源</span><br><span class="line"># 备份默认的文件</span><br><span class="line">RUN mv /etc/apt/sources.list ./source.list_bak</span><br><span class="line"># 创建新的文件</span><br><span class="line">RUN touch /etc/apt/sources.list</span><br><span class="line"># 写入</span><br><span class="line">RUN echo deb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN echo deb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN echo deb http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN echo deb http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN echo deb http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN echo deb-src http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN echo deb-src http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN echo deb-src http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN echo deb-src http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN echo deb-src http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse &gt;&gt; /etc/apt/sources.list</span><br><span class="line"># 更新apt-get工具</span><br><span class="line">RUN apt-get update</span><br><span class="line"># 下载安装nginx</span><br><span class="line">RUN apt-get install -y nginx</span><br><span class="line"># 安装vim</span><br><span class="line">RUN apt-get install -y vim</span><br><span class="line"># 写入&quot;hello world&quot;到文件index.html</span><br><span class="line">RUN echo &apos;Hello World!!!&apos; \</span><br><span class="line">    &gt;/usr/share/nginx/html/index.html</span><br><span class="line"># 暴露80端口</span><br><span class="line">EXPOSE 80</span><br><span class="line"># ENTRYPOINT service nginx start</span><br><span class="line"># 容器启动时要执行的命令,执行完成后容器会自动退出,因此使用`tail -f`命令</span><br><span class="line">ENTRYPOINT nginx &amp;&amp; tail -f /var/log/nginx/access.log</span><br></pre></td></tr></table></figure><ul><li>使用Dockerfile制作镜像:<code>docker build -t &quot;ubuntu_nginx:v1.0&quot; -f &quot;/root/static_web/Dfile&quot; .</code></li><li>启动容器: <code>docker run -tid -p 8080:80 --name ubuntu_nginx_container ubuntu_nginx:v1.0 /bin/bash</code></li><li>进入容器内部: <code>docker exec -ti ubuntu_nginx_container /bin/bash</code></li><li>退出容器: <code>exit</code></li></ul></li><li><strong>使用docker commit制作镜像</strong><ul><li>需要一个基础镜像,下载最新的Ubuntu的docker: <code>docker pull centos:7</code></li><li>镜像下载完毕后,启动容器 <code>docker run --name centos_test --privileged -t -i centos:7 /sbin/init</code></li><li>进入容器: <code>docker exec -it centos_test /bin/bash</code></li><li>在容器内安装vim和nginx: <code>yum install -y vim</code>,<code>yum install -y nginx</code></li><li>安装完毕后退出容器: <code>exit</code></li><li>停止容器的运行: <code>docker stop centos_test</code></li><li>将容器提交为新的镜像: <code>docker commit centos_test my_centos_nginx</code></li></ul></li></ul><h6 id="容器的目录映射"><a href="#容器的目录映射" class="headerlink" title="容器的目录映射"></a>容器的目录映射</h6><ul><li>在部署应用容器的时候，最好将容器的配置文件及数据目录跟宿主机目录做个映射关系！最好不要在容器内修改数据</li><li>启动tomcat容器, 将tomcat的配置文件和数据目录跟宿主机做个映射<ul><li><code>docker cp tomcat:/usr/local/tomcat7/webapps /mnt/</code></li><li><code>docker cp tomcat:/usr/local/tomcat7/conf /mnt/</code></li><li>关闭和删除容器,重新启动时,做目录映射关系<ul><li><code>docker stop tomcat</code></li><li><code>docker rm tomcat</code></li></ul></li><li>重新启动容器<ul><li><code>docker run -t -i -d --name=tomcat -v /mnt/webapps:/usr/local/tomcat7/webapps -v /mnt/conf:/usr/local/tomcat7/conf -p 8888:8080 tomcat7 /bin/bash</code></li></ul></li><li>进入容器启动tomcat进程或者<ul><li><code>docker exec tomcat /usr/local/tomcat7/bin/startup.sh</code></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      docker容器镜像的制作,以及相关操作
    
    </summary>
    
      <category term="容器" scheme="https://zonzie.gitee.io/categories/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="docker" scheme="https://zonzie.gitee.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="https://zonzie.gitee.io/2018/06/06/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://zonzie.gitee.io/2018/06/06/抽象工厂模式/</id>
    <published>2018-06-06T08:51:25.000Z</published>
    <updated>2018-10-22T10:38:38.757Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>抽象工厂模式的定义: <strong>Provide an interface for creating families of related or dependent objects without specifying their concrete classes.</strong>(为创建一组相关的或者相互依赖的对象提供一个接口,而且无需指定他们的具体类)</p></blockquote><h4 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象的产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shareMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 所有的产品共有的方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不同实现的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体的产品A1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line"><span class="comment">// 具体实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"this is productA1..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体的产品A2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line"><span class="comment">// 具体的实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomthing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"this is productA2..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCreator</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建A类产品工厂</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 创建B类产品工厂</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 产品等级1的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Creator1</span> <span class="keyword">extends</span> <span class="title">AbstractCreator</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 只生产产品等级为1的A产品</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 只生产产品等级为1的B产品</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 产品等级为2的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Creator2</span> <span class="keyword">extends</span> <span class="title">AbstractCreator</span> </span>&#123;</span><br><span class="line"><span class="comment">// 只生产产品等级为2的A产品</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只生产产品等级为2的B产品</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 场景类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义工厂</span></span><br><span class="line">AbstractCreator creator1 = <span class="keyword">new</span> Creator1();</span><br><span class="line">AbstractCreator creator2 = <span class="keyword">new</span> Creator2();</span><br><span class="line"><span class="comment">// 产生A1对象</span></span><br><span class="line">AbstractProductA a1 = creator1.createProductA();</span><br><span class="line"><span class="comment">// 对象b1</span></span><br><span class="line">AbstractProductB b1 = creator1.createProductB();</span><br><span class="line"><span class="comment">// 对象A2</span></span><br><span class="line">AbstractProductA a2 = creator2.createProductA();</span><br><span class="line"><span class="comment">// 对象B2</span></span><br><span class="line">AbstractProductB b2 = creator2,createProductB();</span><br><span class="line"><span class="comment">// 对相关对象的相关操作</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象工厂模式的优点"><a href="#抽象工厂模式的优点" class="headerlink" title="抽象工厂模式的优点"></a>抽象工厂模式的优点</h4><ul><li>封装性,只需要关心接口而不是实现类</li><li>产品族内的约束为非公开的状态</li></ul><h4 id="抽象工厂模式的缺点"><a href="#抽象工厂模式的缺点" class="headerlink" title="抽象工厂模式的缺点"></a>抽象工厂模式的缺点</h4><ul><li>扩展工厂类非常困难,需要改动大量的代码</li></ul><h4 id="抽象工厂使用场景"><a href="#抽象工厂使用场景" class="headerlink" title="抽象工厂使用场景"></a>抽象工厂使用场景</h4><ul><li>一组对象都有相同的约束,就可以使用抽象工厂模式,例如一个应用需要在不同的平台运行,就可以通过抽象工厂模式屏蔽掉不同平台的影响,不同平台上的软件功能,应用逻辑,UI都应该是非常类似的,唯一不同的是,调用不同的工厂方法,由不同的产品类去处理与操作系统的交互.</li></ul>]]></content>
    
    <summary type="html">
    
      设计模式--抽象工厂模式
    
    </summary>
    
      <category term="design pattern" scheme="https://zonzie.gitee.io/categories/design-pattern/"/>
    
    
      <category term="design pattern" scheme="https://zonzie.gitee.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法模式</title>
    <link href="https://zonzie.gitee.io/2018/06/03/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://zonzie.gitee.io/2018/06/03/工厂方法模式/</id>
    <published>2018-06-03T10:31:12.000Z</published>
    <updated>2018-10-22T10:38:38.757Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工厂方法模式的定义: <strong>Define an interface for creating an object, but let subclasses decide which class to instantiate.Factory Method lets a class defer instantiation to subclasses</strong>.(定义一个用于创建对象的接口,让子类决定实例化哪一个类.工厂方法使一个类的实例化延迟到子类)</p></blockquote><h4 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"><span class="comment">// 产品类的公共方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 业务逻辑处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体产品类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> productA extends Product &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 业务逻辑处理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> productB extends Product &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 业务逻辑处理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象工厂类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> class <span class="title">Creator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建一个产品对象,输入的参数类型自行设置(通常为String,Enumm,Class等,也可以为空)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T extends Product&gt; <span class="function">T <span class="title">createProduct</span><span class="params">(Class&lt;T&gt; c)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> &lt;T extends Product&gt; <span class="function">T <span class="title">createProduct</span><span class="params">(Class&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">Product product = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">product = (Product) Class.forName(c.getName()).newInstance();</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (T)product;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 场景类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String...args)</span> </span>&#123;</span><br><span class="line">Creator creator = <span class="keyword">new</span> ConcreteCreator();</span><br><span class="line">Product productA = creator.createProduct(ProductA.class);</span><br><span class="line"><span class="comment">// 处理业务逻辑</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="工厂方法模式的优点"><a href="#工厂方法模式的优点" class="headerlink" title="工厂方法模式的优点"></a>工厂方法模式的优点</h4><ul><li>封装良好,结构清晰,只需要类名,不需要知道创建对象的具体过程</li><li>扩展性非常的优秀,增加新的类型,只需要修改具体的工厂类就可以了</li><li>屏蔽具体的对象,只需要关心接口,只要接口不发生变化,上层模块就不用发生变化</li><li>工厂方法模式是典型的解耦框架,符合迪米特法则,也符合依赖倒置原则,也符合里氏替换原则,使用子类替换父类</li></ul><h4 id="工厂方法模式的使用场景"><a href="#工厂方法模式的使用场景" class="headerlink" title="工厂方法模式的使用场景"></a>工厂方法模式的使用场景</h4><ul><li>需要灵活,可扩展的框架时,可以考虑使用工厂方法模式</li><li>使用在异构项目中,通过webService与非java项目交互</li><li>可以使用在测试驱动的开发框架下</li></ul><h4 id="工厂方法模式的扩展"><a href="#工厂方法模式的扩展" class="headerlink" title="工厂方法模式的扩展"></a>工厂方法模式的扩展</h4><ul><li>缩小为简单工厂模式,即去掉工厂的抽象类,直接使用工厂类</li><li><p>升级为多个工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多工厂模式的抽象工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">createProduct</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 产品A的工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductAFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 产品B的工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductBFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 场景类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">Product ProductA = <span class="keyword">new</span> ProductAFactory().createProduct();</span><br><span class="line"><span class="comment">// 产品A的相关操作</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Product productB = <span class="keyword">new</span> ProductBFactory().createProduct();</span><br><span class="line"><span class="comment">// 产品B的相关操作</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>替代单例模式,通过反射生成实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomthing</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">clazz</span> </span>= Class.forName(Singleton.class.getName());</span><br><span class="line"><span class="comment">// 获得无参数的构造方法</span></span><br><span class="line">Constructor constructor = clazz.getDeclaredConstructor();</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 产生一个实例对象</span></span><br><span class="line">singleton = (Singleton) constructor.newInstance();</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"><span class="comment">// 异常处理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>延迟加载工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFactory</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Product&gt; prMap = <span class="keyword">new</span> hashMap();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Product <span class="title">createProduct</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">Product product = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 如果map中存在这个对象</span></span><br><span class="line"><span class="keyword">if</span>(prMap.containsKey(type)) &#123;</span><br><span class="line">product = prMap.get(type);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(type.equals(<span class="string">"ProductA"</span>)) &#123;</span><br><span class="line">product = <span class="keyword">new</span> ProductA();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(type.equals(<span class="string">"ProductB"</span>)) &#123;</span><br><span class="line">product = <span class="keyword">new</span> ProductB();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将对象放入map容器中</span></span><br><span class="line">prMap.put(type, product);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      设计模式--工厂方法模式
    
    </summary>
    
      <category term="design pattern" scheme="https://zonzie.gitee.io/categories/design-pattern/"/>
    
    
      <category term="design pattern" scheme="https://zonzie.gitee.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://zonzie.gitee.io/2018/06/03/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://zonzie.gitee.io/2018/06/03/单例模式/</id>
    <published>2018-06-03T07:30:14.000Z</published>
    <updated>2018-10-22T10:38:38.756Z</updated>
    
    <content type="html"><![CDATA[<h4 id="单例模式的定义"><a href="#单例模式的定义" class="headerlink" title="单例模式的定义"></a>单例模式的定义</h4><blockquote><p>单例模式(singleton pattern) 是一个比较简单的模式,定义如下:<br><strong>Ensure a class has only one instance, and provide a global point of access to it.</strong>(确保某一个类只有一个实例,而且自行实例化并向这个系统提供这个实例)</p></blockquote><h4 id="单例模式的通用代码"><a href="#单例模式的通用代码" class="headerlink" title="单例模式的通用代码:"></a>单例模式的通用代码:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sinigleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="comment">// 限制产生多个对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过该方法获得实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> singelton;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类中其他方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单例模式的优点"><a href="#单例模式的优点" class="headerlink" title="单例模式的优点"></a>单例模式的优点</h4><ol><li>减少内存开支,特别是一个对象需要频繁创建,销毁时</li><li>当一个对象的产生需要比较多的资源时,比如读取配置文件,产生其他依赖度对象时</li><li>避免对资源的多重占用,例如写文件的动作,只有一个实例存在内存中,避免对同一个资源文件的同时写操作</li><li>可以在系统中设置全局的访问点,优化共享资源的访问</li></ol><h4 id="单例模式的缺点"><a href="#单例模式的缺点" class="headerlink" title="单例模式的缺点"></a>单例模式的缺点</h4><ol><li>单例模式没有接口,扩展困难</li><li>对测试不利,并行开发环境中,单例未开发完成,无法进行测试</li><li>单例模式和单一职责原则有冲突</li></ol><h4 id="单例模式的使用场景"><a href="#单例模式的使用场景" class="headerlink" title="单例模式的使用场景"></a>单例模式的使用场景</h4><ol><li>要求生成唯一序列号的环境</li><li>在整个项目中需要一个共享的数据访问点或者共享数据</li><li>创建一个对象消耗资源过多时,如访问IO和数据库资源等</li><li>需要大量的静态常量或者静态方法的环境,可以采用单例模式,也可以是枚举类(也是一种单例)或者定义为static的方式</li></ol><h4 id="单例模式的几种形式"><a href="#单例模式的几种形式" class="headerlink" title="单例模式的几种形式"></a>单例模式的几种形式</h4><ul><li><p><strong>懒汉式单例(线程不安全)</strong>,在第一次调用时实例化自己</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton single = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 静态工厂方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(single == <span class="keyword">null</span>) &#123;</span><br><span class="line">single = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> single;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>懒汉式(线程安全)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 加锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singelton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(single == <span class="keyword">null</span>) &#123;</span><br><span class="line">single = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> single;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 双重检查</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span>(singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 静态内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singelton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>饿汉式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在类初始化时,已经实例化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton &#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton single = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="comment">// 静态工厂方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> single;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>产生固定个数实例的单例模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">// 最多产生几个实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> maxNumber = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 存储每个实例的名字</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; nameList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">// 定义一个列表,容纳所有的实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Singleton&gt; instancelist = <span class="keyword">new</span> ArrayList&lt;Singelton&gt;();</span><br><span class="line"><span class="comment">// 当前实例的序列号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> countNumOfInstance = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 产生所有的实例</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxNumber; i++) &#123;</span><br><span class="line">instanceList.add(<span class="keyword">new</span> Emperor(<span class="string">"实例"</span>+(i+<span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 私有化构造</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singelton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 传入名称,建立对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">(String name)</span> </span>&#123;</span><br><span class="line">nameList.add(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 随机获得一个实例 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line">countNumOfInstance = random.nextInt(maxNumOfSingelton);</span><br><span class="line"><span class="keyword">return</span> instanceList.get(countNumOfInstance);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取当前实例的名称</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">currentInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(nameList.get(countNumOfSingleton));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>登记式单例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Singleton&gt; map = <span class="keyword">new</span> HashMap&lt;String,Singleton&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">Singleton single = <span class="keyword">new</span> Singelton();</span><br><span class="line">map.put(single.getClass().getName(), single);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 私有的构造</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singelton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 实例工厂</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(name == <span class="keyword">null</span>) &#123;</span><br><span class="line">name = Singelton.class.getName();</span><br><span class="line">System.out.println(<span class="string">"name == null"</span>+<span class="string">"----&gt;name:"</span>+name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(map.get(name) == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">map.put(name, (Singleton)Class.forName(name).newInstance());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map.get(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      设计模式--单例模式
    
    </summary>
    
      <category term="design pattern" scheme="https://zonzie.gitee.io/categories/design-pattern/"/>
    
    
      <category term="design pattern" scheme="https://zonzie.gitee.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>centos7_64在vmWare中的联网配置</title>
    <link href="https://zonzie.gitee.io/2018/04/24/centos7-64%E5%9C%A8vmWare%E4%B8%AD%E7%9A%84%E8%81%94%E7%BD%91%E9%85%8D%E7%BD%AE/"/>
    <id>https://zonzie.gitee.io/2018/04/24/centos7-64在vmWare中的联网配置/</id>
    <published>2018-04-24T09:19:54.000Z</published>
    <updated>2018-10-22T10:38:38.749Z</updated>
    
    <content type="html"><![CDATA[<ul><li>vmware使用NAT模式的网络配置<ol><li>首先在虚拟机下的 编辑虚拟机设置-&gt;网络设配器-&gt;网络连接中的自定义-&gt;选择VMnet8(NAT模式)</li><li>虚拟机的选项卡 编辑-&gt;虚拟网络编辑器-&gt;添加网络-&gt;选择VMnet8(如果之前有就不能再次添加了,只能有一个)</li><li>添加后修改子网IP为centos7的ip地址,最后一位改为0,点击 NAT设置-&gt;设置网关为IP地址最后一位改为2</li></ol></li><li><p>修改centos7的网卡配置:</p><ol><li>进入网卡文件 <code>cd /etc/sysconfig/network-scripts/</code></li><li>备份原有的网卡,我的是ifcfg-ens33 <code>cp ifcfg-ens33 ./ifcfg-ens33.bak</code></li><li><p>修改原来的网卡,具体配置如下: <code>vi ifcfg-ens33</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=ens33</span><br><span class="line">TYPE=Ethernet</span><br><span class="line"># 静态ip static</span><br><span class="line">BOOTPROTO=static                  </span><br><span class="line">DEFROUTE=yes</span><br><span class="line">PEERDNS=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">PEERROUTES=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=no</span><br><span class="line">NAME=&quot;system eth0&quot;</span><br><span class="line">UUID=5df66116-fefc-4c67-84ec-3153c8d0d893</span><br><span class="line">ONBOOT=yes</span><br><span class="line"># ip地址</span><br><span class="line">IPADDR=192.168.198.88</span><br><span class="line"># 网关</span><br><span class="line">GATEWAY=192.168.198.2</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"># 需要配置一个DNS,不然无法解析域名</span><br><span class="line">DNS1=8.8.8.8</span><br><span class="line">USERCTL=no</span><br></pre></td></tr></table></figure></li><li><p>修改完毕后,保存文件</p></li><li>重启网卡,依次执行以下命令<br><code>systemctl stop NetworkManager</code><br>,<code>systemctl disable NetworkManager</code><br>,<code>systemctl restart network</code></li><li>查看网卡配置 <code>ip addr</code></li><li>查看MAC地址: <code>vim /etc/udev/rules.d/70-persistent-net.rules</code></li><li>网卡的MAC地址 ifcfg-eth* 要和上述的文件中的网卡地址保持一致</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      linux在vmWare中的联网配置
    
    </summary>
    
      <category term="linux" scheme="https://zonzie.gitee.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://zonzie.gitee.io/tags/linux/"/>
    
      <category term="vmWare" scheme="https://zonzie.gitee.io/tags/vmWare/"/>
    
  </entry>
  
</feed>
